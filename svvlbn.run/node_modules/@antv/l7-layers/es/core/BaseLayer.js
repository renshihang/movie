import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";
import _isObject from "lodash/isObject";
import _isFunction from "lodash/isFunction";

var _dec, _dec2, _dec3, _class, _descriptor, _descriptor2, _descriptor3, _temp;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { BlendType, lazyInject, TYPES } from '@antv/l7-core';
import { encodePickingColor } from '@antv/l7-utils';
import { EventEmitter } from 'eventemitter3';
import mergeJsonSchemas from 'merge-json-schemas';
import { SyncBailHook, SyncHook, SyncWaterfallHook } from 'tapable';
import { normalizePasses } from '../plugins/MultiPassRendererPlugin';
import { BlendTypes } from '../utils/blend';
import baseLayerSchema from './schema';
var layerIdCounter = 0;
var BaseLayer = (_dec = lazyInject(TYPES.ILogService), _dec2 = lazyInject(TYPES.IGlobalConfigService), _dec3 = lazyInject(TYPES.IShaderModuleService), (_class = (_temp = function (_EventEmitter) {
  _inherits(BaseLayer, _EventEmitter);

  function BaseLayer() {
    var _this;

    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, BaseLayer);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(BaseLayer).call(this));
    _this.id = "".concat(layerIdCounter++);
    _this.name = "".concat(layerIdCounter++);
    _this.type = void 0;
    _this.visible = true;
    _this.zIndex = 0;
    _this.minZoom = void 0;
    _this.maxZoom = void 0;
    _this.inited = false;
    _this.layerModelNeedUpdate = false;
    _this.pickedFeatureID = -1;
    _this.dataState = {
      dataSourceNeedUpdate: false,
      dataMappingNeedUpdate: false,
      filterNeedUpdate: false,
      featureScaleNeedUpdate: false,
      StyleAttrNeedUpdate: false
    };
    _this.hooks = {
      init: new SyncBailHook(),
      afterInit: new SyncBailHook(),
      beforeRender: new SyncBailHook(),
      beforeRenderData: new SyncWaterfallHook(['data']),
      afterRender: new SyncHook(),
      beforePickingEncode: new SyncHook(),
      afterPickingEncode: new SyncHook(),
      beforeHighlight: new SyncHook(['pickedColor']),
      afterHighlight: new SyncHook(),
      beforeSelect: new SyncHook(['pickedColor']),
      afterSelect: new SyncHook(),
      beforeDestroy: new SyncHook(),
      afterDestroy: new SyncHook()
    };
    _this.models = [];
    _this.multiPassRenderer = void 0;
    _this.plugins = void 0;
    _this.sourceOption = void 0;
    _this.layerModel = void 0;

    _initializerDefineProperty(_this, "logger", _descriptor, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "configService", _descriptor2, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "shaderModuleService", _descriptor3, _assertThisInitialized(_this));

    _this.iconService = void 0;
    _this.fontService = void 0;
    _this.rendererService = void 0;
    _this.layerService = void 0;
    _this.interactionService = void 0;
    _this.mapService = void 0;
    _this.styleAttributeService = void 0;
    _this.layerSource = void 0;
    _this.postProcessingPassFactory = void 0;
    _this.normalPassFactory = void 0;
    _this.animateOptions = {
      enable: false
    };
    _this.container = void 0;
    _this.encodedData = void 0;
    _this.configSchema = void 0;
    _this.currentPickId = null;
    _this.rawConfig = void 0;
    _this.needUpdateConfig = void 0;
    _this.pendingStyleAttributes = [];
    _this.scaleOptions = {};
    _this.animateStartTime = void 0;
    _this.aniamateStatus = false;

    _this.sourceEvent = function () {
      _this.dataState.dataSourceNeedUpdate = true;

      _this.reRender();
    };

    _this.name = config.name || _this.id;
    _this.rawConfig = config;
    return _this;
  }

  _createClass(BaseLayer, [{
    key: "getLayerConfig",
    value: function getLayerConfig() {
      return this.configService.getLayerConfig(this.id);
    }
  }, {
    key: "updateLayerConfig",
    value: function updateLayerConfig(configToUpdate) {
      if (!this.inited) {
        this.needUpdateConfig = _objectSpread({}, this.needUpdateConfig, {}, configToUpdate);
      } else {
        var sceneId = this.container.get(TYPES.SceneID);
        this.configService.setLayerConfig(sceneId, this.id, _objectSpread({}, this.configService.getLayerConfig(this.id), {}, this.needUpdateConfig, {}, configToUpdate));
        this.needUpdateConfig = {};
      }
    }
  }, {
    key: "setContainer",
    value: function setContainer(container) {
      this.container = container;
    }
  }, {
    key: "getContainer",
    value: function getContainer() {
      return this.container;
    }
  }, {
    key: "addPlugin",
    value: function addPlugin(plugin) {
      this.plugins.push(plugin);
      return this;
    }
  }, {
    key: "init",
    value: function init() {
      var _this2 = this;

      var sceneId = this.container.get(TYPES.SceneID);
      this.configService.setLayerConfig(sceneId, this.id, {});
      this.iconService = this.container.get(TYPES.IIconService);
      this.fontService = this.container.get(TYPES.IFontService);
      this.rendererService = this.container.get(TYPES.IRendererService);
      this.layerService = this.container.get(TYPES.ILayerService);
      this.interactionService = this.container.get(TYPES.IInteractionService);
      this.mapService = this.container.get(TYPES.IMapService);
      this.postProcessingPassFactory = this.container.get(TYPES.IFactoryPostProcessingPass);
      this.normalPassFactory = this.container.get(TYPES.IFactoryNormalPass);
      this.styleAttributeService = this.container.get(TYPES.IStyleAttributeService);
      this.multiPassRenderer = this.container.get(TYPES.IMultiPassRenderer);
      this.multiPassRenderer.setLayer(this);
      this.pendingStyleAttributes.forEach(function (_ref) {
        var attributeName = _ref.attributeName,
            attributeField = _ref.attributeField,
            attributeValues = _ref.attributeValues,
            defaultName = _ref.defaultName,
            updateOptions = _ref.updateOptions;

        _this2.styleAttributeService.updateStyleAttribute(attributeName, {
          scale: _objectSpread({
            field: attributeField
          }, _this2.splitValuesAndCallbackInAttribute(attributeValues, _this2.getLayerConfig()[defaultName || attributeName]))
        }, updateOptions);
      });
      this.pendingStyleAttributes = [];
      this.plugins = this.container.getAll(TYPES.ILayerPlugin);
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.plugins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var plugin = _step.value;
          plugin.apply(this, {
            rendererService: this.rendererService,
            mapService: this.mapService,
            styleAttributeService: this.styleAttributeService,
            normalPassFactory: this.normalPassFactory,
            postProcessingPassFactory: this.postProcessingPassFactory
          });
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      this.hooks.init.call();
      this.hooks.afterInit.call();
      this.emit('inited', {
        target: this,
        type: 'inited'
      });
      this.emit('add', {
        target: this,
        type: 'add'
      });
      return this;
    }
  }, {
    key: "prepareBuildModel",
    value: function prepareBuildModel() {
      this.inited = true;
      this.updateLayerConfig(_objectSpread({}, this.getDefaultConfig(), {}, this.rawConfig));

      var _this$getLayerConfig = this.getLayerConfig(),
          animateOption = _this$getLayerConfig.animateOption;

      if (animateOption === null || animateOption === void 0 ? void 0 : animateOption.enable) {
        this.layerService.startAnimate();
        this.aniamateStatus = true;
      }
    }
  }, {
    key: "color",
    value: function color(field, values, updateOptions) {
      this.pendingStyleAttributes.push({
        attributeName: 'color',
        attributeField: field,
        attributeValues: values,
        defaultName: 'colors',
        updateOptions: updateOptions
      });
      return this;
    }
  }, {
    key: "size",
    value: function size(field, values, updateOptions) {
      this.pendingStyleAttributes.push({
        attributeName: 'size',
        attributeField: field,
        attributeValues: values,
        updateOptions: updateOptions
      });
      return this;
    }
  }, {
    key: "filter",
    value: function filter(field, values, updateOptions) {
      this.pendingStyleAttributes.push({
        attributeName: 'filter',
        attributeField: field,
        attributeValues: values,
        updateOptions: updateOptions
      });
      this.dataState.dataMappingNeedUpdate = true;
      return this;
    }
  }, {
    key: "shape",
    value: function shape(field, values, updateOptions) {
      this.pendingStyleAttributes.push({
        attributeName: 'shape',
        attributeField: field,
        attributeValues: values,
        updateOptions: updateOptions
      });
      return this;
    }
  }, {
    key: "label",
    value: function label(field, values, updateOptions) {
      this.pendingStyleAttributes.push({
        attributeName: 'label',
        attributeField: field,
        attributeValues: values,
        updateOptions: updateOptions
      });
      return this;
    }
  }, {
    key: "animate",
    value: function animate(options) {
      var rawAnimate = {};

      if (_isObject(options)) {
        rawAnimate.enable = true;
        rawAnimate = _objectSpread({}, rawAnimate, {}, options);
      } else {
        rawAnimate.enable = options;
      }

      this.updateLayerConfig({
        animateOption: rawAnimate
      });
      return this;
    }
  }, {
    key: "source",
    value: function source(data, options) {
      this.sourceOption = {
        data: data,
        options: options
      };
      return this;
    }
  }, {
    key: "setData",
    value: function setData(data, options) {
      var _this3 = this;

      if (this.inited) {
        this.layerSource.setData(data);
      } else {
        this.on('inited', function () {
          _this3.layerSource.setData(data);
        });
      }

      return this;
    }
  }, {
    key: "style",
    value: function style(options) {
      var _this4 = this;

      var passes = options.passes,
          rest = _objectWithoutProperties(options, ["passes"]);

      if (passes) {
        normalizePasses(passes).forEach(function (pass) {
          var postProcessingPass = _this4.multiPassRenderer.getPostProcessor().getPostProcessingPassByName(pass[0]);

          if (postProcessingPass) {
            postProcessingPass.updateOptions(pass[1]);
          }
        });
      }

      this.rawConfig = _objectSpread({}, this.rawConfig, {}, rest);

      if (this.container) {
        this.updateLayerConfig(this.rawConfig);
      }

      return this;
    }
  }, {
    key: "scale",
    value: function scale(field, cfg) {
      if (_isObject(field)) {
        this.scaleOptions = _objectSpread({}, this.scaleOptions, {}, field);
      } else {
        this.scaleOptions[field] = cfg;
      }

      return this;
    }
  }, {
    key: "render",
    value: function render() {
      if (this.multiPassRenderer && this.multiPassRenderer.getRenderFlag()) {
        this.multiPassRenderer.render();
      } else {
        this.renderModels();
      }

      return this;
    }
  }, {
    key: "active",
    value: function active(options) {
      var activeOption = {};
      activeOption.enableHighlight = _isObject(options) ? true : options;

      if (_isObject(options)) {
        activeOption.enableHighlight = true;

        if (options.color) {
          activeOption.highlightColor = options.color;
        }
      } else {
        activeOption.enableHighlight = !!options;
      }

      this.updateLayerConfig(activeOption);
      return this;
    }
  }, {
    key: "setActive",
    value: function setActive(id, options) {
      var _this5 = this;

      if (_isObject(id)) {
        var _id$x = id.x,
            x = _id$x === void 0 ? 0 : _id$x,
            _id$y = id.y,
            y = _id$y === void 0 ? 0 : _id$y;
        this.updateLayerConfig({
          highlightColor: _isObject(options) ? options.color : this.getLayerConfig().highlightColor
        });
        this.pick({
          x: x,
          y: y
        });
      } else {
        this.updateLayerConfig({
          pickedFeatureID: id,
          highlightColor: _isObject(options) ? options.color : this.getLayerConfig().highlightColor
        });
        this.hooks.beforeSelect.callAsync(encodePickingColor(id), function () {
          setTimeout(function () {
            _this5.reRender();
          }, 1);
        });
      }
    }
  }, {
    key: "select",
    value: function select(option) {
      var activeOption = {};
      activeOption.enableSelect = _isObject(option) ? true : option;

      if (_isObject(option)) {
        activeOption.enableSelect = true;

        if (option.color) {
          activeOption.selectColor = option.color;
        }
      } else {
        activeOption.enableSelect = !!option;
      }

      this.updateLayerConfig(activeOption);
      return this;
    }
  }, {
    key: "setSelect",
    value: function setSelect(id, options) {
      var _this6 = this;

      if (_isObject(id)) {
        var _id$x2 = id.x,
            x = _id$x2 === void 0 ? 0 : _id$x2,
            _id$y2 = id.y,
            y = _id$y2 === void 0 ? 0 : _id$y2;
        this.updateLayerConfig({
          selectColor: _isObject(options) ? options.color : this.getLayerConfig().selectColor
        });
        this.pick({
          x: x,
          y: y
        });
      } else {
        this.updateLayerConfig({
          pickedFeatureID: id,
          selectColor: _isObject(options) ? options.color : this.getLayerConfig().selectColor
        });
        this.hooks.beforeSelect.callAsync(encodePickingColor(id), function () {
          setTimeout(function () {
            _this6.reRender();
          }, 1);
        });
      }
    }
  }, {
    key: "setBlend",
    value: function setBlend(type) {
      this.updateLayerConfig({
        blend: type
      });
      this.layerModelNeedUpdate = true;
      this.reRender();
    }
  }, {
    key: "show",
    value: function show() {
      this.updateLayerConfig({
        visible: true
      });
      this.reRender();
      return this;
    }
  }, {
    key: "hide",
    value: function hide() {
      this.updateLayerConfig({
        visible: false
      });
      this.reRender();
      return this;
    }
  }, {
    key: "setIndex",
    value: function setIndex(index) {
      this.zIndex = index;
      this.layerService.updateRenderOrder();
      return this;
    }
  }, {
    key: "setCurrentPickId",
    value: function setCurrentPickId(id) {
      this.currentPickId = id;
    }
  }, {
    key: "getCurrentPickId",
    value: function getCurrentPickId() {
      return this.currentPickId;
    }
  }, {
    key: "isVisible",
    value: function isVisible() {
      var zoom = this.mapService.getZoom();

      var _this$getLayerConfig2 = this.getLayerConfig(),
          visible = _this$getLayerConfig2.visible,
          _this$getLayerConfig3 = _this$getLayerConfig2.minZoom,
          minZoom = _this$getLayerConfig3 === void 0 ? -Infinity : _this$getLayerConfig3,
          _this$getLayerConfig4 = _this$getLayerConfig2.maxZoom,
          maxZoom = _this$getLayerConfig4 === void 0 ? Infinity : _this$getLayerConfig4;

      return !!visible && zoom >= minZoom && zoom <= maxZoom;
    }
  }, {
    key: "setMinZoom",
    value: function setMinZoom(minZoom) {
      this.updateLayerConfig({
        minZoom: minZoom
      });
      return this;
    }
  }, {
    key: "setMaxZoom",
    value: function setMaxZoom(maxZoom) {
      this.updateLayerConfig({
        maxZoom: maxZoom
      });
      return this;
    }
  }, {
    key: "fitBounds",
    value: function fitBounds() {
      if (!this.inited) {
        this.updateLayerConfig({
          autoFit: true
        });
        return this;
      }

      var source = this.getSource();
      var extent = source.extent;
      this.mapService.fitBounds([[extent[0], extent[1]], [extent[2], extent[3]]]);
      return this;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.hooks.beforeDestroy.call();
      this.layerSource.off('update', this.sourceEvent);
      this.styleAttributeService.clearAllAttributes();
      this.models.forEach(function (model) {
        return model.destroy();
      });
      this.hooks.afterDestroy.call();
      this.emit('remove', {
        target: this,
        type: 'remove'
      });
      this.removeAllListeners();
    }
  }, {
    key: "clear",
    value: function clear() {
      this.styleAttributeService.clearAllAttributes();
      this.models.forEach(function (model) {
        return model.destroy();
      });
    }
  }, {
    key: "isDirty",
    value: function isDirty() {
      return !!(this.styleAttributeService.getLayerStyleAttributes() || []).filter(function (attribute) {
        return attribute.needRescale || attribute.needRemapping || attribute.needRegenerateVertices;
      }).length;
    }
  }, {
    key: "setSource",
    value: function setSource(source) {
      this.layerSource = source;
      var zoom = this.mapService.getZoom();

      if (this.layerSource.cluster) {
        this.layerSource.updateClusterData(zoom);
      }

      this.layerSource.on('update', this.sourceEvent);
    }
  }, {
    key: "getSource",
    value: function getSource() {
      return this.layerSource;
    }
  }, {
    key: "getScaleOptions",
    value: function getScaleOptions() {
      return this.scaleOptions;
    }
  }, {
    key: "setEncodedData",
    value: function setEncodedData(encodedData) {
      this.encodedData = encodedData;
    }
  }, {
    key: "getEncodedData",
    value: function getEncodedData() {
      return this.encodedData;
    }
  }, {
    key: "getConfigSchemaForValidation",
    value: function getConfigSchemaForValidation() {
      if (!this.configSchema) {
        this.configSchema = mergeJsonSchemas([baseLayerSchema, this.getConfigSchema()]);
      }

      return this.configSchema;
    }
  }, {
    key: "pick",
    value: function pick(_ref2) {
      var x = _ref2.x,
          y = _ref2.y;
      this.interactionService.triggerHover({
        x: x,
        y: y
      });
    }
  }, {
    key: "buildLayerModel",
    value: function buildLayerModel(options) {
      var moduleName = options.moduleName,
          vertexShader = options.vertexShader,
          fragmentShader = options.fragmentShader,
          triangulation = options.triangulation,
          rest = _objectWithoutProperties(options, ["moduleName", "vertexShader", "fragmentShader", "triangulation"]);

      this.shaderModuleService.registerModule(moduleName, {
        vs: vertexShader,
        fs: fragmentShader
      });

      var _this$shaderModuleSer = this.shaderModuleService.getModule(moduleName),
          vs = _this$shaderModuleSer.vs,
          fs = _this$shaderModuleSer.fs,
          uniforms = _this$shaderModuleSer.uniforms;

      var createModel = this.rendererService.createModel;

      var _this$styleAttributeS = this.styleAttributeService.createAttributesAndIndices(this.encodedData, triangulation),
          attributes = _this$styleAttributeS.attributes,
          elements = _this$styleAttributeS.elements;

      return createModel(_objectSpread({
        attributes: attributes,
        uniforms: uniforms,
        fs: fs,
        vs: vs,
        elements: elements,
        blend: BlendTypes[BlendType.normal]
      }, rest));
    }
  }, {
    key: "getTime",
    value: function getTime() {
      return this.layerService.clock.getDelta();
    }
  }, {
    key: "setAnimateStartTime",
    value: function setAnimateStartTime() {
      this.animateStartTime = this.layerService.clock.getElapsedTime();
    }
  }, {
    key: "stopAnimate",
    value: function stopAnimate() {
      if (this.aniamateStatus) {
        this.layerService.stopAnimate();
        this.aniamateStatus = false;
        this.updateLayerConfig({
          animateOption: {
            enable: false
          }
        });
      }
    }
  }, {
    key: "getLayerAnimateTime",
    value: function getLayerAnimateTime() {
      return this.layerService.clock.getElapsedTime() - this.animateStartTime;
    }
  }, {
    key: "buildModels",
    value: function buildModels() {
      throw new Error('Method not implemented.');
    }
  }, {
    key: "getConfigSchema",
    value: function getConfigSchema() {
      throw new Error('Method not implemented.');
    }
  }, {
    key: "renderModels",
    value: function renderModels() {
      var _this7 = this;

      if (this.layerModelNeedUpdate) {
        this.models = this.layerModel.buildModels();
        this.layerModelNeedUpdate = false;
      }

      this.models.forEach(function (model) {
        model.draw({
          uniforms: _this7.layerModel.getUninforms()
        });
      });
      return this;
    }
  }, {
    key: "getModelType",
    value: function getModelType() {
      throw new Error('Method not implemented.');
    }
  }, {
    key: "getDefaultConfig",
    value: function getDefaultConfig() {
      return {};
    }
  }, {
    key: "reRender",
    value: function reRender() {
      if (this.inited) {
        this.layerService.renderLayers();
      }
    }
  }, {
    key: "splitValuesAndCallbackInAttribute",
    value: function splitValuesAndCallbackInAttribute(valuesOrCallback, defaultValues) {
      return {
        values: _isFunction(valuesOrCallback) ? undefined : valuesOrCallback || defaultValues,
        callback: _isFunction(valuesOrCallback) ? valuesOrCallback : undefined
      };
    }
  }]);

  return BaseLayer;
}(EventEmitter), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "logger", [_dec], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "configService", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "shaderModuleService", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class));
export { BaseLayer as default };
//# sourceMappingURL=BaseLayer.js.map