{"version":3,"sources":["../../src/plugins/DataMappingPlugin.ts"],"names":["TYPES","rgb2arr","inject","injectable","DataMappingPlugin","IGlobalConfigService","ILogService","layer","styleAttributeService","hooks","init","tap","generateMaping","beforeRenderData","flag","dataState","dataMappingNeedUpdate","beforeRender","attributes","getLayerStyleAttributes","dataArray","getSource","data","attributesToRemapping","filter","attribute","needRemapping","length","setEncodedData","mapping","logger","debug","getLayerStyleAttribute","filterData","scale","record","applyAttributeMapping","map","encodeRecord","id","_id","coordinates","undefined","forEach","values","name","c","Array","isArray","scalers","params","field","hasOwnProperty","type","push"],"mappings":";;;;;;;;AAAA,SASEA,KATF,QAUO,eAVP;AAWA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,MAAT,EAAiBC,UAAjB,QAAmC,WAAnC;IAGqBC,iB,WADpBD,UAAU,E,UAERD,MAAM,CAACF,KAAK,CAACK,oBAAP,C,UAGNH,MAAM,CAACF,KAAK,CAACM,WAAP,C;;;;;;;;;;;0BAILC,K,QAIA;AAAA;;AAAA,UAFEC,qBAEF,QAFEA,qBAEF;AACAD,MAAAA,KAAK,CAACE,KAAN,CAAYC,IAAZ,CAAiBC,GAAjB,CAAqB,mBAArB,EAA0C,YAAM;AAC9C,QAAA,KAAI,CAACC,cAAL,CAAoBL,KAApB,EAA2B;AAAEC,UAAAA,qBAAqB,EAArBA;AAAF,SAA3B;AACD,OAFD;AAIAD,MAAAA,KAAK,CAACE,KAAN,CAAYI,gBAAZ,CAA6BF,GAA7B,CAAiC,mBAAjC,EAAsD,UAACG,IAAD,EAAU;AAC9D,YAAIA,IAAI,IAAIP,KAAK,CAACQ,SAAN,CAAgBC,qBAA5B,EAAmD;AACjDT,UAAAA,KAAK,CAACQ,SAAN,CAAgBC,qBAAhB,GAAwC,KAAxC;;AACA,UAAA,KAAI,CAACJ,cAAL,CAAoBL,KAApB,EAA2B;AAAEC,YAAAA,qBAAqB,EAArBA;AAAF,WAA3B;;AACA,iBAAO,IAAP;AACD;;AACD,eAAO,KAAP;AACD,OAPD;AAUAD,MAAAA,KAAK,CAACE,KAAN,CAAYQ,YAAZ,CAAyBN,GAAzB,CAA6B,mBAA7B,EAAkD,YAAM;AACtD,YAAMO,UAAU,GAAGV,qBAAqB,CAACW,uBAAtB,MAAmD,EAAtE;AADsD,YAE9CC,SAF8C,GAEhCb,KAAK,CAACc,SAAN,GAAkBC,IAFc,CAE9CF,SAF8C;AAGtD,YAAMG,qBAAqB,GAAGL,UAAU,CAACM,MAAX,CAC5B,UAACC,SAAD;AAAA,iBAAeA,SAAS,CAACC,aAAzB;AAAA,SAD4B,CAA9B;;AAGA,YAAIH,qBAAqB,CAACI,MAA1B,EAAkC;AAChCpB,UAAAA,KAAK,CAACqB,cAAN,CAAqB,KAAI,CAACC,OAAL,CAAaN,qBAAb,EAAoCH,SAApC,CAArB;;AACA,UAAA,KAAI,CAACU,MAAL,CAAYC,KAAZ,CAAkB,oBAAlB;AACD;AACF,OAVD;AAWD;;;mCAECxB,K,SAIA;AAAA;;AAAA,UAFEC,qBAEF,SAFEA,qBAEF;AACA,UAAMU,UAAU,GAAGV,qBAAqB,CAACW,uBAAtB,MAAmD,EAAtE;AACA,UAAMK,MAAM,GAAGhB,qBAAqB,CAACwB,sBAAtB,CAA6C,QAA7C,CAAf;AAFA,UAGQZ,SAHR,GAGsBb,KAAK,CAACc,SAAN,GAAkBC,IAHxC,CAGQF,SAHR;AAIA,UAAIa,UAAU,GAAGb,SAAjB;;AAEA,UAAII,MAAJ,aAAIA,MAAJ,uBAAIA,MAAM,CAAEU,KAAZ,EAAmB;AACjBD,QAAAA,UAAU,GAAGb,SAAS,CAACI,MAAV,CAAiB,UAACW,MAAD,EAA4B;AACxD,iBAAO,MAAI,CAACC,qBAAL,CAA2BZ,MAA3B,EAAmCW,MAAnC,EAA2C,CAA3C,CAAP;AACD,SAFY,CAAb;AAGD;;AAGD,UAAI,CAACF,UAAL,EAAiB;AACf;AACD;;AAED1B,MAAAA,KAAK,CAACqB,cAAN,CAAqB,KAAKC,OAAL,CAAaX,UAAb,EAAyBe,UAAzB,CAArB;AACD;;;4BAGCf,U,EACAI,I,EACkB;AAAA;;AAClB,aAAOA,IAAI,CAACe,GAAL,CAAS,UAACF,MAAD,EAA4B;AAC1C,YAAMG,YAA4B,GAAG;AACnCC,UAAAA,EAAE,EAAEJ,MAAM,CAACK,GADwB;AAEnCC,UAAAA,WAAW,EAAEN,MAAM,CAACM;AAFe,SAArC;AAIAvB,QAAAA,UAAU,CACPM,MADH,CACU,UAACC,SAAD;AAAA,iBAAeA,SAAS,CAACS,KAAV,KAAoBQ,SAAnC;AAAA,SADV,EAEGC,OAFH,CAEW,UAAClB,SAAD,EAAgC;AACvC,cAAImB,MAAM,GAAG,MAAI,CAACR,qBAAL,CAA2BX,SAA3B,EAAsCU,MAAtC,CAAb;;AACAV,UAAAA,SAAS,CAACC,aAAV,GAA0B,KAA1B;;AAGA,cAAID,SAAS,CAACoB,IAAV,KAAmB,OAAvB,EAAgC;AAC9BD,YAAAA,MAAM,GAAGA,MAAM,CAACP,GAAP,CAAW,UAACS,CAAD,EAAgB;AAClC,qBAAO7C,OAAO,CAAC6C,CAAD,CAAd;AACD,aAFQ,CAAT;AAGD;;AAEDR,UAAAA,YAAY,CAACb,SAAS,CAACoB,IAAX,CAAZ,GACEE,KAAK,CAACC,OAAN,CAAcJ,MAAd,KAAyBA,MAAM,CAACjB,MAAP,KAAkB,CAA3C,GAA+CiB,MAAM,CAAC,CAAD,CAArD,GAA2DA,MAD7D;AAED,SAfH;AAgBA,eAAON,YAAP;AACD,OAtBM,CAAP;AAuBD;;;0CAGCb,S,EACAU,M,EACA;AAAA;;AACA,UAAI,CAACV,SAAS,CAACS,KAAf,EAAsB;AACpB,eAAO,EAAP;AACD;;AACD,UAAMe,OAAO,GAAG,CAAAxB,SAAS,SAAT,IAAAA,SAAS,WAAT,gCAAAA,SAAS,CAAES,KAAX,sEAAkBe,OAAlB,KAA6B,EAA7C;AACA,UAAMC,MAAiB,GAAG,EAA1B;AAEAD,MAAAA,OAAO,CAACN,OAAR,CAAgB,iBAAe;AAAA;;AAAA,YAAZQ,KAAY,SAAZA,KAAY;;AAC7B,YACEhB,MAAM,CAACiB,cAAP,CAAsBD,KAAtB,KACA,sBAAA1B,SAAS,CAACS,KAAV,wEAAiBmB,IAAjB,MAA0B,UAF5B,EAGE;AACAH,UAAAA,MAAM,CAACI,IAAP,CAAYnB,MAAM,CAACgB,KAAD,CAAlB;AACD;AACF,OAPD;AAQA,aAAO1B,SAAS,CAACI,OAAV,GAAoBJ,SAAS,CAACI,OAAV,CAAkBqB,MAAlB,CAApB,GAAgD,EAAvD;AACD;;;;;;;;;;;;;;;SAhHkB9C,iB","sourcesContent":["import {\n  IEncodeFeature,\n  IGlobalConfigService,\n  ILayer,\n  ILayerPlugin,\n  ILogService,\n  IParseDataItem,\n  IStyleAttribute,\n  IStyleAttributeService,\n  TYPES,\n} from '@antv/l7-core';\nimport { rgb2arr } from '@antv/l7-utils';\nimport { inject, injectable } from 'inversify';\n\n@injectable()\nexport default class DataMappingPlugin implements ILayerPlugin {\n  @inject(TYPES.IGlobalConfigService)\n  private readonly configService: IGlobalConfigService;\n\n  @inject(TYPES.ILogService)\n  private readonly logger: ILogService;\n\n  public apply(\n    layer: ILayer,\n    {\n      styleAttributeService,\n    }: { styleAttributeService: IStyleAttributeService },\n  ) {\n    layer.hooks.init.tap('DataMappingPlugin', () => {\n      this.generateMaping(layer, { styleAttributeService });\n    });\n\n    layer.hooks.beforeRenderData.tap('DataMappingPlugin', (flag) => {\n      if (flag || layer.dataState.dataMappingNeedUpdate) {\n        layer.dataState.dataMappingNeedUpdate = false;\n        this.generateMaping(layer, { styleAttributeService });\n        return true;\n      }\n      return false;\n    });\n\n    // remapping before render\n    layer.hooks.beforeRender.tap('DataMappingPlugin', () => {\n      const attributes = styleAttributeService.getLayerStyleAttributes() || [];\n      const { dataArray } = layer.getSource().data;\n      const attributesToRemapping = attributes.filter(\n        (attribute) => attribute.needRemapping,\n      );\n      if (attributesToRemapping.length) {\n        layer.setEncodedData(this.mapping(attributesToRemapping, dataArray));\n        this.logger.debug('remapping finished');\n      }\n    });\n  }\n  private generateMaping(\n    layer: ILayer,\n    {\n      styleAttributeService,\n    }: { styleAttributeService: IStyleAttributeService },\n  ) {\n    const attributes = styleAttributeService.getLayerStyleAttributes() || [];\n    const filter = styleAttributeService.getLayerStyleAttribute('filter');\n    const { dataArray } = layer.getSource().data;\n    let filterData = dataArray;\n    // 数据过滤完 在执行数据映射\n    if (filter?.scale) {\n      filterData = dataArray.filter((record: IParseDataItem) => {\n        return this.applyAttributeMapping(filter, record)[0];\n      });\n    }\n\n    // TODO: FIXME\n    if (!filterData) {\n      return;\n    }\n    // mapping with source data\n    layer.setEncodedData(this.mapping(attributes, filterData));\n  }\n\n  private mapping(\n    attributes: IStyleAttribute[],\n    data: IParseDataItem[],\n  ): IEncodeFeature[] {\n    return data.map((record: IParseDataItem) => {\n      const encodeRecord: IEncodeFeature = {\n        id: record._id,\n        coordinates: record.coordinates,\n      };\n      attributes\n        .filter((attribute) => attribute.scale !== undefined)\n        .forEach((attribute: IStyleAttribute) => {\n          let values = this.applyAttributeMapping(attribute, record);\n          attribute.needRemapping = false;\n\n          // TODO: 支持每个属性配置 postprocess\n          if (attribute.name === 'color') {\n            values = values.map((c: unknown) => {\n              return rgb2arr(c as string);\n            });\n          }\n          // @ts-ignore\n          encodeRecord[attribute.name] =\n            Array.isArray(values) && values.length === 1 ? values[0] : values;\n        });\n      return encodeRecord;\n    }) as IEncodeFeature[];\n  }\n\n  private applyAttributeMapping(\n    attribute: IStyleAttribute,\n    record: { [key: string]: unknown },\n  ) {\n    if (!attribute.scale) {\n      return [];\n    }\n    const scalers = attribute?.scale?.scalers || [];\n    const params: unknown[] = [];\n\n    scalers.forEach(({ field }) => {\n      if (\n        record.hasOwnProperty(field) ||\n        attribute.scale?.type === 'variable'\n      ) {\n        params.push(record[field]);\n      }\n    });\n    return attribute.mapping ? attribute.mapping(params) : [];\n  }\n}\n"],"file":"DataMappingPlugin.js"}