import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";

var _dec, _dec2, _class, _class2, _descriptor, _temp;

import { TYPES } from '@antv/l7-core';
import { inject, injectable } from 'inversify';
var UpdateStyleAttributePlugin = (_dec = injectable(), _dec2 = inject(TYPES.ILogService), _dec(_class = (_class2 = (_temp = function () {
  function UpdateStyleAttributePlugin() {
    _classCallCheck(this, UpdateStyleAttributePlugin);

    _initializerDefineProperty(this, "logger", _descriptor, this);
  }

  _createClass(UpdateStyleAttributePlugin, [{
    key: "apply",
    value: function apply(layer, _ref) {
      var _this = this;

      var styleAttributeService = _ref.styleAttributeService;
      layer.hooks.init.tap('UpdateStyleAttributePlugin', function () {
        _this.updateStyleAtrribute(layer, {
          styleAttributeService: styleAttributeService
        });
      });
      layer.hooks.beforeRenderData.tap('styleAttributeService', function (flag) {
        if (flag) {
          layer.layerModelNeedUpdate = true;
          return true;
        }

        return false;
      });
      layer.hooks.beforeRender.tap('UpdateStyleAttributePlugin', function () {
        _this.updateStyleAtrribute(layer, {
          styleAttributeService: styleAttributeService
        });
      });
    }
  }, {
    key: "updateStyleAtrribute",
    value: function updateStyleAtrribute(layer, _ref2) {
      var _this2 = this;

      var styleAttributeService = _ref2.styleAttributeService;
      var attributes = styleAttributeService.getLayerStyleAttributes() || [];
      attributes.filter(function (attribute) {
        return attribute.needRegenerateVertices;
      }).forEach(function (attribute) {
        styleAttributeService.updateAttributeByFeatureRange(attribute.name, layer.getEncodedData(), attribute.featureRange.startIndex, attribute.featureRange.endIndex);
        attribute.needRegenerateVertices = false;

        _this2.logger.debug("regenerate vertex attributes: ".concat(attribute.name, " finished"));
      });
    }
  }]);

  return UpdateStyleAttributePlugin;
}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "logger", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class2)) || _class);
export { UpdateStyleAttributePlugin as default };
//# sourceMappingURL=UpdateStyleAttributePlugin.js.map