{"version":3,"sources":["../../src/plugins/FeatureScalePlugin.ts"],"names":["ScaleTypes","StyleScaleType","TYPES","extent","d3","inject","injectable","dateRegex","scaleMap","LINEAR","scaleLinear","POWER","scalePow","LOG","scaleLog","IDENTITY","scaleIdentity","TIME","scaleTime","QUANTILE","scaleQuantile","QUANTIZE","scaleQuantize","THRESHOLD","scaleThreshold","CAT","scaleOrdinal","FeatureScalePlugin","IGlobalConfigService","ILogService","scaleCache","scaleOptions","layer","styleAttributeService","hooks","init","tap","getScaleOptions","attributes","getLayerStyleAttributes","dataArray","getSource","data","caculateScalesForAttributes","beforeRenderData","flag","beforeRender","attributesToRescale","filter","attribute","needRescale","length","logger","debug","n","isNaN","parseFloat","isFinite","forEach","scale","attributeScale","type","name","names","parseFields","field","scales","map","getOrCreateScale","some","VARIABLE","callback","values","option","tick","ticks","domain","range","CONSTANT","index","scalers","func","scalekey","join","styleScale","createScale","Array","isArray","split","scaleOption","undefined","createDefaultScale","firstValue","find","d","isNumber","getDefaultType","cfg","createDefaultScaleConfig","Object","assign","test","item"],"mappings":"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","sourcesContent":["import {\n  IGlobalConfigService,\n  ILayer,\n  ILayerPlugin,\n  ILogService,\n  IScale,\n  IScaleOptions,\n  IStyleAttribute,\n  IStyleAttributeService,\n  IStyleScale,\n  ScaleTypeName,\n  ScaleTypes,\n  StyleScaleType,\n  TYPES,\n} from '@antv/l7-core';\nimport { IParseDataItem } from '@antv/l7-source';\nimport { extent, ticks } from 'd3-array';\nimport * as d3 from 'd3-scale';\nimport { inject, injectable } from 'inversify';\nimport { isNil, isString, uniq } from 'lodash';\n\nconst dateRegex = /^(?:(?!0000)[0-9]{4}([-/.]+)(?:(?:0?[1-9]|1[0-2])\\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\\1(?:29|30)|(?:0?[13578]|1[02])\\1(?:31))|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)([-/.]?)0?2\\2(?:29))(\\s+([01]|([01][0-9]|2[0-3])):([0-9]|[0-5][0-9]):([0-9]|[0-5][0-9]))?$/;\n\nconst scaleMap = {\n  [ScaleTypes.LINEAR]: d3.scaleLinear,\n  [ScaleTypes.POWER]: d3.scalePow,\n  [ScaleTypes.LOG]: d3.scaleLog,\n  [ScaleTypes.IDENTITY]: d3.scaleIdentity,\n  [ScaleTypes.TIME]: d3.scaleTime,\n  [ScaleTypes.QUANTILE]: d3.scaleQuantile,\n  [ScaleTypes.QUANTIZE]: d3.scaleQuantize,\n  [ScaleTypes.THRESHOLD]: d3.scaleThreshold,\n  [ScaleTypes.CAT]: d3.scaleOrdinal,\n};\n\n/**\n * 根据 Source 原始数据为指定字段创建 Scale，保存在 StyleAttribute 上，供下游插件使用\n */\n@injectable()\nexport default class FeatureScalePlugin implements ILayerPlugin {\n  @inject(TYPES.IGlobalConfigService)\n  private readonly configService: IGlobalConfigService;\n\n  @inject(TYPES.ILogService)\n  private readonly logger: ILogService;\n\n  // key = field_attribute name\n  private scaleCache: {\n    [field: string]: IStyleScale;\n  } = {};\n\n  private scaleOptions: IScaleOptions = {};\n\n  public apply(\n    layer: ILayer,\n    {\n      styleAttributeService,\n    }: { styleAttributeService: IStyleAttributeService },\n  ) {\n    layer.hooks.init.tap('FeatureScalePlugin', () => {\n      this.scaleOptions = layer.getScaleOptions();\n      const attributes = styleAttributeService.getLayerStyleAttributes();\n      const { dataArray } = layer.getSource().data;\n      this.caculateScalesForAttributes(attributes || [], dataArray);\n    });\n\n    // 检测数据是不否需要更新\n    layer.hooks.beforeRenderData.tap('FeatureScalePlugin', (flag) => {\n      if (flag) {\n        this.scaleOptions = layer.getScaleOptions();\n        const attributes = styleAttributeService.getLayerStyleAttributes();\n        const { dataArray } = layer.getSource().data;\n        this.caculateScalesForAttributes(attributes || [], dataArray);\n        return true;\n      }\n      return false;\n    });\n\n    layer.hooks.beforeRender.tap('FeatureScalePlugin', () => {\n      this.scaleOptions = layer.getScaleOptions();\n      const attributes = styleAttributeService.getLayerStyleAttributes();\n      if (attributes) {\n        const { dataArray } = layer.getSource().data;\n        const attributesToRescale = attributes.filter(\n          (attribute) => attribute.needRescale,\n        );\n        if (attributesToRescale.length) {\n          this.caculateScalesForAttributes(attributesToRescale, dataArray);\n          this.logger.debug('rescale finished');\n        }\n      }\n    });\n  }\n  private isNumber(n: any) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  private caculateScalesForAttributes(\n    attributes: IStyleAttribute[],\n    dataArray: IParseDataItem[],\n  ) {\n    this.scaleCache = {};\n    attributes.forEach((attribute) => {\n      if (attribute.scale) {\n        // 创建Scale\n        const attributeScale = attribute.scale;\n        const type = attribute.name;\n        attributeScale.names = this.parseFields(attribute!.scale!.field || []);\n        const scales: IStyleScale[] = attributeScale.names.map(\n          (field: string) => {\n            return this.getOrCreateScale(field, attribute, dataArray);\n          },\n        );\n\n        // 为scales 设置值区间\n        if (scales.some((scale) => scale.type === StyleScaleType.VARIABLE)) {\n          attributeScale.type = StyleScaleType.VARIABLE;\n          scales.forEach((scale) => {\n            // 如果设置了回调, 这不需要设置让range\n            if (!attributeScale.callback) {\n              if (attributeScale.values && attributeScale.values !== 'text') {\n                if (\n                  scale.option?.type === 'linear' &&\n                  attributeScale.values.length > 2\n                ) {\n                  const tick = scale.scale.ticks(attributeScale.values.length);\n                  if (type === 'color') {\n                    scale.scale.domain(tick);\n                  }\n                }\n                scale.scale.range(attributeScale.values);\n              } else if (scale.option?.type === 'cat') {\n                // 如果没有设置初值且 类型为cat，range ==domain;\n\n                scale.scale.range(scale.option.domain);\n              }\n            }\n          });\n        } else {\n          // 设置attribute 常量值 常量直接在value取值\n          attributeScale.type = StyleScaleType.CONSTANT;\n          attributeScale.values = scales.map((scale, index) => {\n            return scale.scale(attributeScale.names[index]);\n          });\n        }\n        attributeScale.scalers = scales.map((scale: IStyleScale) => {\n          return {\n            field: scale.field,\n            func: scale.scale,\n          };\n        });\n\n        attribute.needRescale = false;\n      }\n    });\n  }\n  private getOrCreateScale(\n    field: string,\n    attribute: IStyleAttribute,\n    dataArray: IParseDataItem[],\n  ) {\n    const scalekey = [field, attribute.name].join('_');\n    const values = attribute.scale?.values;\n    if (this.scaleCache[scalekey]) {\n      return this.scaleCache[scalekey];\n    }\n    const styleScale = this.createScale(field, values, dataArray);\n    this.scaleCache[scalekey] = styleScale;\n\n    return this.scaleCache[scalekey];\n  }\n\n  /**\n   * @example\n   * 'w*h' => ['w', 'h']\n   * 'w' => ['w']\n   */\n  private parseFields(field: string[] | string): string[] {\n    if (Array.isArray(field)) {\n      return field;\n    }\n    if (isString(field)) {\n      return field.split('*');\n    }\n    return [field];\n  }\n\n  private createScale(\n    field: string,\n    values: unknown[] | string | undefined,\n    data?: IParseDataItem[],\n  ): IStyleScale {\n    // 首先查找全局默认配置例如 color\n    const scaleOption: IScale | undefined = this.scaleOptions[field];\n    const styleScale: IStyleScale = {\n      field,\n      scale: undefined,\n      type: StyleScaleType.VARIABLE,\n      option: scaleOption,\n    };\n\n    if (!data || !data.length) {\n      if (scaleOption && scaleOption.type) {\n        styleScale.scale = this.createDefaultScale(scaleOption);\n      } else {\n        styleScale.scale = d3.scaleOrdinal([field]);\n        styleScale.type = StyleScaleType.CONSTANT;\n      }\n      return styleScale;\n    }\n    const firstValue = data!.find((d) => !isNil(d[field]))?.[field];\n    // 常量 Scale\n    if (this.isNumber(field) || (isNil(firstValue) && !scaleOption)) {\n      styleScale.scale = d3.scaleOrdinal([field]);\n      styleScale.type = StyleScaleType.CONSTANT;\n    } else {\n      // 根据数据类型判断 默认等分位，时间，和枚举类型\n      let type =\n        (scaleOption && scaleOption.type) || this.getDefaultType(firstValue);\n      if (values === 'text') {\n        // text 为内置变 如果是文本则为cat\n        type = ScaleTypes.CAT;\n      }\n      const cfg = this.createDefaultScaleConfig(type, field, data);\n      Object.assign(cfg, scaleOption);\n      styleScale.scale = this.createDefaultScale(cfg);\n      styleScale.option = cfg;\n    }\n    return styleScale;\n  }\n\n  private getDefaultType(firstValue: unknown) {\n    let type = ScaleTypes.LINEAR;\n    if (typeof firstValue === 'string') {\n      type = dateRegex.test(firstValue) ? ScaleTypes.TIME : ScaleTypes.CAT;\n    }\n    return type;\n  }\n\n  private createDefaultScaleConfig(\n    type: ScaleTypeName,\n    field: string,\n    data?: IParseDataItem[],\n  ) {\n    const cfg: IScale = {\n      type,\n    };\n    const values = data?.map((item) => item[field]) || [];\n    // 默认类型为 Quantile Scales https://github.com/d3/d3-scale#quantile-scales\n    if (type !== ScaleTypes.CAT && type !== ScaleTypes.QUANTILE) {\n      cfg.domain = extent(values);\n    } else if (type === ScaleTypes.CAT) {\n      cfg.domain = uniq(values);\n    } else if (type === ScaleTypes.QUANTILE) {\n      cfg.domain = values;\n    }\n    return cfg;\n  }\n\n  private createDefaultScale({ type, domain }: IScale) {\n    // @ts-ignore\n    const scale = scaleMap[type]();\n    if (domain) {\n      scale.domain(domain);\n    }\n    // TODO 其他属性支持\n    return scale;\n  }\n}\n"],"file":"FeatureScalePlugin.js"}