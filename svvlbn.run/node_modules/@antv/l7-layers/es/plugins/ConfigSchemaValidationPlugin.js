import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";

var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

import { TYPES } from '@antv/l7-core';
import { inject, injectable } from 'inversify';
var ConfigSchemaValidationPlugin = (_dec = injectable(), _dec2 = inject(TYPES.IGlobalConfigService), _dec3 = inject(TYPES.ILogService), _dec(_class = (_class2 = (_temp = function () {
  function ConfigSchemaValidationPlugin() {
    _classCallCheck(this, ConfigSchemaValidationPlugin);

    _initializerDefineProperty(this, "configService", _descriptor, this);

    _initializerDefineProperty(this, "logger", _descriptor2, this);
  }

  _createClass(ConfigSchemaValidationPlugin, [{
    key: "apply",
    value: function apply(layer) {
      var _this = this;

      layer.hooks.init.tap('ConfigSchemaValidationPlugin', function () {
        _this.configService.registerLayerConfigSchemaValidator(layer.name, layer.getConfigSchemaForValidation());

        var _this$configService$v = _this.configService.validateLayerConfig(layer.name, layer.getLayerConfig()),
            valid = _this$configService$v.valid,
            errorText = _this$configService$v.errorText;

        if (!valid) {
          _this.logger.error(errorText || '');

          return false;
        }
      });
      layer.hooks.beforeRender.tap('ConfigSchemaValidationPlugin', function () {});
    }
  }]);

  return ConfigSchemaValidationPlugin;
}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "configService", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "logger", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class2)) || _class);
export { ConfigSchemaValidationPlugin as default };
//# sourceMappingURL=ConfigSchemaValidationPlugin.js.map