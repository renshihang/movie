{"version":3,"sources":["../../src/plugins/UpdateStyleAttributePlugin.ts"],"names":["UpdateStyleAttributePlugin","TYPES","ILogService","layer","styleAttributeService","hooks","init","tap","updateStyleAtrribute","beforeRenderData","flag","layerModelNeedUpdate","beforeRender","attributes","getLayerStyleAttributes","filter","attribute","needRegenerateVertices","forEach","updateAttributeByFeatureRange","name","getEncodedData","featureRange","startIndex","endIndex","logger","debug"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AAOA;;;;IAMqBA,0B,WADpB,4B,UAEE,uBAAOC,cAAMC,WAAb,C;;;;;;;;0BAICC,K,QAIA;AAAA;;AAAA,UAFEC,qBAEF,QAFEA,qBAEF;AACAD,MAAAA,KAAK,CAACE,KAAN,CAAYC,IAAZ,CAAiBC,GAAjB,CAAqB,4BAArB,EAAmD,YAAM;AACvD,QAAA,KAAI,CAACC,oBAAL,CAA0BL,KAA1B,EAAiC;AAAEC,UAAAA,qBAAqB,EAArBA;AAAF,SAAjC;AACD,OAFD;AAIAD,MAAAA,KAAK,CAACE,KAAN,CAAYI,gBAAZ,CAA6BF,GAA7B,CAAiC,uBAAjC,EAA0D,UAACG,IAAD,EAAU;AAClE,YAAIA,IAAJ,EAAU;AAIRP,UAAAA,KAAK,CAACQ,oBAAN,GAA6B,IAA7B;AACA,iBAAO,IAAP;AACD;;AACD,eAAO,KAAP;AACD,OATD;AAWAR,MAAAA,KAAK,CAACE,KAAN,CAAYO,YAAZ,CAAyBL,GAAzB,CAA6B,4BAA7B,EAA2D,YAAM;AAC/D,QAAA,KAAI,CAACC,oBAAL,CAA0BL,KAA1B,EAAiC;AAAEC,UAAAA,qBAAqB,EAArBA;AAAF,SAAjC;AACD,OAFD;AAGD;;;yCAGCD,K,SAIA;AAAA;;AAAA,UAFEC,qBAEF,SAFEA,qBAEF;AACA,UAAMS,UAAU,GAAGT,qBAAqB,CAACU,uBAAtB,MAAmD,EAAtE;AACAD,MAAAA,UAAU,CACPE,MADH,CACU,UAACC,SAAD;AAAA,eAAeA,SAAS,CAACC,sBAAzB;AAAA,OADV,EAEGC,OAFH,CAEW,UAACF,SAAD,EAAe;AAEtBZ,QAAAA,qBAAqB,CAACe,6BAAtB,CACEH,SAAS,CAACI,IADZ,EAEEjB,KAAK,CAACkB,cAAN,EAFF,EAGEL,SAAS,CAACM,YAAV,CAAuBC,UAHzB,EAIEP,SAAS,CAACM,YAAV,CAAuBE,QAJzB;AAMAR,QAAAA,SAAS,CAACC,sBAAV,GAAmC,KAAnC;;AACA,QAAA,MAAI,CAACQ,MAAL,CAAYC,KAAZ,yCACmCV,SAAS,CAACI,IAD7C;AAGD,OAdH;AAeD","sourcesContent":["import {\n  ILayer,\n  ILayerPlugin,\n  ILogService,\n  IStyleAttributeService,\n  TYPES,\n} from '@antv/l7-core';\nimport { inject, injectable } from 'inversify';\n\n/**\n * 在初始化阶段完成属性的注册，以及首次根据 Layer 指定的三角化方法完成 indices 和 attribute 的创建\n */\n@injectable()\nexport default class UpdateStyleAttributePlugin implements ILayerPlugin {\n  @inject(TYPES.ILogService)\n  private readonly logger: ILogService;\n\n  public apply(\n    layer: ILayer,\n    {\n      styleAttributeService,\n    }: { styleAttributeService: IStyleAttributeService },\n  ) {\n    layer.hooks.init.tap('UpdateStyleAttributePlugin', () => {\n      this.updateStyleAtrribute(layer, { styleAttributeService });\n    });\n\n    layer.hooks.beforeRenderData.tap('styleAttributeService', (flag) => {\n      if (flag) {\n        // styleAttributeService.createAttributesAndIndices(\n        //   layer.getEncodedData(),\n        // );\n        layer.layerModelNeedUpdate = true;\n        return true;\n      }\n      return false;\n    });\n\n    layer.hooks.beforeRender.tap('UpdateStyleAttributePlugin', () => {\n      this.updateStyleAtrribute(layer, { styleAttributeService });\n    });\n  }\n\n  private updateStyleAtrribute(\n    layer: ILayer,\n    {\n      styleAttributeService,\n    }: { styleAttributeService: IStyleAttributeService },\n  ) {\n    const attributes = styleAttributeService.getLayerStyleAttributes() || [];\n    attributes\n      .filter((attribute) => attribute.needRegenerateVertices)\n      .forEach((attribute) => {\n        // 精确更新某个/某些 feature(s)，需要传入 featureIdx\n        styleAttributeService.updateAttributeByFeatureRange(\n          attribute.name,\n          layer.getEncodedData(), // 获取经过 mapping 最新的数据\n          attribute.featureRange.startIndex,\n          attribute.featureRange.endIndex,\n        );\n        attribute.needRegenerateVertices = false;\n        this.logger.debug(\n          `regenerate vertex attributes: ${attribute.name} finished`,\n        );\n      });\n  }\n}\n"],"file":"UpdateStyleAttributePlugin.js"}