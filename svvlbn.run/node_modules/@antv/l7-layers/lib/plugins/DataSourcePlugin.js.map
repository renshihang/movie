{"version":3,"sources":["../../src/plugins/DataSourcePlugin.ts"],"names":["DataSourcePlugin","mapService","layer","getContainer","get","TYPES","IMapService","hooks","init","tap","sourceOption","data","options","setSource","Source","updateClusterData","beforeRenderData","flag","neeUpdate1","neeUpdate2","dataState","dataSourceNeedUpdate","source","getSource","cluster","clusterOptions","zoom","maxZoom","newZoom","getZoom","Math","abs","floor"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;IAGqBA,gB,WADpB,4B;;;SAEWC,U;;;;;0BACGC,K,EAAe;AAAA;;AAC1B,WAAKD,UAAL,GAAkBC,KAAK,CAACC,YAAN,GAAqBC,GAArB,CAAsCC,cAAMC,WAA5C,CAAlB;AACAJ,MAAAA,KAAK,CAACK,KAAN,CAAYC,IAAZ,CAAiBC,GAAjB,CAAqB,kBAArB,EAAyC,YAAM;AAAA,kCACnBP,KAAK,CAACQ,YADa;AAAA,YACrCC,IADqC,uBACrCA,IADqC;AAAA,YAC/BC,OAD+B,uBAC/BA,OAD+B;AAE7CV,QAAAA,KAAK,CAACW,SAAN,CAAgB,IAAIC,iBAAJ,CAAWH,IAAX,EAAiBC,OAAjB,CAAhB;;AAIA,QAAA,KAAI,CAACG,iBAAL,CAAuBb,KAAvB;AACD,OAPD;AAUAA,MAAAA,KAAK,CAACK,KAAN,CAAYS,gBAAZ,CAA6BP,GAA7B,CAAiC,kBAAjC,EAAqD,UAACQ,IAAD,EAAU;AAC7D,YAAMC,UAAU,GAAG,KAAI,CAACH,iBAAL,CAAuBb,KAAvB,CAAnB;;AACA,YAAMiB,UAAU,GAAGjB,KAAK,CAACkB,SAAN,CAAgBC,oBAAnC;AACAnB,QAAAA,KAAK,CAACkB,SAAN,CAAgBC,oBAAhB,GAAuC,KAAvC;AACA,eAAOH,UAAU,IAAIC,UAArB;AACD,OALD;AAMD;;;sCAEyBjB,K,EAAwB;AAChD,UAAMoB,MAAM,GAAGpB,KAAK,CAACqB,SAAN,EAAf;AACA,UAAMC,OAAO,GAAGF,MAAM,CAACE,OAAvB;AAFgD,kCAGbF,MAAM,CAACG,cAHM;AAAA,yDAGxCC,IAHwC;AAAA,UAGxCA,IAHwC,uCAGjC,CAHiC;AAAA,yDAG9BC,OAH8B;AAAA,UAG9BA,OAH8B,uCAGpB,EAHoB;AAIhD,UAAMC,OAAO,GAAG,KAAK3B,UAAL,CAAgB4B,OAAhB,KAA4B,CAA5C;;AACA,UAAIL,OAAO,IAAIM,IAAI,CAACC,GAAL,CAASL,IAAI,GAAGE,OAAhB,IAA2B,CAAtC,IAA2CD,OAAO,GAAGD,IAAzD,EAA+D;AAC7DJ,QAAAA,MAAM,CAACP,iBAAP,CAAyBe,IAAI,CAACE,KAAL,CAAWJ,OAAX,CAAzB;AACA,eAAO,IAAP;AACD;;AACD,aAAO,KAAP;AACD","sourcesContent":["import { ILayer, ILayerPlugin, IMapService, TYPES } from '@antv/l7-core';\nimport Source from '@antv/l7-source';\nimport { injectable } from 'inversify';\n\n@injectable()\nexport default class DataSourcePlugin implements ILayerPlugin {\n  protected mapService: IMapService;\n  public apply(layer: ILayer) {\n    this.mapService = layer.getContainer().get<IMapService>(TYPES.IMapService);\n    layer.hooks.init.tap('DataSourcePlugin', () => {\n      const { data, options } = layer.sourceOption;\n      layer.setSource(new Source(data, options));\n      // if (layer.getSource().data.dataArray.length === 0) {\n      //   return true;\n      // }\n      this.updateClusterData(layer);\n    });\n\n    // 检测数据不否需要更新\n    layer.hooks.beforeRenderData.tap('DataSourcePlugin', (flag) => {\n      const neeUpdate1 = this.updateClusterData(layer);\n      const neeUpdate2 = layer.dataState.dataSourceNeedUpdate;\n      layer.dataState.dataSourceNeedUpdate = false;\n      return neeUpdate1 || neeUpdate2;\n    });\n  }\n\n  private updateClusterData(layer: ILayer): boolean {\n    const source = layer.getSource();\n    const cluster = source.cluster;\n    const { zoom = 0, maxZoom = 16 } = source.clusterOptions;\n    const newZoom = this.mapService.getZoom() - 1;\n    if (cluster && Math.abs(zoom - newZoom) > 1 && maxZoom > zoom) {\n      source.updateClusterData(Math.floor(newZoom));\n      return true;\n    }\n    return false;\n  }\n}\n"],"file":"DataSourcePlugin.js"}