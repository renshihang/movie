{"version":3,"sources":["../../../src/point/models/fill.ts"],"names":["FillModel","layer","getLayerConfig","opacity","stroke","strokeWidth","u_opacity","u_stroke_width","u_stroke_color","animateOption","u_aimate","animateOption2Array","u_time","getLayerAnimateTime","styleAttributeService","createAttributesAndIndices","getEncodedData","PointFillTriangulation","buildLayerModel","moduleName","vertexShader","pointFillVert","fragmentShader","pointFillFrag","triangulation","depth","enable","option","speed","rings","registerStyleAttribute","name","type","AttributeType","Attribute","descriptor","buffer","usage","gl","DYNAMIC_DRAW","data","FLOAT","size","update","feature","featureIdx","vertex","attributeIdx","extrude","extrudeIndex","Array","isArray","shape","shape2d","shapeIndex","indexOf","BaseModel"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IAnimateOption,\n  IAttribute,\n  IElements,\n  IEncodeFeature,\n  ILayerConfig,\n  IModel,\n  IModelUniform,\n} from '@antv/l7-core';\nimport { rgb2arr } from '@antv/l7-utils';\nimport BaseModel from '../../core/BaseModel';\nimport { PointFillTriangulation } from '../../core/triangulation';\nimport pointFillFrag from '../shaders/fill_frag.glsl';\nimport pointFillVert from '../shaders/fill_vert.glsl';\ninterface IPointLayerStyleOptions {\n  opacity: number;\n  strokeWidth: number;\n  stroke: string;\n}\nexport default class FillModel extends BaseModel {\n  public getUninforms(): IModelUniform {\n    const {\n      opacity = 1,\n      stroke = 'rgb(0,0,0,0)',\n      strokeWidth = 1,\n    } = this.layer.getLayerConfig() as IPointLayerStyleOptions;\n    return {\n      u_opacity: opacity,\n      u_stroke_width: strokeWidth,\n      u_stroke_color: rgb2arr(stroke),\n    };\n  }\n  public getAnimateUniforms(): IModelUniform {\n    const { animateOption } = this.layer.getLayerConfig() as ILayerConfig;\n    return {\n      u_aimate: this.animateOption2Array(animateOption as IAnimateOption),\n      u_time: this.layer.getLayerAnimateTime(),\n    };\n  }\n\n  public getAttribute(): {\n    attributes: {\n      [attributeName: string]: IAttribute;\n    };\n    elements: IElements;\n  } {\n    return this.styleAttributeService.createAttributesAndIndices(\n      this.layer.getEncodedData(),\n      PointFillTriangulation,\n    );\n  }\n  public buildModels(): IModel[] {\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'pointfill',\n        vertexShader: pointFillVert,\n        fragmentShader: pointFillFrag,\n        triangulation: PointFillTriangulation,\n        depth: { enable: false },\n      }),\n    ];\n  }\n  protected animateOption2Array(option: IAnimateOption): number[] {\n    return [option.enable ? 0 : 1.0, option.speed || 1, option.rings || 3, 0];\n  }\n  protected registerBuiltinAttributes() {\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'extrude',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Extrude',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const extrude = [-1, -1, 1, -1, 1, 1, -1, 1];\n          const extrudeIndex = (attributeIdx % 4) * 2;\n          return [extrude[extrudeIndex], extrude[extrudeIndex + 1]];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size } = feature;\n          return Array.isArray(size) ? [size[0]] : [size as number];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'shape',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Shape',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { shape = 2 } = feature;\n          const shape2d = this.layer.getLayerConfig().shape2d as string[];\n          const shapeIndex = shape2d.indexOf(shape as string);\n          return [shapeIndex];\n        },\n      },\n    });\n  }\n}\n"],"file":"fill.js"}