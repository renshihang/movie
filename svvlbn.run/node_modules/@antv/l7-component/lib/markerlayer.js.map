{"version":3,"sources":["../src/markerlayer.ts"],"names":["MarkerLayer","option","markers","markerLayerOption","clusterIndex","points","clusterMarkers","mapsService","scene","zoom","getDefault","clusterOption","cluster","radius","maxZoom","minZoom","style","className","element","generateElement","get","TYPES","IMapService","initCluster","update","on","addMarkers","marker","addPoint","length","push","indexOf","markerIndex","splice","getMarkers","forEach","addTo","remove","off","clear","removeAllListeners","id","getLnglat","lng","lat","feature","geometry","type","coordinates","properties","getExtData","marker_id","Supercluster","load","clusterPoint","getClusters","field","method","cluster_id","clusterData","getLeaves","columnData","map","item","data","column","Satistics","getColumn","stat","getSatByColumn","fieldName","hasOwnProperty","clusterMarker","normalMarker","clusterId","limit","Infinity","offset","Marker","setLnglat","getZoom","Math","abs","getClusterMarker","floor","el","DOM","create","label","span","textContent","point_count","EventEmitter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAGA;;AACA;;;;;;IA0BqBA,W;;;AAUnB,uBAAYC,MAAZ,EAAkD;AAAA;;AAAA;;AAAA;AAChD;AADgD,UAT1CC,OAS0C,GATrB,EASqB;AAAA,UAR1CC,iBAQ0C;AAAA,UAP1CC,YAO0C;AAAA,UAN1CC,MAM0C,GANhB,EAMgB;AAAA,UAL1CC,cAK0C,GALd,EAKc;AAAA,UAJ1CC,WAI0C;AAAA,UAH1CC,KAG0C;AAAA,UAF1CC,IAE0C;AAEhD,UAAKN,iBAAL,GAAyB,qBAAM,MAAKO,UAAL,EAAN,EAAyBT,MAAzB,CAAzB;AACA,0BAAQ,CAAC,QAAD,CAAR;AACA,UAAKQ,IAAL,GAAY,gCAAKN,iBAAL,CAAuBQ,aAAvB,gFAAsCF,IAAtC,KAA8C,CAAC,EAA3D;AAJgD;AAKjD;;;;iCACmB;AAClB,aAAO;AACLG,QAAAA,OAAO,EAAE,KADJ;AAELD,QAAAA,aAAa,EAAE;AACbE,UAAAA,MAAM,EAAE,EADK;AAEbC,UAAAA,OAAO,EAAE,EAFI;AAGbC,UAAAA,OAAO,EAAE,CAHI;AAIbN,UAAAA,IAAI,EAAE,CAAC,EAJM;AAKbO,UAAAA,KAAK,EAAE,EALM;AAMbC,UAAAA,SAAS,EAAE,EANE;AAObC,UAAAA,OAAO,EAAE,KAAKC;AAPD;AAFV,OAAP;AAYD;;;0BACYX,K,EAAkB;AAE7B,WAAKA,KAAL,GAAaA,KAAb;AACA,WAAKD,WAAL,GAAmBC,KAAK,CAACY,GAAN,CAAuBC,cAAMC,WAA7B,CAAnB;;AACA,UAAI,KAAKnB,iBAAL,CAAuBS,OAA3B,EAAoC;AAClC,aAAKW,WAAL;AACA,aAAKC,MAAL;AACA,aAAKjB,WAAL,CAAiBkB,EAAjB,CAAoB,MAApB,EAA4B,KAAKD,MAAjC;AACA,aAAKjB,WAAL,CAAiBkB,EAAjB,CAAoB,YAApB,EAAkC,KAAKD,MAAvC;AACD;;AACD,WAAKE,UAAL;AACA,aAAO,IAAP;AACD;;;8BACgBC,M,EAAiB;AAChC,UAAMf,OAAO,GAAG,KAAKT,iBAAL,CAAuBS,OAAvC;;AACA,UAAIA,OAAJ,EAAa;AACX,aAAKgB,QAAL,CAAcD,MAAd,EAAsB,KAAKzB,OAAL,CAAa2B,MAAnC;AACD;;AACD,WAAK3B,OAAL,CAAa4B,IAAb,CAAkBH,MAAlB;AACD;;;iCAEmBA,M,EAAiB;AACnC,WAAKzB,OAAL,CAAa6B,OAAb,CAAqBJ,MAArB;AACA,UAAMK,WAAW,GAAG,KAAK9B,OAAL,CAAa6B,OAAb,CAAqBJ,MAArB,CAApB;;AACA,UAAIK,WAAW,GAAG,CAAC,CAAnB,EAAsB;AACpB,aAAK9B,OAAL,CAAa+B,MAAb,CAAoBD,WAApB,EAAiC,CAAjC;AACD;AACF;;;iCAEmB;AAClB,UAAMpB,OAAO,GAAG,KAAKT,iBAAL,CAAuBS,OAAvC;AACA,aAAOA,OAAO,GAAG,KAAKN,cAAR,GAAyB,KAAKJ,OAA5C;AACD;;;iCAEmB;AAAA;;AAClB,WAAKgC,UAAL,GAAkBC,OAAlB,CAA0B,UAACR,MAAD,EAAqB;AAC7CA,QAAAA,MAAM,CAACS,KAAP,CAAa,MAAI,CAAC5B,KAAlB;AACD,OAFD;AAGD;;;4BACc;AACb,WAAKN,OAAL,CAAaiC,OAAb,CAAqB,UAACR,MAAD,EAAqB;AACxCA,QAAAA,MAAM,CAACU,MAAP;AACD,OAFD;AAGA,WAAK9B,WAAL,CAAiB+B,GAAjB,CAAqB,MAArB,EAA6B,KAAKd,MAAlC;AACA,WAAKjB,WAAL,CAAiB+B,GAAjB,CAAqB,YAArB,EAAmC,KAAKd,MAAxC;AACA,WAAKtB,OAAL,GAAe,EAAf;AACD;;;8BAEgB;AACf,WAAKqC,KAAL;AACA,WAAKC,kBAAL;AACD;;;6BAEgBb,M,EAAiBc,E,EAAY;AAAA,8BACvBd,MAAM,CAACe,SAAP,EADuB;AAAA,UACpCC,GADoC,qBACpCA,GADoC;AAAA,UAC/BC,GAD+B,qBAC/BA,GAD+B;;AAE5C,UAAMC,OAAsB,GAAG;AAC7BC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,IAAI,EAAE,OADE;AAERC,UAAAA,WAAW,EAAE,CAACL,GAAD,EAAMC,GAAN;AAFL,SADmB;AAK7BK,QAAAA,UAAU,oBACLtB,MAAM,CAACuB,UAAP,EADK;AAERC,UAAAA,SAAS,EAAEV;AAFH;AALmB,OAA/B;AAUA,WAAKpC,MAAL,CAAYyB,IAAZ,CAAiBe,OAAjB;AACD;;;kCAEqB;AACpB,UAAI,CAAC,KAAK1C,iBAAL,CAAuBS,OAA5B,EAAqC;AACnC;AACD;;AAHmB,iBAIqB,KAAKT,iBAAL,CACtCQ,aALiB;AAAA,UAIZE,MAJY,QAIZA,MAJY;AAAA,8BAIJE,OAJI;AAAA,UAIJA,OAJI,6BAIM,CAJN;AAAA,UAISD,OAJT,QAISA,OAJT;AAMpB,WAAKV,YAAL,GAAoB,IAAIgD,qBAAJ,CAAiB;AACnCvC,QAAAA,MAAM,EAANA,MADmC;AAEnCE,QAAAA,OAAO,EAAPA,OAFmC;AAGnCD,QAAAA,OAAO,EAAPA;AAHmC,OAAjB,CAApB;AAMA,WAAKV,YAAL,CAAkBiD,IAAlB,CAAuB,KAAKhD,MAA5B;AACD;;;qCAEwBI,I,EAAc;AAAA;;AACrC,UAAM6C,YAAY,GAAG,KAAKlD,YAAL,CAAkBmD,WAAlB,CACnB,CAAC,CAAC,GAAF,EAAO,CAAC,EAAR,EAAY,GAAZ,EAAiB,EAAjB,CADmB,EAEnB9C,IAFmB,CAArB;AAIA,WAAKH,cAAL,CAAoB6B,OAApB,CAA4B,UAACR,MAAD,EAAqB;AAC/CA,QAAAA,MAAM,CAACU,MAAP;AACD,OAFD;AAGA,WAAK/B,cAAL,GAAsB,EAAtB;AACAgD,MAAAA,YAAY,CAACnB,OAAb,CAAqB,UAACU,OAAD,EAAa;AAAA;;AAAA,oCACN,MAAI,CAAC1C,iBAAL,CAAuBQ,aADjB;AAAA,YACxB6C,KADwB,yBACxBA,KADwB;AAAA,YACjBC,MADiB,yBACjBA,MADiB;;AAGhC,YAAIZ,OAAO,CAACI,UAAR,4BAAsBJ,OAAO,CAACI,UAA9B,wDAAsB,oBAAoBS,UAA1C,CAAJ,EAA0D;AAAA;;AACxD,cAAMC,WAAW,GAAG,MAAI,CAACC,SAAL,yBAAef,OAAO,CAACI,UAAvB,yDAAe,qBAAoBS,UAAnC,CAApB;;AACAb,UAAAA,OAAO,CAACI,UAAR,CAAmBU,WAAnB,GAAiCA,WAAjC;;AACA,cAAIH,KAAK,IAAIC,MAAb,EAAqB;AACnB,gBAAMI,UAAU,GAAGF,WAAH,aAAGA,WAAH,uBAAGA,WAAW,CAAEG,GAAb,CAAiB,UAACC,IAAD,EAAU;AAC5C,kBAAMC,IAAI,qCACPR,KADO,EACCO,IAAI,CAACd,UAAL,CAAgBO,KAAhB,CADD,CAAV;AAGA,qBAAOQ,IAAP;AACD,aALkB,CAAnB;;AAMA,gBAAMC,MAAM,GAAGC,mBAAUC,SAAV,CAAoBN,UAApB,EAAuCL,KAAvC,CAAf;;AACA,gBAAMY,IAAI,GAAGF,mBAAUG,cAAV,CAAyBZ,MAAzB,EAAiCQ,MAAjC,CAAb;;AACA,gBAAMK,SAAS,GAAG,WAAWb,MAA7B;AACAZ,YAAAA,OAAO,CAACI,UAAR,CAAmBqB,SAAnB,IAAgCF,IAAhC;AACD;AACF;;AACD,YAAMzC,MAAM,GACVkB,OAAO,CAACI,UAAR,IAAsBJ,OAAO,CAACI,UAAR,CAAmBsB,cAAnB,CAAkC,aAAlC,CAAtB,GACI,MAAI,CAACC,aAAL,CAAmB3B,OAAnB,CADJ,GAEI,MAAI,CAAC4B,YAAL,CAAkB5B,OAAlB,CAHN;;AAKA,QAAA,MAAI,CAACvC,cAAL,CAAoBwB,IAApB,CAAyBH,MAAzB;;AACAA,QAAAA,MAAM,CAACS,KAAP,CAAa,MAAI,CAAC5B,KAAlB;AACD,OA1BD;AA2BD;;;8BAECkE,S,EAGA;AAAA,UAFAC,KAEA,uEAFgBC,QAEhB;AAAA,UADAC,MACA,uEADiB,CACjB;;AACA,UAAI,CAACH,SAAL,EAAgB;AACd,eAAO,IAAP;AACD;;AACD,aAAO,KAAKtE,YAAL,CAAkBwD,SAAlB,CAA4Bc,SAA5B,EAAuCC,KAAvC,EAA8CE,MAA9C,CAAP;AACD;;;kCACqBhC,O,EAAc;AAClC,UAAMlC,aAAa,GAAG,KAAKR,iBAAL,CAAuBQ,aAA7C;AADkC,kBAGdA,aAHc;AAAA,UAG1BO,OAH0B,SAG1BA,OAH0B;AAIlC,UAAMS,MAAM,GAAG,IAAImD,eAAJ,CAAW;AACxB5D,QAAAA,OAAO,EAAEA,OAAO,CAAC2B,OAAD;AADQ,OAAX,EAEZkC,SAFY,CAEF;AACXpC,QAAAA,GAAG,EAAEE,OAAO,CAACC,QAAR,CAAiBE,WAAjB,CAA6B,CAA7B,CADM;AAEXJ,QAAAA,GAAG,EAAEC,OAAO,CAACC,QAAR,CAAiBE,WAAjB,CAA6B,CAA7B;AAFM,OAFE,CAAf;AAMA,aAAOrB,MAAP;AACD;;;iCACoBkB,O,EAAc;AACjC,UAAMM,SAAS,GAAGN,OAAO,CAACI,UAAR,CAAmBE,SAArC;AACA,aAAOA,SAAS,GACZ,IAAI2B,eAAJ,GAAaC,SAAb,CAAuB;AACrBpC,QAAAA,GAAG,EAAEE,OAAO,CAACC,QAAR,CAAiBE,WAAjB,CAA6B,CAA7B,CADgB;AAErBJ,QAAAA,GAAG,EAAEC,OAAO,CAACC,QAAR,CAAiBE,WAAjB,CAA6B,CAA7B;AAFgB,OAAvB,CADY,GAKZ,KAAK9C,OAAL,CAAaiD,SAAb,CALJ;AAMD;;;6BACgB;AACf,UAAM1C,IAAI,GAAG,KAAKF,WAAL,CAAiByE,OAAjB,EAAb;;AACA,UAAIC,IAAI,CAACC,GAAL,CAASzE,IAAI,GAAG,KAAKA,IAArB,IAA6B,CAAjC,EAAoC;AAClC,aAAK0E,gBAAL,CAAsBF,IAAI,CAACG,KAAL,CAAW3E,IAAX,CAAtB;AACA,aAAKA,IAAL,GAAYwE,IAAI,CAACG,KAAL,CAAW3E,IAAX,CAAZ;AACD;AACF;;;oCACuBoC,O,EAAc;AACpC,UAAMwC,EAAE,GAAGC,aAAIC,MAAJ,CAAW,KAAX,EAAkB,mBAAlB,CAAX;;AACA,UAAMC,KAAK,GAAGF,aAAIC,MAAJ,CAAW,KAAX,EAAkB,EAAlB,EAAsBF,EAAtB,CAAd;;AACA,UAAMI,IAAI,GAAGH,aAAIC,MAAJ,CAAW,MAAX,EAAmB,EAAnB,EAAuBC,KAAvB,CAAb;;AACAC,MAAAA,IAAI,CAACC,WAAL,GAAmB7C,OAAO,CAACI,UAAR,CAAmB0C,WAAtC;AAaA,aAAON,EAAP;AACD;;;EA9MsCO,0B","sourcesContent":["import { IMapService, IMarker, TYPES } from '@antv/l7-core';\nimport { bindAll, DOM, Satistics } from '@antv/l7-utils';\nimport { EventEmitter } from 'eventemitter3';\nimport { Container } from 'inversify';\nimport { merge } from 'lodash';\nimport Supercluster from 'supercluster';\nimport Marker from './marker';\ntype CallBack = (...args: any[]) => any;\ninterface IMarkerStyleOption {\n  element: CallBack;\n  style: { [key: string]: any } | CallBack;\n  className: string;\n  field?: string;\n  method?: 'sum' | 'max' | 'min' | 'mean';\n  radius: number;\n  maxZoom: number;\n  minZoom: number;\n  zoom: number;\n}\n\ninterface IMarkerLayerOption {\n  cluster: boolean;\n  clusterOption: Partial<IMarkerStyleOption>;\n}\n\ninterface IPointFeature {\n  geometry: {\n    type: 'Point';\n    coordinates: [number, number];\n  };\n  properties: any;\n}\nexport default class MarkerLayer extends EventEmitter {\n  private markers: IMarker[] = [];\n  private markerLayerOption: IMarkerLayerOption;\n  private clusterIndex: Supercluster;\n  private points: IPointFeature[] = [];\n  private clusterMarkers: IMarker[] = [];\n  private mapsService: IMapService<unknown>;\n  private scene: Container;\n  private zoom: number;\n\n  constructor(option?: Partial<IMarkerLayerOption>) {\n    super();\n    this.markerLayerOption = merge(this.getDefault(), option);\n    bindAll(['update'], this);\n    this.zoom = this.markerLayerOption.clusterOption?.zoom || -99;\n  }\n  public getDefault() {\n    return {\n      cluster: false,\n      clusterOption: {\n        radius: 80,\n        maxZoom: 20,\n        minZoom: 0,\n        zoom: -99,\n        style: {},\n        className: '',\n        element: this.generateElement,\n      },\n    };\n  }\n  public addTo(scene: Container) {\n    // this.remove();\n    this.scene = scene;\n    this.mapsService = scene.get<IMapService>(TYPES.IMapService);\n    if (this.markerLayerOption.cluster) {\n      this.initCluster();\n      this.update();\n      this.mapsService.on('zoom', this.update);\n      this.mapsService.on('zoomchange', this.update);\n    }\n    this.addMarkers();\n    return this;\n  }\n  public addMarker(marker: IMarker) {\n    const cluster = this.markerLayerOption.cluster;\n    if (cluster) {\n      this.addPoint(marker, this.markers.length);\n    }\n    this.markers.push(marker);\n  }\n\n  public removeMarker(marker: IMarker) {\n    this.markers.indexOf(marker);\n    const markerIndex = this.markers.indexOf(marker);\n    if (markerIndex > -1) {\n      this.markers.splice(markerIndex, 1);\n    }\n  }\n\n  public getMarkers() {\n    const cluster = this.markerLayerOption.cluster;\n    return cluster ? this.clusterMarkers : this.markers;\n  }\n\n  public addMarkers() {\n    this.getMarkers().forEach((marker: IMarker) => {\n      marker.addTo(this.scene);\n    });\n  }\n  public clear() {\n    this.markers.forEach((marker: IMarker) => {\n      marker.remove();\n    });\n    this.mapsService.off('zoom', this.update);\n    this.mapsService.off('zoomchange', this.update);\n    this.markers = [];\n  }\n\n  public destroy() {\n    this.clear();\n    this.removeAllListeners();\n  }\n\n  private addPoint(marker: IMarker, id: number) {\n    const { lng, lat } = marker.getLnglat();\n    const feature: IPointFeature = {\n      geometry: {\n        type: 'Point',\n        coordinates: [lng, lat],\n      },\n      properties: {\n        ...marker.getExtData(),\n        marker_id: id,\n      },\n    };\n    this.points.push(feature);\n  }\n\n  private initCluster() {\n    if (!this.markerLayerOption.cluster) {\n      return;\n    }\n    const { radius, minZoom = 0, maxZoom } = this.markerLayerOption\n      .clusterOption as IMarkerStyleOption;\n    this.clusterIndex = new Supercluster({\n      radius,\n      minZoom,\n      maxZoom,\n    });\n    // @ts-ignore\n    this.clusterIndex.load(this.points);\n  }\n\n  private getClusterMarker(zoom: number) {\n    const clusterPoint = this.clusterIndex.getClusters(\n      [-180, -85, 180, 85],\n      zoom,\n    );\n    this.clusterMarkers.forEach((marker: IMarker) => {\n      marker.remove();\n    });\n    this.clusterMarkers = [];\n    clusterPoint.forEach((feature) => {\n      const { field, method } = this.markerLayerOption.clusterOption;\n      // 处理聚合数据\n      if (feature.properties && feature.properties?.cluster_id) {\n        const clusterData = this.getLeaves(feature.properties?.cluster_id);\n        feature.properties.clusterData = clusterData;\n        if (field && method) {\n          const columnData = clusterData?.map((item) => {\n            const data = {\n              [field]: item.properties[field],\n            };\n            return data;\n          });\n          const column = Satistics.getColumn(columnData as any, field);\n          const stat = Satistics.getSatByColumn(method, column);\n          const fieldName = 'point_' + method;\n          feature.properties[fieldName] = stat;\n        }\n      }\n      const marker =\n        feature.properties && feature.properties.hasOwnProperty('point_count')\n          ? this.clusterMarker(feature)\n          : this.normalMarker(feature);\n\n      this.clusterMarkers.push(marker);\n      marker.addTo(this.scene);\n    });\n  }\n  private getLeaves(\n    clusterId: number,\n    limit: number = Infinity,\n    offset: number = 0,\n  ) {\n    if (!clusterId) {\n      return null;\n    }\n    return this.clusterIndex.getLeaves(clusterId, limit, offset);\n  }\n  private clusterMarker(feature: any) {\n    const clusterOption = this.markerLayerOption.clusterOption;\n\n    const { element } = clusterOption as IMarkerStyleOption;\n    const marker = new Marker({\n      element: element(feature),\n    }).setLnglat({\n      lng: feature.geometry.coordinates[0],\n      lat: feature.geometry.coordinates[1],\n    });\n    return marker;\n  }\n  private normalMarker(feature: any) {\n    const marker_id = feature.properties.marker_id;\n    return marker_id\n      ? new Marker().setLnglat({\n          lng: feature.geometry.coordinates[0],\n          lat: feature.geometry.coordinates[1],\n        })\n      : this.markers[marker_id];\n  }\n  private update() {\n    const zoom = this.mapsService.getZoom();\n    if (Math.abs(zoom - this.zoom) > 1) {\n      this.getClusterMarker(Math.floor(zoom));\n      this.zoom = Math.floor(zoom);\n    }\n  }\n  private generateElement(feature: any) {\n    const el = DOM.create('div', 'l7-marker-cluster');\n    const label = DOM.create('div', '', el);\n    const span = DOM.create('span', '', label);\n    span.textContent = feature.properties.point_count;\n    // if (className !== '') {\n    //   DOM.addClass(el, className);\n    // }\n    // span.textContent = feature.properties.point_count;\n    // const elStyle = isFunction(style)\n    //   ? style(feature.properties.point_count)\n    //   : style;\n\n    // Object.keys(elStyle).forEach((key: string) => {\n    //   // @ts-ignore\n    //   el.style[key] = elStyle[key];\n    // });\n    return el;\n  }\n}\n"],"file":"markerlayer.js"}