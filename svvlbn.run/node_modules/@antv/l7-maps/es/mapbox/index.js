import _regeneratorRuntime from "@babel/runtime/regenerator";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";

var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { CoordinateSystem, MapServiceEvent, TYPES } from '@antv/l7-core';
import { DOM } from '@antv/l7-utils';
import { inject, injectable } from 'inversify';
import mapboxgl from 'mapbox-gl';
import Viewport from './Viewport';
var EventMap = {
  mapmove: 'move',
  camerachange: 'move'
};
import { MapTheme } from './theme';
var LNGLAT_OFFSET_ZOOM_THRESHOLD = 12;
var MAPBOX_API_KEY = 'pk.eyJ1IjoibHp4dWUiLCJhIjoiYnhfTURyRSJ9.Ugm314vAKPHBzcPmY1p4KQ';
var MapboxService = (_dec = injectable(), _dec2 = inject(TYPES.MapConfig), _dec3 = inject(TYPES.IGlobalConfigService), _dec4 = inject(TYPES.ILogService), _dec5 = inject(TYPES.ICoordinateSystemService), _dec6 = inject(TYPES.IEventEmitter), _dec(_class = (_class2 = (_temp = function () {
  function MapboxService() {
    var _this = this;

    _classCallCheck(this, MapboxService);

    this.map = void 0;

    _initializerDefineProperty(this, "config", _descriptor, this);

    _initializerDefineProperty(this, "configService", _descriptor2, this);

    _initializerDefineProperty(this, "logger", _descriptor3, this);

    _initializerDefineProperty(this, "coordinateSystemService", _descriptor4, this);

    _initializerDefineProperty(this, "eventEmitter", _descriptor5, this);

    this.viewport = void 0;
    this.markerContainer = void 0;
    this.cameraChangedCallback = void 0;
    this.$mapContainer = void 0;

    this.handleCameraChanged = function () {
      var _this$map$getCenter$w = _this.map.getCenter().wrap(),
          lat = _this$map$getCenter$w.lat,
          lng = _this$map$getCenter$w.lng;

      _this.viewport.syncWithMapCamera({
        bearing: _this.map.getBearing(),
        center: [lng, lat],
        viewportHeight: _this.map.transform.height,
        pitch: _this.map.getPitch(),
        viewportWidth: _this.map.transform.width,
        zoom: _this.map.getZoom(),
        cameraHeight: 0
      });

      if (_this.viewport.getZoom() > LNGLAT_OFFSET_ZOOM_THRESHOLD) {
        _this.coordinateSystemService.setCoordinateSystem(CoordinateSystem.LNGLAT_OFFSET);
      } else {
        _this.coordinateSystemService.setCoordinateSystem(CoordinateSystem.LNGLAT);
      }

      _this.cameraChangedCallback(_this.viewport);
    };
  }

  _createClass(MapboxService, [{
    key: "addMarkerContainer",
    value: function addMarkerContainer() {
      var container = this.map.getCanvasContainer();
      this.markerContainer = DOM.create('div', 'l7-marker-container', container);
    }
  }, {
    key: "getMarkerContainer",
    value: function getMarkerContainer() {
      return this.markerContainer;
    }
  }, {
    key: "on",
    value: function on(type, handle) {
      if (MapServiceEvent.indexOf(type) !== -1) {
        this.eventEmitter.on(type, handle);
      } else {
        this.map.on(EventMap[type] || type, handle);
      }
    }
  }, {
    key: "off",
    value: function off(type, handle) {
      this.map.off(EventMap[type] || type, handle);
    }
  }, {
    key: "getContainer",
    value: function getContainer() {
      return this.map.getContainer();
    }
  }, {
    key: "getSize",
    value: function getSize() {
      var size = this.map.transform;
      return [size.width, size.height];
    }
  }, {
    key: "getType",
    value: function getType() {
      return 'mapbox';
    }
  }, {
    key: "getZoom",
    value: function getZoom() {
      return this.map.getZoom();
    }
  }, {
    key: "setZoom",
    value: function setZoom(zoom) {
      return this.map.setZoom(zoom);
    }
  }, {
    key: "getCenter",
    value: function getCenter() {
      return this.map.getCenter();
    }
  }, {
    key: "getPitch",
    value: function getPitch() {
      return this.map.getPitch();
    }
  }, {
    key: "getRotation",
    value: function getRotation() {
      return this.map.getBearing();
    }
  }, {
    key: "getBounds",
    value: function getBounds() {
      return this.map.getBounds().toArray();
    }
  }, {
    key: "getMinZoom",
    value: function getMinZoom() {
      return this.map.getMinZoom();
    }
  }, {
    key: "getMaxZoom",
    value: function getMaxZoom() {
      return this.map.getMaxZoom();
    }
  }, {
    key: "setRotation",
    value: function setRotation(rotation) {
      this.map.setBearing(rotation);
    }
  }, {
    key: "zoomIn",
    value: function zoomIn() {
      this.map.zoomIn();
    }
  }, {
    key: "zoomOut",
    value: function zoomOut() {
      this.map.zoomOut();
    }
  }, {
    key: "panTo",
    value: function panTo(p) {
      this.map.panTo(p);
    }
  }, {
    key: "panBy",
    value: function panBy(pixel) {
      this.panTo(pixel);
    }
  }, {
    key: "fitBounds",
    value: function fitBounds(bound) {
      this.map.fitBounds(bound);
    }
  }, {
    key: "setMaxZoom",
    value: function setMaxZoom(max) {
      this.map.setMaxZoom(max);
    }
  }, {
    key: "setMinZoom",
    value: function setMinZoom(min) {
      this.map.setMinZoom(min);
    }
  }, {
    key: "setZoomAndCenter",
    value: function setZoomAndCenter(zoom, center) {
      this.map.flyTo({
        zoom: zoom,
        center: center
      });
    }
  }, {
    key: "setMapStyle",
    value: function setMapStyle(style) {
      this.map.setStyle(this.getMapStyle(style));
    }
  }, {
    key: "pixelToLngLat",
    value: function pixelToLngLat(pixel) {
      return this.map.unproject(pixel);
    }
  }, {
    key: "lngLatToPixel",
    value: function lngLatToPixel(lnglat) {
      return this.map.project(lnglat);
    }
  }, {
    key: "containerToLngLat",
    value: function containerToLngLat(pixel) {
      return this.map.unproject(pixel);
    }
  }, {
    key: "lngLatToContainer",
    value: function lngLatToContainer(lnglat) {
      return this.map.project(lnglat);
    }
  }, {
    key: "init",
    value: function () {
      var _init = _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {
        var _this$config, _this$config$id, id, _this$config$attribut, attributionControl, _this$config$style, style, _this$config$token, token, _this$config$rotation, rotation, mapInstance, rest;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this$config = this.config, _this$config$id = _this$config.id, id = _this$config$id === void 0 ? 'map' : _this$config$id, _this$config$attribut = _this$config.attributionControl, attributionControl = _this$config$attribut === void 0 ? false : _this$config$attribut, _this$config$style = _this$config.style, style = _this$config$style === void 0 ? 'light' : _this$config$style, _this$config$token = _this$config.token, token = _this$config$token === void 0 ? MAPBOX_API_KEY : _this$config$token, _this$config$rotation = _this$config.rotation, rotation = _this$config$rotation === void 0 ? 0 : _this$config$rotation, mapInstance = _this$config.mapInstance, rest = _objectWithoutProperties(_this$config, ["id", "attributionControl", "style", "token", "rotation", "mapInstance"]);
                this.viewport = new Viewport();

                if (!mapInstance && !mapboxgl) {
                  this.logger.error(this.configService.getSceneWarninfo('SDK'));
                }

                if (token === MAPBOX_API_KEY && style !== 'blank' && !mapboxgl.accessToken && !mapInstance) {
                    this.logger.warn(this.configService.getSceneWarninfo('MapToken'));
                  }

                if (!mapInstance && !mapboxgl.accessToken) {
                  mapboxgl.accessToken = token;
                }

                if (mapInstance) {
                  this.map = mapInstance;
                  this.$mapContainer = this.map.getContainer();
                } else {
                  this.$mapContainer = this.creatAmapContainer(id);
                  this.map = new mapboxgl.Map(_objectSpread({
                    container: id,
                    style: this.getMapStyle(style),
                    attributionControl: attributionControl,
                    bearing: rotation
                  }, rest));
                }

                this.map.on('load', this.handleCameraChanged);
                this.map.on('move', this.handleCameraChanged);
                this.handleCameraChanged();

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function init() {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: "destroy",
    value: function destroy() {
      this.eventEmitter.removeAllListeners();

      if (this.map) {
        this.map.remove();
        this.$mapContainer = null;
        this.removeLogoControl();
      }
    }
  }, {
    key: "emit",
    value: function emit(name) {
      var _this$eventEmitter;

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      (_this$eventEmitter = this.eventEmitter).emit.apply(_this$eventEmitter, [name].concat(args));
    }
  }, {
    key: "once",
    value: function once(name) {
      var _this$eventEmitter2;

      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      (_this$eventEmitter2 = this.eventEmitter).once.apply(_this$eventEmitter2, [name].concat(args));
    }
  }, {
    key: "getMapContainer",
    value: function getMapContainer() {
      return this.$mapContainer;
    }
  }, {
    key: "onCameraChanged",
    value: function onCameraChanged(callback) {
      this.cameraChangedCallback = callback;
    }
  }, {
    key: "creatAmapContainer",
    value: function creatAmapContainer(id) {
      var $wrapper = id;

      if (typeof id === 'string') {
        $wrapper = document.getElementById(id);
      }

      return $wrapper;
    }
  }, {
    key: "removeLogoControl",
    value: function removeLogoControl() {
      var controls = this.map._controls;
      var logoCtr = controls.find(function (ctr) {
        if (ctr.hasOwnProperty('_updateLogo')) {
          return true;
        }
      });

      if (logoCtr) {
        this.map.removeControl(logoCtr);
      }
    }
  }, {
    key: "getMapStyle",
    value: function getMapStyle(name) {
      if (typeof name !== 'string') {
        return name;
      }

      return MapTheme[name] ? MapTheme[name] : name;
    }
  }]);

  return MapboxService;
}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "config", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "configService", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "logger", [_dec4], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "coordinateSystemService", [_dec5], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "eventEmitter", [_dec6], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class2)) || _class);
export { MapboxService as default };
//# sourceMappingURL=index.js.map