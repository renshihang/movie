{"version":3,"sources":["../src/BaseMapWrapper.ts"],"names":["lazyInject","TYPES","BaseMapWrapper","ILogService","IGlobalConfigService","config","sceneContainer","id","configService","validateMapConfig","valid","errorText","logger","error","bind","MapConfig","toConstantValue","IMapService","to","getServiceConstructor","inSingletonScope","Error"],"mappings":";;;;;;;;;;;;;AAAA,SAMEA,UANF,EAOEC,KAPF,QAQO,eARP;IAUqBC,c,WAClBF,UAAU,CAACC,KAAK,CAACE,WAAP,C,UAGVH,UAAU,CAACC,KAAK,CAACG,oBAAP,C;AAKX,0BAAYC,MAAZ,EAAyC;AAAA;;AAAA;;AAAA;;AAAA,SAF/BA,MAE+B;AACvC,SAAKA,MAAL,GAAcA,MAAd;AACD;;;;iCAEmBC,c,EAA2BC,E,EAAY;AAAA,kCAE5B,KAAKC,aAAL,CAAmBC,iBAAnB,CAC3B,KAAKJ,MADsB,CAF4B;AAAA,UAEjDK,KAFiD,yBAEjDA,KAFiD;AAAA,UAE1CC,SAF0C,yBAE1CA,SAF0C;;AAMzD,UAAI,CAACD,KAAL,EAAY;AACV,aAAKE,MAAL,CAAYC,KAAZ,CAAkBF,SAAS,IAAI,EAA/B;AACA;AACD;;AAEDL,MAAAA,cAAc,CAACQ,IAAf,CAAyCb,KAAK,CAACc,SAA/C,EAA0DC,eAA1D,mBACK,KAAKX,MADV;AAEEE,QAAAA,EAAE,EAAFA;AAFF;AAIAD,MAAAA,cAAc,CACXQ,IADH,CAC6Bb,KAAK,CAACgB,WADnC,EAEGC,EAFH,CAEM,KAAKC,qBAAL,EAFN,EAGGC,gBAHH;AAID;;;4CAIC;AACA,YAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACD;;;;;;;;;;;;;;;SAtCkBnB,c","sourcesContent":["import {\n  IGlobalConfigService,\n  ILogService,\n  IMapConfig,\n  IMapService,\n  IMapWrapper,\n  lazyInject,\n  TYPES,\n} from '@antv/l7-core';\nimport { Container } from 'inversify';\nexport default class BaseMapWrapper<RawMap> implements IMapWrapper {\n  @lazyInject(TYPES.ILogService)\n  protected readonly logger: ILogService;\n\n  @lazyInject(TYPES.IGlobalConfigService)\n  protected readonly configService: IGlobalConfigService;\n\n  protected config: Partial<IMapConfig>;\n\n  constructor(config: Partial<IMapConfig>) {\n    this.config = config;\n  }\n\n  public setContainer(sceneContainer: Container, id: string) {\n    // // 首先使用全局配置服务校验地图参数\n    const { valid, errorText } = this.configService.validateMapConfig(\n      this.config,\n    );\n\n    if (!valid) {\n      this.logger.error(errorText || '');\n      return;\n    }\n    // 绑定用户传入的原始地图参数\n    sceneContainer.bind<Partial<IMapConfig>>(TYPES.MapConfig).toConstantValue({\n      ...this.config,\n      id,\n    });\n    sceneContainer\n      .bind<IMapService<RawMap>>(TYPES.IMapService)\n      .to(this.getServiceConstructor())\n      .inSingletonScope();\n  }\n\n  protected getServiceConstructor(): new (...args: any[]) => IMapService<\n    RawMap\n  > {\n    throw new Error('Method not implemented.');\n  }\n}\n"],"file":"BaseMapWrapper.js"}