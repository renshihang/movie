{"version":3,"sources":["../../src/parser/json.ts"],"names":["json","data","cfg","x","y","x1","y1","coordinates","resultData","forEach","col","featureIndex","coords","parseFloat","type","Array","isArray","geometry","dataItem","_id","push","dataArray"],"mappings":";;;;;;;;;;;;;AASA;;;;;;AACe,SAASA,IAAT,CAAcC,IAAd,EAA+BC,GAA/B,EAA6D;AAAA,MAClEC,CADkE,GACpCD,GADoC,CAClEC,CADkE;AAAA,MAC/DC,CAD+D,GACpCF,GADoC,CAC/DE,CAD+D;AAAA,MAC5DC,EAD4D,GACpCH,GADoC,CAC5DG,EAD4D;AAAA,MACxDC,EADwD,GACpCJ,GADoC,CACxDI,EADwD;AAAA,MACpDC,WADoD,GACpCL,GADoC,CACpDK,WADoD;AAE1E,MAAMC,UAA4B,GAAG,EAArC;AACAP,EAAAA,IAAI,CAACQ,OAAL,CAAa,UAACC,GAAD,EAAiBC,YAAjB,EAA0C;AACrD,QAAIC,MAAM,GAAG,EAAb;;AACA,QAAIT,CAAC,IAAIC,CAAT,EAAY;AACVQ,MAAAA,MAAM,GAAG,CAACC,UAAU,CAACH,GAAG,CAACP,CAAD,CAAJ,CAAX,EAAqBU,UAAU,CAACH,GAAG,CAACN,CAAD,CAAJ,CAA/B,CAAT;AACD;;AACD,QAAID,CAAC,IAAIC,CAAL,IAAUC,EAAV,IAAgBC,EAApB,EAAwB;AAEtBM,MAAAA,MAAM,GAAG,CACP,CAACC,UAAU,CAACH,GAAG,CAACP,CAAD,CAAJ,CAAX,EAAqBU,UAAU,CAACH,GAAG,CAACN,CAAD,CAAJ,CAA/B,CADO,EAEP,CAACS,UAAU,CAACH,GAAG,CAACL,EAAD,CAAJ,CAAX,EAAsBQ,UAAU,CAACH,GAAG,CAACJ,EAAD,CAAJ,CAAhC,CAFO,CAAT;AAID;;AACD,QAAIC,WAAJ,EAAiB;AACf,UAAIO,IAAI,GAAG,SAAX;;AACA,UAAI,CAACC,KAAK,CAACC,OAAN,CAAcT,WAAW,CAAC,CAAD,CAAzB,CAAL,EAAoC;AAClCO,QAAAA,IAAI,GAAG,OAAP;AACD;;AACD,UAAIC,KAAK,CAACC,OAAN,CAAcT,WAAW,CAAC,CAAD,CAAzB,KAAiC,CAACQ,KAAK,CAACC,OAAN,CAAcT,WAAW,CAAC,CAAD,CAAX,CAAe,CAAf,CAAd,CAAtC,EAAwE;AACtEO,QAAAA,IAAI,GAAG,YAAP;AACD;;AACD,UAAMG,QAAQ,GAAG;AACfH,QAAAA,IAAI,EAAJA,IADe;AAEfP,QAAAA,WAAW,mCAAMG,GAAG,CAACH,WAAD,CAAT;AAFI,OAAjB;AAIA,kCAAOU,QAAP,EAAiB,IAAjB;AACAL,MAAAA,MAAM,GAAGK,QAAQ,CAACV,WAAlB;AACD;;AACD,QAAMW,QAAQ,qBACTR,GADS;AAEZS,MAAAA,GAAG,EAAER,YAFO;AAGZJ,MAAAA,WAAW,EAAEK;AAHD,MAAd;;AAKAJ,IAAAA,UAAU,CAACY,IAAX,CAAgBF,QAAhB;AACD,GAjCD;AAkCA,SAAO;AACLG,IAAAA,SAAS,EAAEb;AADN,GAAP;AAGD","sourcesContent":["// @ts-ignore\nimport {\n  IJsonData,\n  IJsonItem,\n  IParseDataItem,\n  IParserCfg,\n  IParserData,\n} from '@antv/l7-core';\n// @ts-ignore\nimport rewind from '@mapbox/geojson-rewind';\nexport default function json(data: IJsonData, cfg: IParserCfg): IParserData {\n  const { x, y, x1, y1, coordinates } = cfg;\n  const resultData: IParseDataItem[] = [];\n  data.forEach((col: IJsonItem, featureIndex: number) => {\n    let coords = [];\n    if (x && y) {\n      coords = [parseFloat(col[x]), parseFloat(col[y])];\n    } // 点数据\n    if (x && y && x1 && y1) {\n      // 弧线 或者线段\n      coords = [\n        [parseFloat(col[x]), parseFloat(col[y])],\n        [parseFloat(col[x1]), parseFloat(col[y1])],\n      ];\n    }\n    if (coordinates) {\n      let type = 'Polygon';\n      if (!Array.isArray(coordinates[0])) {\n        type = 'Point';\n      }\n      if (Array.isArray(coordinates[0]) && !Array.isArray(coordinates[0][0])) {\n        type = 'LineString';\n      }\n      const geometry = {\n        type,\n        coordinates: [...col[coordinates]],\n      };\n      rewind(geometry, true);\n      coords = geometry.coordinates;\n    }\n    const dataItem = {\n      ...col,\n      _id: featureIndex,\n      coordinates: coords,\n    };\n    resultData.push(dataItem);\n  });\n  return {\n    dataArray: resultData,\n  };\n}\n"],"file":"json.js"}