{"version":3,"sources":["../../src/transform/join.ts"],"names":["join","geoData","options","field","data","dataObj","forEach","element","dataArray","map","item","joinName"],"mappings":";;;;;;;;;;;;;;;AAYO,SAASA,IAAT,CAAcC,OAAd,EAAoCC,OAApC,EAAqE;AAAA,MAClEC,KADkE,GAClDD,OADkD,CAClEC,KADkE;AAAA,MAC3DC,IAD2D,GAClDF,OADkD,CAC3DE,IAD2D;AAE1E,MAAMC,OAA+B,GAAG,EAAxC;AACAD,EAAAA,IAAI,CAACE,OAAL,CAAa,UAACC,OAAD,EAAqC;AAChDF,IAAAA,OAAO,CAACE,OAAO,CAACJ,KAAD,CAAR,CAAP,GAA0BI,OAA1B;AACD,GAFD;AAGAN,EAAAA,OAAO,CAACO,SAAR,GAAoBJ,IAAI,CAACI,SAAL,CAAeC,GAAf,CAAmB,UAACC,IAAD,EAA0B;AAC/D,QAAMC,QAAQ,GAAGD,IAAI,CAACP,KAAD,CAArB;AACA,6BACKE,OAAO,CAACM,QAAD,CADZ,MAEKD,IAFL;AAID,GANmB,CAApB;AAQA,SAAON,IAAP;AACD","sourcesContent":["import { IParseDataItem, IParserData } from '@antv/l7-core';\n\ninterface IJoinOption {\n  field: 'string';\n  data: any[];\n}\n\n/**\n *\n * @param data\n * @param options\n */\nexport function join(geoData: IParserData, options: { [key: string]: any }) {\n  const { field, data } = options;\n  const dataObj: { [key: string]: any } = {};\n  data.forEach((element: { [key: string]: any }) => {\n    dataObj[element[field]] = element;\n  });\n  geoData.dataArray = data.dataArray.map((item: IParseDataItem) => {\n    const joinName = item[field];\n    return {\n      ...dataObj[joinName],\n      ...item,\n    };\n  });\n\n  return data;\n}\n"],"file":"join.js"}