{"version":3,"sources":["../src/source.ts"],"names":["extent","EventEmitter","Supercluster","SyncHook","getParser","getTransform","statMap","getColumn","Source","data","cfg","hooks","init","layout","update","parser","type","transforms","cluster","clusterOptions","enable","radius","maxZoom","zoom","method","originData","rawData","clusterIndex","tap","excuteParser","initCluster","executeTrans","emit","getClusters","id","getLeaves","Infinity","field","forEach","p","properties","point_count","map","item","points","d","statNum","column","stat","features","length","dataArray","value","feature","find","dataItem","name","_id","sourceParser","trans","tran","Object","assign","minZoom","load","call"],"mappings":"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","sourcesContent":["import {\n  IClusterOptions,\n  IMapService,\n  IParseDataItem,\n  IParserCfg,\n  IParserData,\n  ISourceCFG,\n  ITransform,\n  lazyInject,\n  TYPES,\n} from '@antv/l7-core';\nimport { extent } from '@antv/l7-utils';\nimport {\n  BBox,\n  Feature,\n  FeatureCollection,\n  Geometries,\n  Properties,\n} from '@turf/helpers';\nimport { EventEmitter } from 'eventemitter3';\nimport { Container } from 'inversify';\nimport { cloneDeep, isFunction, isString } from 'lodash';\nimport Supercluster from 'supercluster';\nimport { SyncHook } from 'tapable';\nimport { getParser, getTransform } from './';\nimport { statMap } from './utils/statistics';\nimport { getColumn } from './utils/util';\nexport default class Source extends EventEmitter {\n  public data: IParserData;\n\n  // 数据范围\n  public extent: BBox;\n  // 生命周期钩子\n  public hooks = {\n    init: new SyncHook(['source']),\n    layout: new SyncHook(['source']),\n    update: new SyncHook(['source']),\n  };\n  public parser: IParserCfg = { type: 'geojson' };\n  public transforms: ITransform[] = [];\n  public cluster: boolean = false;\n  public clusterOptions: Partial<IClusterOptions> = {\n    enable: false,\n    radius: 40,\n    maxZoom: 20,\n    zoom: -99,\n    method: 'count',\n  };\n\n  // 原始数据\n  private originData: any;\n  private rawData: any;\n\n  private clusterIndex: Supercluster;\n\n  constructor(data: any, cfg?: ISourceCFG) {\n    super();\n    this.rawData = cloneDeep(data);\n    this.originData = data;\n    if (cfg) {\n      if (cfg.parser) {\n        this.parser = cfg.parser;\n      }\n      if (cfg.transforms) {\n        this.transforms = cfg.transforms;\n      }\n      this.cluster = cfg.cluster || false;\n      if (cfg.clusterOptions) {\n        this.cluster = true;\n        this.clusterOptions = {\n          ...this.clusterOptions,\n          ...cfg.clusterOptions,\n        };\n      }\n    }\n\n    this.hooks.init.tap('parser', () => {\n      this.excuteParser();\n    });\n    this.hooks.init.tap('cluster', () => {\n      this.initCluster();\n    });\n    this.hooks.init.tap('transform', () => {\n      this.executeTrans();\n    });\n    this.init();\n  }\n\n  public setData(data: any) {\n    this.rawData = data;\n    this.originData = cloneDeep(data);\n    this.init();\n    this.emit('update');\n  }\n  public getClusters(zoom: number): any {\n    return this.clusterIndex.getClusters(this.extent, zoom);\n  }\n  public getClustersLeaves(id: number): any {\n    return this.clusterIndex.getLeaves(id, Infinity);\n  }\n  public updateClusterData(zoom: number): void {\n    const { method = 'sum', field } = this.clusterOptions;\n    let data = this.clusterIndex.getClusters(this.extent, zoom);\n    this.clusterOptions.zoom = zoom;\n    data.forEach((p) => {\n      if (!p.id) {\n        p.properties.point_count = 1;\n      }\n    });\n    if (field || isFunction(method)) {\n      data = data.map((item) => {\n        const id = item.id as number;\n        if (id) {\n          const points = this.clusterIndex.getLeaves(id, Infinity);\n          const properties = points.map((d) => d.properties);\n          let statNum;\n          if (isString(method) && field) {\n            const column = getColumn(properties, field);\n            statNum = statMap[method](column);\n          }\n          if (isFunction(method)) {\n            statNum = method(properties);\n          }\n          item.properties.stat = statNum;\n        } else {\n          item.properties.point_count = 1;\n        }\n        return item;\n      });\n    }\n    this.data = getParser('geojson')({\n      type: 'FeatureCollection',\n      features: data,\n    });\n    this.executeTrans();\n  }\n  public getFeatureById(id: number): unknown {\n    const { type = 'geojson' } = this.parser;\n    if (type === 'geojson' && !this.cluster) {\n      //  TODO： 聚合图层返回聚合和后的数据\n      return id < this.rawData.features.length\n        ? this.rawData.features[id]\n        : 'null';\n    } else {\n      return id < this.data.dataArray.length ? this.data.dataArray[id] : 'null';\n    }\n  }\n\n  public getFeatureId(field: string, value: any): number | undefined {\n    const feature = this.data.dataArray.find((dataItem: IParseDataItem) => {\n      return dataItem[field] === name;\n    });\n    return feature?._id;\n  }\n\n  private excuteParser(): void {\n    const parser = this.parser;\n    const type: string = parser.type || 'geojson';\n    const sourceParser = getParser(type);\n    this.data = sourceParser(this.originData, parser);\n    // 计算范围\n    this.extent = extent(this.data.dataArray);\n  }\n  /**\n   * 数据统计\n   */\n  private executeTrans() {\n    const trans = this.transforms;\n    trans.forEach((tran: ITransform) => {\n      const { type } = tran;\n      const data = getTransform(type)(this.data, tran);\n      Object.assign(this.data, data);\n    });\n  }\n\n  private initCluster() {\n    if (!this.cluster) {\n      return;\n    }\n    const { radius, minZoom = 0, maxZoom } = this.clusterOptions;\n    this.clusterIndex = new Supercluster({\n      radius,\n      minZoom,\n      maxZoom,\n    });\n    this.clusterIndex.load(this.rawData.features);\n  }\n\n  private init() {\n    this.hooks.init.call(this);\n  }\n}\n"],"file":"source.js"}