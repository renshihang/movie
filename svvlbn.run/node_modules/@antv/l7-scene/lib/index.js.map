{"version":3,"sources":["../src/index.ts"],"names":["Scene","config","sceneService","mapService","controlService","layerService","iconService","markerService","popupService","container","id","map","sceneContainer","setContainer","bind","TYPES","IRendererService","to","ReglRendererService","inSingletonScope","get","ISceneService","IMapService","IIconService","IControlService","ILayerService","IMarkerService","IPopupService","initComponent","init","addControl","Logo","ExportMap2Png","layer","layerContainer","addLayer","getLayers","getLayer","remove","removeAllLayers","render","img","addImage","hasImage","removeImage","ctr","removeControl","marker","addMarker","addMarkerLayer","removeMarkerLayer","removeAllMarkers","popup","addPopup","type","handle","SceneEventList","indexOf","on","off","getZoom","getCenter","getPitch","getRotation","getBounds","rotation","setRotation","zoomIn","zoomOut","p","panTo","pixel","zoom","setZoom","bound","fitBounds","center","setZoomAndCenter","style","setMapStyle","pixelToLngLat","lnglat","lngLatToPixel","containerToLngLat","lngLatToContainer","destroy","constructor","name","IPostProcessingPass","whenTargetNamed","DOM","getContainer"],"mappings":"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","sourcesContent":["import { Logo } from '@antv/l7-component';\nimport {\n  Bounds,\n  createLayerContainer,\n  createSceneContainer,\n  IControl,\n  IControlService,\n  IIconService,\n  IImage,\n  ILayer,\n  ILayerService,\n  ILngLat,\n  IMapService,\n  IMarker,\n  IMarkerLayer,\n  IMarkerService,\n  IPoint,\n  IPopup,\n  IPopupService,\n  IPostProcessingPass,\n  IRendererService,\n  ISceneConfig,\n  ISceneService,\n  Point,\n  SceneEventList,\n  TYPES,\n} from '@antv/l7-core';\nimport { ReglRendererService } from '@antv/l7-renderer';\nimport { DOM } from '@antv/l7-utils';\nimport { Container } from 'inversify';\nimport ILayerManager from './ILayerManager';\nimport IMapController from './IMapController';\nimport IPostProcessingPassPluggable from './IPostProcessingPassPluggable';\n\n/**\n * 暴露 Scene API\n *\n * @example\n * import { Scene } from 'l7/scene';\n * import { PointLayer } from 'l7/layers';\n *\n * const scene = new Scene();\n * const pointLayer = new PointLayer();\n * scene.addLayer(pointLayer);\n *\n */\nclass Scene\n  implements IPostProcessingPassPluggable, IMapController, ILayerManager {\n  private sceneService: ISceneService;\n  private mapService: IMapService<unknown>;\n  private controlService: IControlService;\n  private layerService: ILayerService;\n  private iconService: IIconService;\n  private markerService: IMarkerService;\n  private popupService: IPopupService;\n\n  private container: Container;\n\n  public constructor(config: ISceneConfig) {\n    const { id, map } = config;\n\n    // 创建场景容器\n    const sceneContainer = createSceneContainer();\n    this.container = sceneContainer;\n    // 绑定地图服务\n    map.setContainer(sceneContainer, id);\n\n    // 绑定渲染引擎服务\n    sceneContainer\n      .bind<IRendererService>(TYPES.IRendererService)\n      .to(ReglRendererService)\n      .inSingletonScope();\n\n    // 依赖注入\n    this.sceneService = sceneContainer.get<ISceneService>(TYPES.ISceneService);\n    this.mapService = sceneContainer.get<IMapService<unknown>>(\n      TYPES.IMapService,\n    );\n    this.iconService = sceneContainer.get<IIconService>(TYPES.IIconService);\n    this.controlService = sceneContainer.get<IControlService>(\n      TYPES.IControlService,\n    );\n    this.layerService = sceneContainer.get<ILayerService>(TYPES.ILayerService);\n\n    this.markerService = sceneContainer.get<IMarkerService>(\n      TYPES.IMarkerService,\n    );\n\n    this.popupService = sceneContainer.get<IPopupService>(TYPES.IPopupService);\n\n    this.initComponent(id);\n\n    // 初始化 scene\n    this.sceneService.init(config);\n    // TODO: 初始化组件\n    this.addControl(new Logo());\n  }\n\n  public getMapService(): IMapService<unknown> {\n    return this.mapService;\n  }\n  public ExportMap2Png(): string {\n    return this.sceneService.ExportMap2Png();\n  }\n\n  public get map() {\n    return this.mapService.map;\n  }\n\n  // layer 管理\n  public addLayer(layer: ILayer): void {\n    // 为当前图层创建一个容器\n    // TODO: 初始化的时候设置 容器\n    const layerContainer = createLayerContainer(this.container);\n    layer.setContainer(layerContainer);\n    this.sceneService.addLayer(layer);\n  }\n\n  public getLayers(): ILayer[] {\n    return this.layerService.getLayers();\n  }\n\n  public getLayer(id: string): ILayer | undefined {\n    return this.layerService.getLayer(id);\n  }\n\n  public removeLayer(layer: ILayer): void {\n    this.layerService.remove(layer);\n  }\n\n  public removeAllLayer(): void {\n    this.layerService.removeAllLayers();\n  }\n\n  public render(): void {\n    this.sceneService.render();\n  }\n\n  // asset method\n  public addImage(id: string, img: IImage) {\n    this.iconService.addImage(id, img);\n  }\n\n  public hasImage(id: string) {\n    this.iconService.hasImage(id);\n  }\n\n  public removeImage(id: string) {\n    this.iconService.removeImage(id);\n  }\n\n  // map control method\n  public addControl(ctr: IControl) {\n    this.controlService.addControl(ctr, this.container);\n  }\n\n  public removeControl(ctr: IControl) {\n    this.controlService.removeControl(ctr);\n  }\n\n  // marker\n  public addMarker(marker: IMarker) {\n    this.markerService.addMarker(marker);\n  }\n\n  public addMarkerLayer(layer: IMarkerLayer) {\n    this.markerService.addMarkerLayer(layer);\n  }\n\n  public removeMarkerLayer(layer: IMarkerLayer) {\n    this.markerService.removeMarkerLayer(layer);\n  }\n\n  public removeAllMakers() {\n    this.markerService.removeAllMarkers();\n  }\n\n  public addPopup(popup: IPopup) {\n    this.popupService.addPopup(popup);\n  }\n\n  public on(type: string, handle: (...args: any[]) => void): void {\n    SceneEventList.indexOf(type) === -1\n      ? this.mapService.on(type, handle)\n      : this.sceneService.on(type, handle);\n  }\n\n  public off(type: string, handle: (...args: any[]) => void): void {\n    SceneEventList.indexOf(type) === -1\n      ? this.mapService.off(type, handle)\n      : this.sceneService.off(type, handle);\n  }\n\n  // implements IMapController\n\n  public getZoom(): number {\n    return this.mapService.getZoom();\n  }\n\n  public getCenter(): ILngLat {\n    return this.mapService.getCenter();\n  }\n\n  public getPitch(): number {\n    return this.mapService.getPitch();\n  }\n\n  public getRotation(): number {\n    return this.mapService.getRotation();\n  }\n\n  public getBounds(): Bounds {\n    return this.mapService.getBounds();\n  }\n\n  public setRotation(rotation: number): void {\n    this.mapService.setRotation(rotation);\n  }\n  public zoomIn(): void {\n    this.mapService.zoomIn();\n  }\n\n  public zoomOut(): void {\n    this.mapService.zoomOut();\n  }\n\n  public panTo(p: Point): void {\n    this.mapService.panTo(p);\n  }\n\n  public panBy(pixel: Point): void {\n    this.mapService.panTo(pixel);\n  }\n\n  public setZoom(zoom: number): void {\n    this.mapService.setZoom(zoom);\n  }\n  public fitBounds(bound: Bounds): void {\n    this.mapService.fitBounds(bound);\n  }\n\n  public setZoomAndCenter(zoom: number, center: Point): void {\n    this.mapService.setZoomAndCenter(zoom, center);\n  }\n\n  public setMapStyle(style: string): void {\n    this.mapService.setMapStyle(style);\n  }\n\n  // conversion Method\n  public pixelToLngLat(pixel: Point): ILngLat {\n    return this.mapService.pixelToLngLat(pixel);\n  }\n\n  public lngLatToPixel(lnglat: Point): IPoint {\n    return this.mapService.lngLatToPixel(lnglat);\n  }\n\n  public containerToLngLat(pixel: Point): ILngLat {\n    return this.mapService.containerToLngLat(pixel);\n  }\n\n  public lngLatToContainer(lnglat: Point): IPoint {\n    return this.mapService.lngLatToContainer(lnglat);\n  }\n\n  public destroy() {\n    this.sceneService.destroy();\n    // TODO: 清理其他 Service 例如 IconService\n  }\n\n  public registerPostProcessingPass(\n    constructor: new (...args: any[]) => IPostProcessingPass<unknown>,\n    name: string,\n  ) {\n    this.container\n      .bind<IPostProcessingPass<unknown>>(TYPES.IPostProcessingPass)\n      .to(constructor)\n      .whenTargetNamed(name);\n  }\n\n  private initComponent(id: string | HTMLDivElement) {\n    this.controlService.init(\n      {\n        container: DOM.getContainer(id),\n      },\n      this.container,\n    );\n    this.markerService.init(this.container);\n    this.popupService.init(this.container);\n  }\n  // 资源管理\n}\n\nexport { Scene };\n"],"file":"index.js"}