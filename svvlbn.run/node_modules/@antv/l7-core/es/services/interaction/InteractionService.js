import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";

var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

import EventEmitter from 'eventemitter3';
import Hammer from 'hammerjs';
import { inject, injectable } from 'inversify';
import { TYPES } from '../../types';
import { InteractionEvent } from './IInteractionService';
var InteractionService = (_dec = injectable(), _dec2 = inject(TYPES.IMapService), _dec3 = inject(TYPES.ILogService), _dec(_class = (_class2 = (_temp = function (_EventEmitter) {
  _inherits(InteractionService, _EventEmitter);

  function InteractionService() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, InteractionService);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(InteractionService)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _initializerDefineProperty(_this, "mapService", _descriptor, _assertThisInitialized(_this));

    _initializerDefineProperty(_this, "logger", _descriptor2, _assertThisInitialized(_this));

    _this.hammertime = void 0;

    _this.onHover = function (_ref) {
      var x = _ref.x,
          y = _ref.y,
          type = _ref.type;

      var $containter = _this.mapService.getMapContainer();

      if ($containter) {
        var _$containter$getBound = $containter.getBoundingClientRect(),
            top = _$containter$getBound.top,
            left = _$containter$getBound.left;

        x -= left;
        y -= top;
      }

      var lngLat = _this.mapService.containerToLngLat([x, y]);

      _this.emit(InteractionEvent.Hover, {
        x: x,
        y: y,
        lngLat: lngLat,
        type: type
      });
    };

    return _this;
  }

  _createClass(InteractionService, [{
    key: "init",
    value: function init() {
      this.addEventListenerOnMap();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.hammertime) {
        this.hammertime.destroy();
      }

      this.removeEventListenerOnMap();
      this.off(InteractionEvent.Hover);
    }
  }, {
    key: "triggerHover",
    value: function triggerHover(_ref2) {
      var x = _ref2.x,
          y = _ref2.y;
      this.emit(InteractionEvent.Hover, {
        x: x,
        y: y
      });
    }
  }, {
    key: "triggerSelect",
    value: function triggerSelect(id) {
      this.emit(InteractionEvent.Select, {
        featureId: id
      });
    }
  }, {
    key: "triggerActive",
    value: function triggerActive(id) {
      this.emit(InteractionEvent.Active, {
        featureId: id
      });
    }
  }, {
    key: "addEventListenerOnMap",
    value: function addEventListenerOnMap() {
      var $containter = this.mapService.getMapContainer();

      if ($containter) {
        var hammertime = new Hammer($containter);
        hammertime.get('pan').set({
          direction: Hammer.DIRECTION_ALL
        });
        hammertime.get('pinch').set({
          enable: true
        });
        $containter.addEventListener('mousemove', this.onHover);
        $containter.addEventListener('click', this.onHover);
        $containter.addEventListener('mousedown', this.onHover);
        $containter.addEventListener('mouseup', this.onHover);
        $containter.addEventListener('dblclick', this.onHover);
        $containter.addEventListener('contextmenu', this.onHover);
        this.hammertime = hammertime;
        this.logger.debug('add event listeners on canvas');
      }
    }
  }, {
    key: "removeEventListenerOnMap",
    value: function removeEventListenerOnMap() {
      var $containter = this.mapService.getMapContainer();

      if ($containter) {
        $containter.removeEventListener('mousemove', this.onHover);
        $containter.removeEventListener('click', this.onHover);
        $containter.removeEventListener('mousedown', this.onHover);
        $containter.removeEventListener('mouseup', this.onHover);
        $containter.removeEventListener('dblclick', this.onHover);
        $containter.removeEventListener('contextmenu', this.onHover);
      }
    }
  }]);

  return InteractionService;
}(EventEmitter), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "mapService", [_dec2], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "logger", [_dec3], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
})), _class2)) || _class);
export { InteractionService as default };
//# sourceMappingURL=InteractionService.js.map