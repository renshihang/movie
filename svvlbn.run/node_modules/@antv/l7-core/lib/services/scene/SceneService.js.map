{"version":3,"sources":["../../../src/services/scene/SceneService.ts"],"names":["Scene","TYPES","SceneID","IIconService","IFontService","IControlService","ILogService","IGlobalConfigService","IMapService","ICoordinateSystemService","IRendererService","ILayerService","ICameraService","IInteractionService","IShaderModuleService","IMarkerService","IPopupService","inited","initPromise","rendering","$container","hooks","handleWindowResized","emit","pixelRatio","window","devicePixelRatio","w","innerWidth","h","innerHeight","document","body","bounds","getBoundingClientRect","right","left","bottom","top","rendererService","viewport","x","y","width","height","DOM","triggerResize","coordinateSystemService","needRefresh","render","handleMapCameraChanged","cameraService","update","init","AsyncParallelHook","sceneConfig","configService","setSceneConfig","id","validateSceneConfig","getSceneConfig","valid","errorText","logger","error","shaderModuleService","registerBuiltinModules","iconService","fontService","tapPromise","Promise","resolve","map","onCameraChanged","addMarkerContainer","markerService","addMarkers","addMarkerLayers","popupService","initPopup","interactionService","debug","matchMedia","addListener","promise","layer","name","layerService","add","info","controlService","addControls","initLayers","renderLayers","renderCanvas","getElementsByTagName","layersPng","toDataURL","destroy","removeAllListeners","removeListener","EventEmitter"],"mappings":"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","sourcesContent":["import { DOM } from '@antv/l7-utils';\nimport elementResizeEvent, { unbind } from 'element-resize-event';\nimport { EventEmitter } from 'eventemitter3';\nimport { inject, injectable } from 'inversify';\nimport { AsyncParallelHook } from 'tapable';\nimport { TYPES } from '../../types';\nimport { createRendererContainer } from '../../utils/dom';\nimport { IFontService } from '../asset/IFontService';\nimport { IIconService } from '../asset/IIconService';\nimport { ICameraService, IViewport } from '../camera/ICameraService';\nimport { IControlService } from '../component/IControlService';\nimport { IMarkerService } from '../component/IMarkerService';\nimport { IPopupService } from '../component/IPopupService';\nimport { IGlobalConfigService, ISceneConfig } from '../config/IConfigService';\nimport { ICoordinateSystemService } from '../coordinate/ICoordinateSystemService';\nimport { IInteractionService } from '../interaction/IInteractionService';\nimport { ILayer, ILayerService } from '../layer/ILayerService';\nimport { ILogService } from '../log/ILogService';\nimport { IMapCamera, IMapService } from '../map/IMapService';\nimport { IRendererService } from '../renderer/IRendererService';\nimport { IShaderModuleService } from '../shader/IShaderModuleService';\nimport { ISceneService } from './ISceneService';\n\n/**\n * will emit `loaded` `resize` `destroy` event\n */\n@injectable()\nexport default class Scene extends EventEmitter implements ISceneService {\n  @inject(TYPES.SceneID)\n  private readonly id: string;\n  /**\n   * 使用各种 Service\n   */\n  @inject(TYPES.IIconService)\n  private readonly iconService: IIconService;\n\n  @inject(TYPES.IFontService)\n  private readonly fontService: IFontService;\n\n  @inject(TYPES.IControlService)\n  private readonly controlService: IControlService;\n\n  @inject(TYPES.ILogService)\n  private readonly logger: ILogService;\n\n  @inject(TYPES.IGlobalConfigService)\n  private readonly configService: IGlobalConfigService;\n\n  @inject(TYPES.IMapService)\n  private readonly map: IMapService;\n\n  @inject(TYPES.ICoordinateSystemService)\n  private readonly coordinateSystemService: ICoordinateSystemService;\n\n  @inject(TYPES.IRendererService)\n  private readonly rendererService: IRendererService;\n\n  @inject(TYPES.ILayerService)\n  private readonly layerService: ILayerService;\n\n  @inject(TYPES.ICameraService)\n  private readonly cameraService: ICameraService;\n\n  @inject(TYPES.IInteractionService)\n  private readonly interactionService: IInteractionService;\n\n  @inject(TYPES.IShaderModuleService)\n  private readonly shaderModuleService: IShaderModuleService;\n\n  @inject(TYPES.IMarkerService)\n  private readonly markerService: IMarkerService;\n\n  @inject(TYPES.IPopupService)\n  private readonly popupService: IPopupService;\n\n  /**\n   * 是否首次渲染\n   */\n  private inited: boolean = false;\n  private initPromise: Promise<void>;\n\n  // TODO: 改成状态机\n  private rendering: boolean = false;\n\n  /**\n   * canvas 容器\n   */\n  private $container: HTMLDivElement | null;\n\n  private hooks: {\n    init: AsyncParallelHook<unknown>;\n  };\n\n  public constructor() {\n    super();\n    // @see https://github.com/webpack/tapable#usage\n    this.hooks = {\n      /**\n       * 初始化异步任务，可并行：\n       * 1. initMap：初始化地图底图、相机\n       * 2. initRenderer：初始化渲染引擎\n       * 3. initWorker：初始化 Worker\n       */\n      init: new AsyncParallelHook(['config']),\n    };\n  }\n\n  public init(sceneConfig: ISceneConfig) {\n    // 设置场景配置项\n    this.configService.setSceneConfig(this.id, sceneConfig);\n\n    // 校验场景配置项，失败则终止初始化过程\n    const { valid, errorText } = this.configService.validateSceneConfig(\n      this.configService.getSceneConfig(this.id),\n    );\n    if (!valid) {\n      this.logger.error(errorText || '');\n      return;\n    }\n\n    // 初始化 ShaderModule\n    this.shaderModuleService.registerBuiltinModules();\n\n    // 初始化资源管理 图片\n    this.iconService.init();\n    // 字体资源\n    this.fontService.init();\n\n    /**\n     * 初始化底图\n     */\n    this.hooks.init.tapPromise('initMap', async () => {\n      // 等待首次相机同步\n      await new Promise((resolve) => {\n        this.map.onCameraChanged((viewport: IViewport) => {\n          this.cameraService.init();\n          this.cameraService.update(viewport);\n          resolve();\n        });\n        this.map.init();\n      });\n      // this.controlService.addControls();\n      // 重新绑定非首次相机更新事件\n      this.map.onCameraChanged(this.handleMapCameraChanged);\n      this.map.addMarkerContainer();\n\n      // 初始化未加载的marker;\n      this.markerService.addMarkers();\n      this.markerService.addMarkerLayers();\n      this.popupService.initPopup();\n      // 地图初始化之后 才能初始化 container 上的交互\n      this.interactionService.init();\n      this.logger.debug(`map ${this.id} loaded`);\n    });\n\n    /**\n     * 初始化渲染引擎\n     */\n    this.hooks.init.tapPromise('initRenderer', async () => {\n      // 创建底图之上的 container\n      const $container = createRendererContainer(\n        this.configService.getSceneConfig(this.id).id || '',\n      );\n      this.$container = $container;\n      if ($container) {\n        await this.rendererService.init($container);\n        elementResizeEvent(\n          this.$container as HTMLDivElement,\n          this.handleWindowResized,\n        );\n        window\n          .matchMedia('screen and (-webkit-min-device-pixel-ratio: 1.5)')\n          .addListener(this.handleWindowResized);\n      } else {\n        this.logger.error('容器 id 不存在');\n      }\n\n      this.logger.debug(`scene ${this.id} renderer loaded`);\n    });\n    // TODO：init worker, fontAtlas...\n\n    // 执行异步并行初始化任务\n    this.initPromise = this.hooks.init.promise(\n      this.configService.getSceneConfig(this.id),\n    );\n\n    this.render();\n  }\n\n  public addLayer(layer: ILayer) {\n    this.logger.debug(`add layer ${layer.name} to scene ${this.id}`);\n    this.layerService.add(layer);\n    this.render();\n  }\n\n  public async render() {\n    if (this.rendering) {\n      return;\n    }\n\n    this.rendering = true;\n    // 首次初始化，或者地图的容器被强制销毁的需要重新初始化\n    if (!this.inited) {\n      // 还未初始化完成需要等待\n\n      await this.initPromise;\n      // FIXME: 初始化 marker 容器，可以放到 map 初始化方法中？\n\n      this.logger.info(' render inited');\n      this.controlService.addControls();\n      this.emit('loaded');\n      this.inited = true;\n    }\n\n    // 尝试初始化未初始化的图层\n    this.layerService.initLayers();\n    this.layerService.renderLayers();\n    // 组件需要等待layer 初始化完成之后添加\n\n    this.logger.debug(`scene ${this.id} render`);\n\n    this.rendering = false;\n  }\n\n  public getSceneContainer(): HTMLDivElement {\n    return this.$container as HTMLDivElement;\n  }\n\n  public ExportMap2Png(): string {\n    const renderCanvas = this.$container?.getElementsByTagName('canvas')[0];\n    this.render();\n    const layersPng = renderCanvas?.toDataURL() as string;\n    return layersPng;\n  }\n\n  public destroy() {\n    this.emit('destroy');\n    this.inited = false;\n    this.layerService.destroy();\n    this.interactionService.destroy();\n    this.controlService.destroy();\n    this.markerService.destroy();\n    this.removeAllListeners();\n    this.rendererService.destroy();\n    this.map.destroy();\n    unbind(this.$container as HTMLDivElement, this.handleWindowResized);\n    window\n      .matchMedia('screen and (min-resolution: 2dppx)')\n      .removeListener(this.handleWindowResized);\n  }\n\n  private handleWindowResized = () => {\n    this.emit('resize');\n    // @ts-check\n    if (this.$container) {\n      // recalculate the viewport's size and call gl.viewport\n      // @see https://github.com/regl-project/regl/blob/master/lib/webgl.js#L24-L38\n      const pixelRatio = window.devicePixelRatio;\n      let w = window.innerWidth;\n      let h = window.innerHeight;\n      if (this.$container !== document.body) {\n        const bounds = this.$container.getBoundingClientRect();\n        w = bounds.right - bounds.left;\n        h = bounds.bottom - bounds.top;\n      }\n\n      this.rendererService.viewport({\n        x: 0,\n        y: 0,\n        width: pixelRatio * w,\n        height: pixelRatio * h,\n      });\n      // 触发 Map， canvas\n      DOM.triggerResize();\n      this.coordinateSystemService.needRefresh = true;\n      //  repaint layers\n      this.render();\n    }\n  };\n\n  private handleMapCameraChanged = (viewport: IViewport) => {\n    this.cameraService.update(viewport);\n    this.render();\n  };\n}\n"],"file":"SceneService.js"}