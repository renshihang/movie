{"version":3,"sources":["../../../src/services/config/ConfigService.ts"],"names":["defaultSceneConfig","id","defaultLayerConfig","colors","size","shape","scales","shape2d","shape3d","minZoom","maxZoom","visible","autoFit","zIndex","blend","pickedFeatureID","enableMultiPassRenderer","enablePicking","active","activeColor","enableHighlight","enableSelect","highlightColor","selectColor","enableTAA","jitterScale","enableLighting","animateOption","enable","interval","duration","trailLength","ajv","Ajv","allErrors","verbose","GlobalConfigService","sceneConfigCache","sceneConfigValidator","mapConfigValidator","layerConfigCache","layerConfigValidatorCache","sceneId","WarnInfo","config","data","validate","layerId","layerName","schema","compile","sceneConfigSchema","mapConfigSchema","validateFunc","valid","errors","errorText","errorsText"],"mappings":"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","sourcesContent":["import Ajv from 'ajv';\nimport { injectable, postConstruct } from 'inversify';\nimport { merge } from 'lodash';\nimport { ILayerConfig } from '../layer/ILayerService';\nimport { IGlobalConfigService, ISceneConfig } from './IConfigService';\nimport mapConfigSchema from './mapConfigSchema';\nimport sceneConfigSchema from './sceneConfigSchema';\nimport WarnInfo, { IWarnInfo } from './warnInfo';\n\n/**\n * 场景默认配置项\n */\nconst defaultSceneConfig: Partial<ISceneConfig> = {\n  id: 'map',\n};\n\n/**\n * 图层基类默认样式属性\n */\nconst defaultLayerConfig: Partial<ILayerConfig> = {\n  colors: [\n    'rgb(103,0,31)',\n    'rgb(178,24,43)',\n    'rgb(214,96,77)',\n    'rgb(244,165,130)',\n    'rgb(253,219,199)',\n    'rgb(247,247,247)',\n    'rgb(209,229,240)',\n    'rgb(146,197,222)',\n    'rgb(67,147,195)',\n    'rgb(33,102,172)',\n    'rgb(5,48,97)',\n  ],\n  size: 10,\n  shape: 'circle',\n  scales: {},\n  shape2d: [\n    'circle',\n    'triangle',\n    'square',\n    'pentagon',\n    'hexagon',\n    'octogon',\n    'hexagram',\n    'rhombus',\n    'vesica',\n  ],\n  shape3d: ['cylinder', 'triangleColumn', 'hexagonColumn', 'squareColumn'],\n  minZoom: -1,\n  maxZoom: 24,\n  visible: true,\n  autoFit: false,\n  zIndex: 0,\n  blend: 'normal',\n  pickedFeatureID: -1,\n  enableMultiPassRenderer: true,\n  enablePicking: true,\n  active: false,\n  activeColor: '#2f54eb',\n  enableHighlight: false,\n  enableSelect: false,\n  highlightColor: '#2f54eb',\n  selectColor: 'blue',\n  enableTAA: false,\n  jitterScale: 1,\n  enableLighting: false,\n  animateOption: {\n    enable: false,\n    interval: 0.2,\n    duration: 4,\n    trailLength: 0.15,\n  },\n};\n\n// @see https://github.com/epoberezkin/ajv#options\nconst ajv = new Ajv({\n  allErrors: true,\n  verbose: true,\n});\n\n@injectable()\nexport default class GlobalConfigService implements IGlobalConfigService {\n  /**\n   * 全部场景配置项缓存\n   */\n  private sceneConfigCache: {\n    [sceneId: string]: Partial<ISceneConfig>;\n  } = {};\n\n  /**\n   * 场景配置项校验器\n   */\n  private sceneConfigValidator: Ajv.ValidateFunction;\n\n  /**\n   * 地图配置项校验器\n   */\n  private mapConfigValidator: Ajv.ValidateFunction;\n\n  /**\n   * 全部图层配置项缓存\n   */\n  private layerConfigCache: {\n    [layerId: string]: Partial<ILayerConfig & ISceneConfig>;\n  } = {};\n\n  /**\n   * 保存每一种 Layer 配置项的校验器\n   */\n  private layerConfigValidatorCache: {\n    [layerName: string]: Ajv.ValidateFunction;\n  } = {};\n\n  public getSceneConfig(sceneId: string) {\n    return this.sceneConfigCache[sceneId];\n  }\n\n  public getSceneWarninfo(id: string) {\n    return WarnInfo[id];\n  }\n\n  public setSceneConfig(sceneId: string, config: Partial<ISceneConfig>) {\n    this.sceneConfigCache[sceneId] = {\n      ...defaultSceneConfig,\n      ...config,\n    };\n  }\n\n  public validateSceneConfig(data: object) {\n    return this.validate(this.sceneConfigValidator, data);\n  }\n\n  public validateMapConfig(data: object) {\n    return this.validate(this.mapConfigValidator, data);\n  }\n\n  public getLayerConfig<IChildLayerConfig>(\n    layerId: string,\n  ): Partial<ILayerConfig & ISceneConfig & IChildLayerConfig> {\n    // @ts-ignore\n    return this.layerConfigCache[layerId];\n  }\n\n  public setLayerConfig(\n    sceneId: string,\n    layerId: string,\n    config: Partial<ILayerConfig>,\n  ) {\n    // @ts-ignore\n    this.layerConfigCache[layerId] = {\n      ...merge({}, this.sceneConfigCache[sceneId], defaultLayerConfig, config),\n    };\n  }\n\n  public registerLayerConfigSchemaValidator(layerName: string, schema: object) {\n    if (!this.layerConfigValidatorCache[layerName]) {\n      this.layerConfigValidatorCache[layerName] = ajv.compile(schema);\n    }\n  }\n\n  public validateLayerConfig(layerName: string, data: object) {\n    return this.validate(this.layerConfigValidatorCache[layerName], data);\n  }\n\n  public clean() {\n    this.sceneConfigCache = {};\n    this.layerConfigCache = {};\n  }\n\n  @postConstruct()\n  private registerSceneConfigSchemaValidator() {\n    this.sceneConfigValidator = ajv.compile(sceneConfigSchema);\n    this.mapConfigValidator = ajv.compile(mapConfigSchema);\n  }\n\n  private validate(\n    validateFunc: Ajv.ValidateFunction | undefined,\n    data: object,\n  ) {\n    if (validateFunc) {\n      const valid = validateFunc(data);\n      if (!valid) {\n        return {\n          valid,\n          errors: validateFunc.errors,\n          errorText: ajv.errorsText(validateFunc.errors),\n        };\n      }\n    }\n    return {\n      valid: true,\n      errors: null,\n      errorText: null,\n    };\n  }\n}\n"],"file":"ConfigService.js"}