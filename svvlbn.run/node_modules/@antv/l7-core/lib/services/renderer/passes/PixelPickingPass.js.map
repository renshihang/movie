{"version":3,"sources":["../../../../src/services/renderer/passes/PixelPickingPass.ts"],"names":["PixelPickingPass","TYPES","ILogService","pickingFBO","layer","alreadyInRendering","pickFromPickingFBO","x","y","lngLat","type","isVisible","rendererService","getViewportSize","readPixels","useFramebuffer","width","height","getLayerConfig","enableHighlight","enableSelect","xInDevicePixel","window","devicePixelRatio","yInDevicePixel","pickedColors","Math","round","data","Uint8Array","framebuffer","logger","debug","pickedFeatureIdx","rawFeature","getSource","getFeatureById","target","featureId","feature","setCurrentPickId","triggerHoverOnLayer","getCurrentPickId","highlightPickedFeature","toString","selectFeature","PassType","Normal","config","createTexture2D","createFramebuffer","color","wrapS","gl","CLAMP_TO_EDGE","wrapT","interactionService","on","InteractionEvent","Hover","Select","selectFeatureHander","bind","Active","highlightFeatureHander","clear","resize","stencil","depth","originRenderFlag","multiPassRenderer","getRenderFlag","setRenderFlag","hooks","beforePickingEncode","call","render","afterPickingEncode","emit","r","g","b","beforeHighlight","layerService","renderLayers","beforeSelect","BaseNormalPass"],"mappings":"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","sourcesContent":["import { decodePickingColor, encodePickingColor } from '@antv/l7-utils';\nimport { inject, injectable } from 'inversify';\nimport { TYPES } from '../../../types';\nimport {\n  IInteractionTarget,\n  InteractionEvent,\n} from '../../interaction/IInteractionService';\nimport { ILayer } from '../../layer/ILayerService';\nimport { ILogService } from '../../log/ILogService';\nimport { ILngLat } from '../../map/IMapService';\nimport { gl } from '../gl';\nimport { IFramebuffer } from '../IFramebuffer';\nimport { PassType } from '../IMultiPassRenderer';\nimport BaseNormalPass from './BaseNormalPass';\n\n/**\n * color-based PixelPickingPass\n * @see https://github.com/antvis/L7/blob/next/dev-docs/PixelPickingEngine.md\n */\n@injectable()\nexport default class PixelPickingPass<\n  InitializationOptions = {}\n> extends BaseNormalPass<InitializationOptions> {\n  @inject(TYPES.ILogService)\n  protected readonly logger: ILogService;\n\n  /**\n   * picking framebuffer，供 attributes 颜色编码后输出\n   */\n  private pickingFBO: IFramebuffer;\n\n  /**\n   * 保存 layer 引用\n   */\n  private layer: ILayer;\n\n  /**\n   * 简单的 throttle，防止连续触发 hover 时导致频繁渲染到 picking framebuffer\n   */\n  private alreadyInRendering: boolean = false;\n\n  public getType() {\n    return PassType.Normal;\n  }\n\n  public getName() {\n    return 'pixelPicking';\n  }\n\n  public init(layer: ILayer, config?: Partial<InitializationOptions>) {\n    super.init(layer, config);\n    this.layer = layer;\n    const {\n      createTexture2D,\n      createFramebuffer,\n      getViewportSize,\n    } = this.rendererService;\n    const { width, height } = getViewportSize();\n\n    // 创建 picking framebuffer，后续实时 resize\n    this.pickingFBO = createFramebuffer({\n      color: createTexture2D({\n        width,\n        height,\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n      }),\n    });\n\n    // 监听 hover 事件\n    this.interactionService.on(InteractionEvent.Hover, this.pickFromPickingFBO);\n    this.interactionService.on(\n      InteractionEvent.Select,\n      this.selectFeatureHander.bind(this),\n    );\n    this.interactionService.on(\n      InteractionEvent.Active,\n      this.highlightFeatureHander.bind(this),\n    );\n  }\n\n  public render(layer: ILayer) {\n    if (this.alreadyInRendering) {\n      return;\n    }\n\n    const { getViewportSize, useFramebuffer, clear } = this.rendererService;\n    const { width, height } = getViewportSize();\n\n    // throttled\n    this.alreadyInRendering = true;\n\n    // resize first, fbo can't be resized in use\n    this.pickingFBO.resize({ width, height });\n\n    useFramebuffer(this.pickingFBO, () => {\n      clear({\n        framebuffer: this.pickingFBO,\n        color: [0, 0, 0, 0],\n        stencil: 0,\n        depth: 1,\n      });\n\n      /**\n       * picking pass 不需要 multipass，原因如下：\n       * 1. 已经 clear，无需 ClearPass\n       * 2. 只需要 RenderPass\n       * 3. 后处理 pass 需要跳过\n       */\n      const originRenderFlag = this.layer.multiPassRenderer.getRenderFlag();\n      this.layer.multiPassRenderer.setRenderFlag(false);\n      // trigger hooks\n      layer.hooks.beforePickingEncode.call();\n      layer.render();\n      layer.hooks.afterPickingEncode.call();\n      this.layer.multiPassRenderer.setRenderFlag(originRenderFlag);\n\n      this.alreadyInRendering = false;\n    });\n  }\n\n  /**\n   * 拾取视口指定坐标属于的要素\n   * TODO：支持区域拾取\n   */\n  private pickFromPickingFBO = ({ x, y, lngLat, type }: IInteractionTarget) => {\n    if (!this.layer.isVisible()) {\n      return;\n    }\n    const {\n      getViewportSize,\n      readPixels,\n      useFramebuffer,\n    } = this.rendererService;\n    const { width, height } = getViewportSize();\n    const { enableHighlight, enableSelect } = this.layer.getLayerConfig();\n\n    const xInDevicePixel = x * window.devicePixelRatio;\n    const yInDevicePixel = y * window.devicePixelRatio;\n    if (\n      xInDevicePixel > width ||\n      xInDevicePixel < 0 ||\n      yInDevicePixel > height ||\n      yInDevicePixel < 0\n    ) {\n      return;\n    }\n    let pickedColors: Uint8Array | undefined;\n    useFramebuffer(this.pickingFBO, () => {\n      // avoid realloc\n      pickedColors = readPixels({\n        x: Math.round(xInDevicePixel),\n        // 视口坐标系原点在左上，而 WebGL 在左下，需要翻转 Y 轴\n        y: Math.round(height - (y + 1) * window.devicePixelRatio),\n        width: 1,\n        height: 1,\n        data: new Uint8Array(1 * 1 * 4),\n        framebuffer: this.pickingFBO,\n      });\n\n      if (\n        pickedColors[0] !== 0 ||\n        pickedColors[1] !== 0 ||\n        pickedColors[2] !== 0\n      ) {\n        this.logger.debug('picked');\n        const pickedFeatureIdx = decodePickingColor(pickedColors);\n        const rawFeature = this.layer\n          .getSource()\n          .getFeatureById(pickedFeatureIdx);\n        const target = {\n          x,\n          y,\n          type,\n          lngLat,\n          featureId: pickedFeatureIdx,\n          feature: rawFeature,\n        };\n        if (!rawFeature) {\n          // this.logger.error(\n          //   '未找到颜色编码解码后的原始 feature，请检查 fragment shader 中末尾是否添加了 `gl_FragColor = filterColor(gl_FragColor);`',\n          // );\n        } else {\n          // trigger onHover/Click callback on layer\n          this.layer.setCurrentPickId(pickedFeatureIdx);\n          this.triggerHoverOnLayer(target);\n        }\n      } else {\n        const target = {\n          x,\n          y,\n          lngLat,\n          type:\n            this.layer.getCurrentPickId() === null ? 'un' + type : 'mouseout',\n          featureId: null,\n          feature: null,\n        };\n        this.triggerHoverOnLayer({\n          ...target,\n          type: 'unpick',\n        });\n        this.triggerHoverOnLayer(target);\n        this.layer.setCurrentPickId(null);\n      }\n    });\n\n    if (enableHighlight) {\n      this.highlightPickedFeature(pickedColors);\n    }\n    if (\n      enableSelect &&\n      type === 'click' &&\n      pickedColors?.toString() !== [0, 0, 0, 0].toString()\n    ) {\n      this.selectFeature(pickedColors);\n    }\n  };\n\n  private triggerHoverOnLayer(target: {\n    x: number;\n    y: number;\n    type: string;\n    lngLat: ILngLat;\n    feature: unknown;\n    featureId: number | null;\n  }) {\n    this.layer.emit(target.type, target);\n  }\n\n  /**\n   * highlight 如果直接修改选中 feature 的 buffer，存在两个问题：\n   * 1. 鼠标移走时无法恢复\n   * 2. 无法实现高亮颜色与原始原色的 alpha 混合\n   * 因此高亮还是放在 shader 中做比较好\n   * @example\n   * this.layer.color('name', ['#000000'], {\n   *  featureRange: {\n   *    startIndex: pickedFeatureIdx,\n   *    endIndex: pickedFeatureIdx + 1,\n   *  },\n   * });\n   */\n  private highlightPickedFeature(pickedColors: Uint8Array | undefined) {\n    const [r, g, b] = pickedColors;\n    this.layer.hooks.beforeHighlight.call([r, g, b]);\n    this.layerService.renderLayers();\n  }\n\n  private selectFeature(pickedColors: Uint8Array | undefined) {\n    const [r, g, b] = pickedColors;\n    this.layer.hooks.beforeSelect.call([r, g, b]);\n    this.layerService.renderLayers();\n  }\n\n  private selectFeatureHander({ featureId }: Partial<IInteractionTarget>) {\n    const pickedColors = encodePickingColor(featureId as number);\n    this.selectFeature(new Uint8Array(pickedColors));\n  }\n\n  private highlightFeatureHander({ featureId }: Partial<IInteractionTarget>) {\n    const pickedColors = encodePickingColor(featureId as number);\n    this.highlightPickedFeature(new Uint8Array(pickedColors));\n  }\n}\n"],"file":"PixelPickingPass.js"}