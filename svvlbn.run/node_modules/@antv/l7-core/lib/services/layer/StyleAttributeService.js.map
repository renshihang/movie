{"version":3,"sources":["../../../src/services/layer/StyleAttributeService.ts"],"names":["bytesPerElementMap","gl","FLOAT","UNSIGNED_BYTE","UNSIGNED_SHORT","counter","StyleAttributeService","TYPES","IRendererService","attributesAndIndices","attributes","triangulation","c","featureLayout","sizePerElement","elements","options","attributeToUpdate","getLayerStyleAttribute","name","setProps","StyleAttribute","push","attributeName","updateOptions","registerStyleAttribute","scale","needRescale","needRemapping","needRegenerateVertices","featureRange","find","attribute","features","startFeatureIdx","endFeatureIdx","descriptor","update","buffer","size","bytesPerElement","type","featuresToUpdate","slice","length","offset","bufferOffsetInBytes","updatedBufferData","map","attributeIdx","featureIdx","vertices","normals","verticesNumForCurrentFeature","featureData","vertexIdx","normal","reduce","prev","cur","vertexAttribute","updateBuffer","data","descriptors","attr","resetDescriptor","verticesNum","indices","forEach","feature","indicesForCurrentFeature","verticesForCurrentFeature","normalsForCurrentFeature","vertexSize","i","index","rendererService","createAttribute","createBuffer","createElements","rest","UNSIGNED_INT","count","destroy"],"mappings":"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","sourcesContent":["import { inject, injectable } from 'inversify';\nimport { TYPES } from '../../types';\nimport { gl } from '../renderer/gl';\nimport { IAttribute } from '../renderer/IAttribute';\nimport { IElements } from '../renderer/IElements';\nimport { IRendererService } from '../renderer/IRendererService';\nimport { IParseDataItem } from '../source/ISourceService';\nimport { ILayer } from './ILayerService';\nimport {\n  IEncodeFeature,\n  IStyleAttribute,\n  IStyleAttributeInitializationOptions,\n  IStyleAttributeService,\n  IStyleAttributeUpdateOptions,\n  IVertexAttributeDescriptor,\n  Triangulation,\n} from './IStyleAttributeService';\nimport StyleAttribute from './StyleAttribute';\n\nconst bytesPerElementMap = {\n  [gl.FLOAT]: 4,\n  [gl.UNSIGNED_BYTE]: 1,\n  [gl.UNSIGNED_SHORT]: 2,\n};\n\nlet counter = 0;\n\n/**\n * 每个 Layer 都拥有一个，用于管理样式属性的注册和更新\n */\n@injectable()\nexport default class StyleAttributeService implements IStyleAttributeService {\n  public attributesAndIndices: {\n    attributes: {\n      [attributeName: string]: IAttribute;\n    };\n    elements: IElements;\n  };\n  @inject(TYPES.IRendererService)\n  private readonly rendererService: IRendererService;\n\n  private attributes: IStyleAttribute[] = [];\n\n  private triangulation: Triangulation;\n\n  private c = counter++;\n\n  private featureLayout: {\n    sizePerElement: number;\n    elements: Array<{\n      featureIdx: number;\n      vertices: number[];\n      normals: number[];\n      offset: number;\n    }>;\n  } = {\n    sizePerElement: 0,\n    elements: [],\n  };\n  public registerStyleAttribute(\n    options: Partial<IStyleAttributeInitializationOptions>,\n  ) {\n    let attributeToUpdate = this.getLayerStyleAttribute(options.name || '');\n    if (attributeToUpdate) {\n      attributeToUpdate.setProps(options);\n    } else {\n      attributeToUpdate = new StyleAttribute(options);\n      this.attributes.push(attributeToUpdate);\n    }\n    return attributeToUpdate;\n  }\n\n  public updateStyleAttribute(\n    attributeName: string,\n    options: Partial<IStyleAttributeInitializationOptions>,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    let attributeToUpdate = this.getLayerStyleAttribute(attributeName);\n    if (!attributeToUpdate) {\n      attributeToUpdate = this.registerStyleAttribute({\n        ...options,\n        name: attributeName,\n      });\n    }\n    const { scale } = options;\n    if (scale && attributeToUpdate) {\n      // TODO: 需要比较新旧值确定是否需要 rescale\n      // 需要重新 scale，肯定也需要重新进行数据映射\n      attributeToUpdate.scale = scale;\n      attributeToUpdate.needRescale = true;\n      attributeToUpdate.needRemapping = true;\n      attributeToUpdate.needRegenerateVertices = true;\n      if (updateOptions && updateOptions.featureRange) {\n        attributeToUpdate.featureRange = updateOptions.featureRange;\n      }\n    }\n  }\n\n  public getLayerStyleAttributes(): IStyleAttribute[] | undefined {\n    return this.attributes;\n  }\n\n  public getLayerStyleAttribute(\n    attributeName: string,\n  ): IStyleAttribute | undefined {\n    return this.attributes.find(\n      (attribute) => attribute.name === attributeName,\n    );\n  }\n\n  public updateAttributeByFeatureRange(\n    attributeName: string,\n    features: IEncodeFeature[],\n    startFeatureIdx: number = 0,\n    endFeatureIdx?: number,\n  ) {\n    const attributeToUpdate = this.attributes.find(\n      (attribute) => attribute.name === attributeName,\n    );\n    if (attributeToUpdate && attributeToUpdate.descriptor) {\n      const { descriptor } = attributeToUpdate;\n      const { update, buffer, size = 0 } = descriptor;\n      const bytesPerElement = bytesPerElementMap[buffer.type || gl.FLOAT];\n      if (update) {\n        const { elements, sizePerElement } = this.featureLayout;\n        // 截取待更新的 feature 范围\n        const featuresToUpdate = elements.slice(startFeatureIdx, endFeatureIdx);\n\n        // [n, n] 中断更新\n        if (!featuresToUpdate.length) {\n          return;\n        }\n        const { offset } = featuresToUpdate[0];\n        // 以 byte 为单位计算 buffer 中的偏移\n        const bufferOffsetInBytes = offset * size * bytesPerElement;\n        const updatedBufferData = featuresToUpdate\n          .map(({ featureIdx, vertices, normals }, attributeIdx) => {\n            const verticesNumForCurrentFeature =\n              vertices.length / sizePerElement;\n            const featureData: number[] = [];\n            for (\n              let vertexIdx = 0;\n              vertexIdx < verticesNumForCurrentFeature;\n              vertexIdx++\n            ) {\n              const normal = normals\n                ? normals!.slice(vertexIdx * 3, vertexIdx * 3 + 3)\n                : [];\n              featureData.push(\n                ...update(\n                  features[featureIdx],\n                  featureIdx,\n                  vertices.slice(\n                    vertexIdx * sizePerElement,\n                    vertexIdx * sizePerElement + sizePerElement,\n                  ),\n                  attributeIdx,\n                  normal,\n                ),\n              );\n            }\n            return featureData;\n          })\n          .reduce((prev, cur) => {\n            prev.push(...cur);\n            return prev;\n          }, []);\n\n        // 更新底层 IAttribute 中包含的 IBuffer，使用 subdata\n        attributeToUpdate.vertexAttribute.updateBuffer({\n          data: updatedBufferData,\n          offset: bufferOffsetInBytes,\n        });\n      }\n    }\n  }\n\n  public createAttributesAndIndices(\n    features: IEncodeFeature[],\n    triangulation?: Triangulation,\n  ): {\n    attributes: {\n      [attributeName: string]: IAttribute;\n    };\n    elements: IElements;\n  } {\n    if (triangulation) {\n      this.triangulation = triangulation;\n    }\n    const descriptors = this.attributes.map((attr) => {\n      attr.resetDescriptor();\n      return attr.descriptor;\n    });\n    let verticesNum = 0;\n    const vertices: number[] = [];\n    const indices: number[] = [];\n    const normals: number[] = [];\n    let size = 3;\n\n    features.forEach((feature, featureIdx) => {\n      // 逐 feature 进行三角化\n      const {\n        indices: indicesForCurrentFeature,\n        vertices: verticesForCurrentFeature,\n        normals: normalsForCurrentFeature,\n        size: vertexSize,\n      } = this.triangulation(feature);\n      indicesForCurrentFeature.forEach((i) => {\n        indices.push(i + verticesNum);\n      });\n      verticesForCurrentFeature.forEach((index) => {\n        vertices.push(index);\n      });\n      // fix Maximum call stack size exceeded https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why\n      if (normalsForCurrentFeature) {\n        normalsForCurrentFeature.forEach((normal) => {\n          normals.push(normal);\n        });\n      }\n      size = vertexSize;\n      const verticesNumForCurrentFeature =\n        verticesForCurrentFeature.length / vertexSize;\n\n      // 记录三角化结果，用于后续精确更新指定 feature\n      this.featureLayout.sizePerElement = size;\n      this.featureLayout.elements.push({\n        featureIdx,\n        vertices: verticesForCurrentFeature,\n        normals: normalsForCurrentFeature as number[],\n        offset: verticesNum,\n      });\n\n      verticesNum += verticesNumForCurrentFeature;\n      // 根据 position 顶点生成其他顶点数据\n      for (\n        let vertexIdx = 0;\n        vertexIdx < verticesNumForCurrentFeature;\n        vertexIdx++\n      ) {\n        descriptors.forEach((descriptor, attributeIdx) => {\n          if (descriptor && descriptor.update) {\n            const normal =\n              normalsForCurrentFeature?.slice(\n                vertexIdx * 3,\n                vertexIdx * 3 + 3,\n              ) || [];\n            (descriptor.buffer.data as number[]).push(\n              ...descriptor.update(\n                feature,\n                featureIdx,\n                verticesForCurrentFeature.slice(\n                  vertexIdx * vertexSize,\n                  vertexIdx * vertexSize + vertexSize,\n                ),\n                vertexIdx, // 当前顶点所在feature索引\n                normal,\n                // TODO: 传入顶点索引 vertexIdx\n              ),\n            );\n          } // end if\n        }); // end for each\n      } // end for\n    }); // end features for Each\n    const {\n      createAttribute,\n      createBuffer,\n      createElements,\n    } = this.rendererService;\n\n    const attributes: {\n      [attributeName: string]: IAttribute;\n    } = {};\n    descriptors.forEach((descriptor, attributeIdx) => {\n      if (descriptor) {\n        // IAttribute 参数透传\n        const { buffer, update, name, ...rest } = descriptor;\n\n        const vertexAttribute = createAttribute({\n          // IBuffer 参数透传\n          buffer: createBuffer(buffer),\n          ...rest,\n        });\n        attributes[descriptor.name || ''] = vertexAttribute;\n\n        // 在 StyleAttribute 上保存对 VertexAttribute 的引用\n        this.attributes[attributeIdx].vertexAttribute = vertexAttribute;\n      }\n    });\n\n    const elements = createElements({\n      data: indices,\n      type: gl.UNSIGNED_INT,\n      count: indices.length,\n    });\n    this.attributesAndIndices = {\n      attributes,\n      elements,\n    };\n    return this.attributesAndIndices;\n  }\n  public clearAllAttributes() {\n    // 销毁关联的 vertex attribute buffer objects\n    this.attributes.forEach((attribute) => {\n      if (attribute.vertexAttribute) {\n        attribute.vertexAttribute.destroy();\n      }\n    });\n    this.attributes = [];\n  }\n}\n"],"file":"StyleAttributeService.js"}