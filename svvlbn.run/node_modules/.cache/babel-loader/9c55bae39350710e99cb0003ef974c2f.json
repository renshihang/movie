{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport { AttributeType, gl } from '@antv/l7-core';\nimport BaseModel from '../../core/BaseModel';\nimport { LineTriangulation } from '../../core/triangulation';\nvar line_frag = \"#define LineTypeSolid 0.0\\n#define LineTypeDash 1.0\\n#define Animate 0.0\\nuniform float u_blur : 0.9;\\nuniform float u_line_type: 0.0;\\nuniform float u_opacity : 1.0;\\nvarying vec4 v_color;\\nvarying vec2 v_normal;\\n\\n\\n// dash\\nuniform float u_dash_offset : 0.0;\\nuniform float u_dash_ratio : 0.1;\\nvarying float v_distance_ratio;\\nvarying vec2 v_dash_array;\\nvarying float v_side;\\n\\n\\n#pragma include \\\"picking\\\"\\n\\nuniform float u_time;\\nuniform vec4 u_aimate: [ 0, 2., 1.0, 0.2 ];\\n// [animate, duration, interval, trailLength],\\nvoid main() {\\n  gl_FragColor = v_color;\\n  // anti-alias\\n  float blur = 1.- smoothstep(u_blur, 1., length(v_normal.xy)) * u_opacity;\\n  // gl_FragColor.a *= blur;\\n\\n  if(u_aimate.x == Animate) {\\n      float alpha =1.0 - fract( mod(1.0- v_distance_ratio, u_aimate.z)* (1.0/ u_aimate.z) + u_time / u_aimate.y);\\n      alpha = (alpha + u_aimate.w -1.0) / u_aimate.w;\\n      gl_FragColor.a *= alpha * blur;\\n  }\\n // dash line\\n  if(u_line_type == LineTypeDash) {\\n    gl_FragColor.a *= blur  * (1.0- step(v_dash_array.x, mod(v_distance_ratio, v_dash_array.x +v_dash_array.y)));\\n  }\\n\\n  gl_FragColor = filterColor(gl_FragColor);\\n}\\n\";\nvar line_vert = \"#define LineTypeSolid 0.0\\n#define LineTypeDash 1.0\\n#define Animate 0.0\\n\\nattribute float a_Miter;\\nattribute vec4 a_Color;\\nattribute vec2 a_Size;\\nattribute vec3 a_Normal;\\nattribute vec3 a_Position;\\n\\n// dash line\\nattribute float a_Total_Distance;\\nattribute float a_Distance;\\n\\nuniform mat4 u_ModelMatrix;\\nuniform float u_line_type: 0.0;\\nuniform vec2 u_dash_array: [10.0, 5.];\\nuniform vec4 u_aimate: [ 0, 2., 1.0, 0.2 ];\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"picking\\\"\\n\\nvarying vec4 v_color;\\nvarying vec2 v_dash_array;\\nvarying vec2 v_normal;\\nvarying float v_distance_ratio;\\nvarying float v_side;\\n\\n\\nvoid main() {\\n\\n  if(u_line_type == LineTypeDash) {\\n    v_distance_ratio = a_Distance / a_Total_Distance;\\n    v_dash_array = pow(2.0, 20.0 - u_Zoom) * u_dash_array / a_Total_Distance;\\n  }\\n  if(u_aimate.x == Animate) {\\n      v_distance_ratio = a_Distance / a_Total_Distance;\\n  }\\n  v_normal = vec2(reverse_offset_normal(a_Normal) * sign(a_Miter));\\n  v_color = a_Color;\\n  vec3 size = a_Miter * a_Size.x * reverse_offset_normal(a_Normal);  //v_normal * vec3(1., -1., 1.0);\\n  vec2 offset = project_pixel(size.xy);\\n  v_side = a_Miter * a_Size.x;\\n  vec4 project_pos = project_position(vec4(a_Position.xy, 0, 1.0));\\n  gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy + offset, a_Size.y, 1.0));\\n\\n  setPickingColor(a_PickingColor);\\n}\\n\";\nvar lineStyleObj = {\n  solid: 0.0,\n  dash: 1.0\n};\n\nvar LineModel = function (_BaseModel) {\n  _inherits(LineModel, _BaseModel);\n\n  function LineModel() {\n    _classCallCheck(this, LineModel);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LineModel).apply(this, arguments));\n  }\n\n  _createClass(LineModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      var _ref = this.layer.getLayerConfig(),\n          opacity = _ref.opacity,\n          _ref$lineType = _ref.lineType,\n          lineType = _ref$lineType === void 0 ? 'solid' : _ref$lineType,\n          _ref$dashArray = _ref.dashArray,\n          dashArray = _ref$dashArray === void 0 ? [10, 5] : _ref$dashArray;\n\n      return {\n        u_opacity: opacity || 1.0,\n        u_line_type: lineStyleObj[lineType],\n        u_dash_array: dashArray\n      };\n    }\n  }, {\n    key: \"getAnimateUniforms\",\n    value: function getAnimateUniforms() {\n      var _ref2 = this.layer.getLayerConfig(),\n          animateOption = _ref2.animateOption;\n\n      return {\n        u_aimate: this.animateOption2Array(animateOption),\n        u_time: this.layer.getLayerAnimateTime()\n      };\n    }\n  }, {\n    key: \"buildModels\",\n    value: function buildModels() {\n      return [this.layer.buildLayerModel({\n        moduleName: 'line',\n        vertexShader: line_vert,\n        fragmentShader: line_frag,\n        triangulation: LineTriangulation,\n        blend: this.getBlend()\n      })];\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      var _ref3 = this.layer.getLayerConfig(),\n          _ref3$lineType = _ref3.lineType,\n          lineType = _ref3$lineType === void 0 ? 'solid' : _ref3$lineType;\n\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'distance',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Distance',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            return [vertex[3]];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'total_distance',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Total_Distance',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            return [vertex[5]];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'size',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Size',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var _feature$size = feature.size,\n                size = _feature$size === void 0 ? 1 : _feature$size;\n            return Array.isArray(size) ? [size[0], size[1]] : [size, 0];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'normal',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Normal',\n          buffer: {\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 3,\n          update: function update(feature, featureIdx, vertex, attributeIdx, normal) {\n            return normal;\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'miter',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Miter',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            return [vertex[4]];\n          }\n        }\n      });\n    }\n  }]);\n\n  return LineModel;\n}(BaseModel);\n\nexport { LineModel as default };","map":{"version":3,"sources":["../../../src/line/models/line.ts"],"names":["lineStyleObj","solid","dash","LineModel","BaseModel","opacity","lineType","dashArray","u_opacity","u_line_type","u_dash_array","animateOption","u_aimate","u_time","moduleName","vertexShader","fragmentShader","triangulation","blend","name","type","AttributeType","descriptor","buffer","usage","gl","data","FLOAT","size","update","vertex","feature","Array"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IAnimateOption,\n  IEncodeFeature,\n  ILayerConfig,\n  IModel,\n  IModelUniform,\n} from '@antv/l7-core';\n\nimport BaseModel from '../../core/BaseModel';\nimport { ILineLayerStyleOptions, lineStyleType } from '../../core/interface';\nimport { LineTriangulation } from '../../core/triangulation';\nimport line_frag from '../shaders/line_frag.glsl';\nimport line_vert from '../shaders/line_vert.glsl';\nconst lineStyleObj: { [key: string]: number } = {\n  solid: 0.0,\n  dash: 1.0,\n};\nexport default class LineModel extends BaseModel {\n  public getUninforms(): IModelUniform {\n    const {\n      opacity,\n      lineType = 'solid',\n      dashArray = [10, 5],\n    } = this.layer.getLayerConfig() as ILineLayerStyleOptions;\n    return {\n      u_opacity: opacity || 1.0,\n      u_line_type: lineStyleObj[lineType],\n      u_dash_array: dashArray,\n    };\n  }\n  public getAnimateUniforms(): IModelUniform {\n    const { animateOption } = this.layer.getLayerConfig() as ILayerConfig;\n    return {\n      u_aimate: this.animateOption2Array(animateOption as IAnimateOption),\n      u_time: this.layer.getLayerAnimateTime(),\n    };\n  }\n\n  public buildModels(): IModel[] {\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'line',\n        vertexShader: line_vert,\n        fragmentShader: line_frag,\n        triangulation: LineTriangulation,\n        blend: this.getBlend(),\n      }),\n    ];\n  }\n  protected registerBuiltinAttributes() {\n    // const lineType = this\n    // point layer size;\n    const {\n      lineType = 'solid',\n    } = this.layer.getLayerConfig() as ILineLayerStyleOptions;\n    // if (lineType === 'dash') {\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'distance',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Distance',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          return [vertex[3]];\n        },\n      },\n    });\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'total_distance',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Total_Distance',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          return [vertex[5]];\n        },\n      },\n    });\n    // }\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size = 1 } = feature;\n          return Array.isArray(size) ? [size[0], size[1]] : [size as number, 0];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'normal',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Normal',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 3,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n          normal: number[],\n        ) => {\n          return normal;\n        },\n      },\n    });\n\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'miter',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Miter',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          return [vertex[4]];\n        },\n      },\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}