{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport { AttributeType, gl } from '@antv/l7-core';\nimport BaseModel from '../../core/BaseModel';\nimport { PointImageTriangulation } from '../../core/triangulation';\nvar pointImageFrag = \"\\nuniform sampler2D u_texture;\\nvarying vec4 v_color;\\nvarying vec2 v_uv;\\nuniform vec2 u_textSize;\\nuniform float u_stroke_width : 1;\\nuniform vec4 u_stroke_color : [1, 1, 1, 1];\\nuniform float u_stroke_opacity : 1;\\nuniform float u_opacity : 1;\\n\\nvarying float v_size;\\n#pragma include \\\"picking\\\"\\nvoid main(){\\nvec2 pos= v_uv / u_textSize + gl_PointCoord / u_textSize * 64.;\\nvec2 fragmentPosition = 2.0*gl_PointCoord - 1.0;\\nfloat distance = length(fragmentPosition);\\nfloat distanceSqrd = distance * distance;\\nfloat radius = 1.;\\nfloat r = 1.0 - smoothstep(radius-(radius*0.01),\\n                         radius+(radius*0.01),\\n                         distanceSqrd);\\n  vec4 textureColor=texture2D(u_texture,pos);\\n  if(v_color == vec4(0.)){\\n        gl_FragColor= vec4(textureColor.xyz, textureColor.w * r);\\n  }else {\\n        gl_FragColor= step(0.01, textureColor.x) * v_color;\\n  }\\n  gl_FragColor = filterColor(gl_FragColor);\\n}\\n\";\nvar pointImageVert = \"\\nprecision highp float;\\nattribute vec3 a_Position;\\nattribute vec4 a_Color;\\nattribute vec2 a_Uv;\\nattribute float a_Size;\\nvarying vec4 v_color;\\nvarying vec2 v_uv;\\nuniform mat4 u_ModelMatrix;\\nuniform float u_stroke_width : 1;\\nvarying float v_size;\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n   v_color = a_Color;\\n   v_uv = a_Uv;\\n   vec4 project_pos = project_position(vec4(a_Position, 1.0));\\n   v_size = a_Size;\\n\\n   gl_Position = project_common_position_to_clipspace(vec4(project_pos.xyz, 1.0));\\n   gl_PointSize = a_Size * 2.0 * u_DevicePixelRatio;\\n   setPickingColor(a_PickingColor);\\n\\n}\\n\";\n\nvar ImageModel = function (_BaseModel) {\n  _inherits(ImageModel, _BaseModel);\n\n  function ImageModel() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ImageModel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ImageModel)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.texture = void 0;\n    return _this;\n  }\n\n  _createClass(ImageModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      var _ref = this.layer.getLayerConfig(),\n          opacity = _ref.opacity;\n\n      return {\n        u_opacity: opacity || 1.0,\n        u_texture: this.texture,\n        u_textSize: [1024, this.iconService.canvasHeight || 128]\n      };\n    }\n  }, {\n    key: \"buildModels\",\n    value: function buildModels() {\n      var _this2 = this;\n\n      this.registerBuiltinAttributes();\n      this.updateTexture();\n      this.iconService.on('imageUpdate', function () {\n        _this2.updateTexture();\n\n        _this2.layer.render();\n      });\n      return [this.layer.buildLayerModel({\n        moduleName: 'pointImage',\n        vertexShader: pointImageVert,\n        fragmentShader: pointImageFrag,\n        triangulation: PointImageTriangulation,\n        primitive: gl.POINTS,\n        depth: {\n          enable: false\n        },\n        blend: this.getBlend()\n      })];\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      var _this3 = this;\n\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'size',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Size',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var size = feature.size;\n            return Array.isArray(size) ? [size[0]] : [size];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'uv',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Uv',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var iconMap = _this3.iconService.getIconMap();\n\n            var shape = feature.shape;\n\n            var _ref2 = iconMap[shape] || {\n              x: 0,\n              y: 0\n            },\n                x = _ref2.x,\n                y = _ref2.y;\n\n            return [x, y];\n          }\n        }\n      });\n    }\n  }, {\n    key: \"updateTexture\",\n    value: function updateTexture() {\n      var createTexture2D = this.rendererService.createTexture2D;\n      this.texture = createTexture2D({\n        data: this.iconService.getCanvas(),\n        mag: gl.LINEAR,\n        min: gl.LINEAR,\n        width: 1024,\n        height: this.iconService.canvasHeight || 128\n      });\n    }\n  }]);\n\n  return ImageModel;\n}(BaseModel);\n\nexport { ImageModel as default };","map":{"version":3,"sources":["../../../src/point/models/image.ts"],"names":["ImageModel","BaseModel","texture","opacity","u_opacity","u_texture","u_textSize","moduleName","vertexShader","fragmentShader","triangulation","primitive","gl","depth","enable","blend","name","type","AttributeType","descriptor","buffer","usage","data","FLOAT","size","update","feature","Array","iconMap","shape","x","y","createTexture2D","mag","min","width","height"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IEncodeFeature,\n  IModel,\n  IModelUniform,\n  ITexture2D,\n} from '@antv/l7-core';\n\nimport BaseModel from '../../core/BaseModel';\nimport { PointImageTriangulation } from '../../core/triangulation';\nimport pointImageFrag from '../shaders/image_frag.glsl';\nimport pointImageVert from '../shaders/image_vert.glsl';\ninterface IImageLayerStyleOptions {\n  opacity: number;\n}\n\nexport default class ImageModel extends BaseModel {\n  private texture: ITexture2D;\n\n  public getUninforms(): IModelUniform {\n    const { opacity } = this.layer.getLayerConfig() as IImageLayerStyleOptions;\n    return {\n      u_opacity: opacity || 1.0,\n      u_texture: this.texture,\n      u_textSize: [1024, this.iconService.canvasHeight || 128],\n    };\n  }\n\n  public buildModels(): IModel[] {\n    this.registerBuiltinAttributes();\n    this.updateTexture();\n    this.iconService.on('imageUpdate', () => {\n      this.updateTexture();\n      this.layer.render(); // TODO 调用全局render\n    });\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'pointImage',\n        vertexShader: pointImageVert,\n        fragmentShader: pointImageFrag,\n        triangulation: PointImageTriangulation,\n        primitive: gl.POINTS,\n        depth: { enable: false },\n        blend: this.getBlend(),\n      }),\n    ];\n  }\n\n  protected registerBuiltinAttributes() {\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size } = feature;\n          return Array.isArray(size) ? [size[0]] : [size as number];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'uv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Uv',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const iconMap = this.iconService.getIconMap();\n\n          const { shape } = feature;\n          const { x, y } = iconMap[shape as string] || { x: 0, y: 0 };\n          return [x, y];\n        },\n      },\n    });\n  }\n\n  private updateTexture() {\n    const { createTexture2D } = this.rendererService;\n    this.texture = createTexture2D({\n      data: this.iconService.getCanvas(),\n      mag: gl.LINEAR,\n      min: gl.LINEAR,\n      width: 1024,\n      height: this.iconService.canvasHeight || 128,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}