{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar _dec, _class, _temp;\n\nimport { injectable } from 'inversify';\nimport { TYPES } from '../../types';\nvar MarkerService = (_dec = injectable(), _dec(_class = (_temp = function () {\n  function MarkerService() {\n    _classCallCheck(this, MarkerService);\n\n    this.container = void 0;\n    this.scene = void 0;\n    this.mapsService = void 0;\n    this.markers = [];\n    this.markerLayers = [];\n    this.unAddMarkers = [];\n    this.unAddMarkerLayers = [];\n  }\n\n  _createClass(MarkerService, [{\n    key: \"addMarkerLayer\",\n    value: function addMarkerLayer(markerLayer) {\n      if (this.mapsService.map && this.mapsService.getMarkerContainer()) {\n        this.markerLayers.push(markerLayer);\n        markerLayer.addTo(this.scene);\n      } else {\n        this.unAddMarkerLayers.push(markerLayer);\n      }\n    }\n  }, {\n    key: \"removeMarkerLayer\",\n    value: function removeMarkerLayer(layer) {\n      layer.destroy();\n      this.markerLayers.indexOf(layer);\n      var markerIndex = this.markerLayers.indexOf(layer);\n\n      if (markerIndex > -1) {\n        this.markerLayers.splice(markerIndex, 1);\n      }\n    }\n  }, {\n    key: \"addMarker\",\n    value: function addMarker(marker) {\n      if (this.mapsService.map && this.mapsService.getMarkerContainer()) {\n        this.markers.push(marker);\n        marker.addTo(this.scene);\n      } else {\n        this.unAddMarkers.push(marker);\n      }\n    }\n  }, {\n    key: \"addMarkers\",\n    value: function addMarkers() {\n      var _this = this;\n\n      this.unAddMarkers.forEach(function (marker) {\n        marker.addTo(_this.scene);\n\n        _this.markers.push(marker);\n      });\n      this.unAddMarkers = [];\n    }\n  }, {\n    key: \"addMarkerLayers\",\n    value: function addMarkerLayers() {\n      var _this2 = this;\n\n      this.unAddMarkerLayers.forEach(function (markerLayer) {\n        _this2.markerLayers.push(markerLayer);\n\n        markerLayer.addTo(_this2.scene);\n      });\n      this.unAddMarkers = [];\n    }\n  }, {\n    key: \"removeMarker\",\n    value: function removeMarker(marker) {\n      marker.remove();\n      this.markers.indexOf(marker);\n      var markerIndex = this.markers.indexOf(marker);\n\n      if (markerIndex > -1) {\n        this.markers.splice(markerIndex, 1);\n      }\n    }\n  }, {\n    key: \"removeAllMarkers\",\n    value: function removeAllMarkers() {\n      this.destroy();\n    }\n  }, {\n    key: \"init\",\n    value: function init(scene) {\n      this.scene = scene;\n      this.mapsService = scene.get(TYPES.IMapService);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.markers.forEach(function (marker) {\n        marker.remove();\n      });\n      this.markers = [];\n      this.markerLayers.forEach(function (layer) {\n        layer.destroy();\n      });\n      this.markerLayers = [];\n    }\n  }, {\n    key: \"removeMakerLayerMarker\",\n    value: function removeMakerLayerMarker(layer) {\n      layer.destroy();\n    }\n  }]);\n\n  return MarkerService;\n}(), _temp)) || _class);\nexport { MarkerService as default };","map":{"version":3,"sources":["../../../src/services/component/MarkerService.ts"],"names":["injectable","MarkerService","container","scene","mapsService","markers","markerLayers","unAddMarkers","unAddMarkerLayers","markerLayer","layer","markerIndex","marker","TYPES"],"mappings":"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","sourcesContent":["import { Container, injectable } from 'inversify';\nimport { TYPES } from '../../types';\nimport { IMapService } from '../map/IMapService';\nimport {\n  IMarker,\n  IMarkerLayer,\n  IMarkerService,\n  IMarkerServiceCfg,\n} from './IMarkerService';\n\n@injectable()\nexport default class MarkerService implements IMarkerService {\n  public container: HTMLElement;\n  private scene: Container;\n  private mapsService: IMapService;\n  private markers: IMarker[] = [];\n  private markerLayers: IMarkerLayer[] = [];\n  private unAddMarkers: IMarker[] = [];\n  private unAddMarkerLayers: IMarkerLayer[] = [];\n\n  public addMarkerLayer(markerLayer: IMarkerLayer): void {\n    if (this.mapsService.map && this.mapsService.getMarkerContainer()) {\n      this.markerLayers.push(markerLayer);\n      markerLayer.addTo(this.scene);\n    } else {\n      this.unAddMarkerLayers.push(markerLayer);\n    }\n  }\n\n  public removeMarkerLayer(layer: IMarkerLayer): void {\n    layer.destroy();\n    this.markerLayers.indexOf(layer);\n    const markerIndex = this.markerLayers.indexOf(layer);\n    if (markerIndex > -1) {\n      this.markerLayers.splice(markerIndex, 1);\n    }\n  }\n\n  public addMarker(marker: IMarker): void {\n    if (this.mapsService.map && this.mapsService.getMarkerContainer()) {\n      this.markers.push(marker);\n      marker.addTo(this.scene);\n    } else {\n      this.unAddMarkers.push(marker);\n    }\n  }\n\n  public addMarkers(): void {\n    this.unAddMarkers.forEach((marker: IMarker) => {\n      marker.addTo(this.scene);\n      this.markers.push(marker);\n    });\n    this.unAddMarkers = [];\n  }\n\n  public addMarkerLayers(): void {\n    this.unAddMarkerLayers.forEach((markerLayer: IMarkerLayer) => {\n      this.markerLayers.push(markerLayer);\n      markerLayer.addTo(this.scene);\n    });\n    this.unAddMarkers = [];\n  }\n\n  public removeMarker(marker: IMarker): void {\n    marker.remove();\n    this.markers.indexOf(marker);\n    const markerIndex = this.markers.indexOf(marker);\n    if (markerIndex > -1) {\n      this.markers.splice(markerIndex, 1);\n    }\n  }\n\n  public removeAllMarkers(): void {\n    this.destroy();\n  }\n\n  public init(scene: Container): void {\n    // this.container = cfg.container;\n    this.scene = scene;\n    this.mapsService = scene.get<IMapService>(TYPES.IMapService);\n  }\n  public destroy(): void {\n    this.markers.forEach((marker: IMarker) => {\n      marker.remove();\n    });\n    this.markers = [];\n    this.markerLayers.forEach((layer: IMarkerLayer) => {\n      layer.destroy();\n    });\n    this.markerLayers = [];\n  }\n\n  private removeMakerLayerMarker(layer: IMarkerLayer) {\n    layer.destroy();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}