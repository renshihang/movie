{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar _dec, _class;\n\nimport { injectable } from 'inversify';\nimport { Log } from 'probe.gl';\nvar Logger = new Log({\n  id: 'L7'\n}).enable(false);\nLogger.priority = 5;\nvar LogService = (_dec = injectable(), _dec(_class = function () {\n  function LogService() {\n    _classCallCheck(this, LogService);\n  }\n\n  _createClass(LogService, [{\n    key: \"error\",\n    value: function error(message) {\n      Logger.error(message)();\n    }\n  }, {\n    key: \"warn\",\n    value: function warn(message) {\n      Logger.warn(message)();\n    }\n  }, {\n    key: \"info\",\n    value: function info(message) {\n      Logger.info(3, message)();\n    }\n  }, {\n    key: \"debug\",\n    value: function debug(message) {\n      Logger.probe(4, message)();\n    }\n  }]);\n\n  return LogService;\n}()) || _class);\nexport { LogService as default };","map":{"version":3,"sources":["../../../src/services/log/LogService.ts"],"names":["Logger","id","injectable","LogService","message"],"mappings":";;;;;AAAA,SAAA,UAAA,QAAA,WAAA;AACA,SAAA,GAAA,QAAA,UAAA;AAEA,IAAMA,MAAM,GAAG,IAAA,GAAA,CAAQ;AAAEC,EAAAA,EAAE,EAAE;AAAN,CAAR,EAAA,MAAA,CAAf,KAAe,CAAf;AAEAD,MAAM,CAANA,QAAAA,GAAAA,CAAAA;IAGqBG,U,WADpBD,UAAU,E;;;;;;;0BAEIE,O,EAAuB;AAClCJ,MAAAA,MAAM,CAANA,KAAAA,CAAAA,OAAAA;AACD;;;yBAEWI,O,EAAuB;AACjCJ,MAAAA,MAAM,CAANA,IAAAA,CAAAA,OAAAA;AACD;;;yBAEWI,O,EAAuB;AACjCJ,MAAAA,MAAM,CAANA,IAAAA,CAAAA,CAAAA,EAAAA,OAAAA;AACD;;;0BAEYI,O,EAAuB;AAClCJ,MAAAA,MAAM,CAANA,KAAAA,CAAAA,CAAAA,EAAAA,OAAAA;AACD;;;;;SAfkBG,U","sourcesContent":["import { injectable } from 'inversify';\nimport Probe, { Log } from 'probe.gl';\nimport { ILogService } from './ILogService';\nconst Logger = new Log({ id: 'L7' }).enable(false);\n// // 只输出 debug 级别以上的日志信息\nLogger.priority = 5;\n\n@injectable()\nexport default class LogService implements ILogService {\n  public error(message: string): void {\n    Logger.error(message)();\n  }\n\n  public warn(message: string): void {\n    Logger.warn(message)();\n  }\n\n  public info(message: string): void {\n    Logger.info(3, message)();\n  }\n\n  public debug(message: string): void {\n    Logger.probe(4, message)();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}