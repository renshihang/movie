{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _class, _class2, _descriptor, _temp;\n\nimport { inject, injectable } from 'inversify';\nimport { TYPES } from '../../../types';\nimport { PassType } from '../IMultiPassRenderer';\nvar MultiPassRenderer = (_dec = injectable(), _dec2 = inject(TYPES.IPostProcessor), _dec(_class = (_class2 = (_temp = function () {\n  function MultiPassRenderer() {\n    _classCallCheck(this, MultiPassRenderer);\n\n    this.passes = [];\n\n    _initializerDefineProperty(this, \"postProcessor\", _descriptor, this);\n\n    this.layer = void 0;\n    this.renderFlag = void 0;\n  }\n\n  _createClass(MultiPassRenderer, [{\n    key: \"setLayer\",\n    value: function setLayer(layer) {\n      this.layer = layer;\n    }\n  }, {\n    key: \"setRenderFlag\",\n    value: function setRenderFlag(renderFlag) {\n      this.renderFlag = renderFlag;\n    }\n  }, {\n    key: \"getRenderFlag\",\n    value: function getRenderFlag() {\n      return this.renderFlag;\n    }\n  }, {\n    key: \"getPostProcessor\",\n    value: function getPostProcessor() {\n      return this.postProcessor;\n    }\n  }, {\n    key: \"render\",\n    value: function () {\n      var _render = _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {\n        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, pass;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _iteratorError = undefined;\n                _context.prev = 3;\n                _iterator = this.passes[Symbol.iterator]();\n\n              case 5:\n                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n                  _context.next = 12;\n                  break;\n                }\n\n                pass = _step.value;\n                _context.next = 9;\n                return pass.render(this.layer);\n\n              case 9:\n                _iteratorNormalCompletion = true;\n                _context.next = 5;\n                break;\n\n              case 12:\n                _context.next = 18;\n                break;\n\n              case 14:\n                _context.prev = 14;\n                _context.t0 = _context[\"catch\"](3);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n\n              case 18:\n                _context.prev = 18;\n                _context.prev = 19;\n\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n\n              case 21:\n                _context.prev = 21;\n\n                if (!_didIteratorError) {\n                  _context.next = 24;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 24:\n                return _context.finish(21);\n\n              case 25:\n                return _context.finish(18);\n\n              case 26:\n                _context.next = 28;\n                return this.postProcessor.render(this.layer);\n\n              case 28:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 14, 18, 26], [19,, 21, 25]]);\n      }));\n\n      function render() {\n        return _render.apply(this, arguments);\n      }\n\n      return render;\n    }()\n  }, {\n    key: \"resize\",\n    value: function resize(width, height) {\n      this.postProcessor.resize(width, height);\n    }\n  }, {\n    key: \"add\",\n    value: function add(pass, config) {\n      if (pass.getType() === PassType.PostProcessing) {\n        this.postProcessor.add(pass, this.layer, config);\n      } else {\n        pass.init(this.layer, config);\n        this.passes.push(pass);\n      }\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(pass, config, index) {\n      pass.init(this.layer, config);\n      this.passes.splice(index, 0, pass);\n    }\n  }]);\n\n  return MultiPassRenderer;\n}(), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"postProcessor\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2)) || _class);\nexport { MultiPassRenderer as default };","map":{"version":3,"sources":["../../../../src/services/renderer/passes/MultiPassRenderer.ts"],"names":["injectable","MultiPassRenderer","passes","inject","TYPES","layer","renderFlag","pass","width","height","config","PassType","index"],"mappings":";;;;;;;;;;AAAA,SAAA,MAAA,EAAA,UAAA,QAAA,WAAA;AACA,SAAA,KAAA,QAAA,gBAAA;AAEA,SAAA,QAAA,QAAA,uBAAA;IA4BqBC,iB,WADpBD,UAAU,E,UAIRG,MAAM,CAACC,KAAK,CAAN,cAAA,C;;;;SAFCF,M,GAAgC,E;;;;SAKhCG,K;SACAC,U;;;;;6BAEQD,K,EAAe;AAC7B,WAAA,KAAA,GAAA,KAAA;AACD;;;kCAEoBC,U,EAAqB;AACxC,WAAA,UAAA,GAAA,UAAA;AACD;;;oCAEsB;AACrB,aAAO,KAAP,UAAA;AACD;;;uCAEyB;AACxB,aAAO,KAAP,aAAA;AACD;;;;;;;;;;;;;;;4BAGoB,KAAKJ,MAAL,C,eAAA,G;;;;;;;;AAARK,gBAAAA,I,cAAAA;;uBACHA,IAAI,CAAJA,MAAAA,CAAY,KAAZA,KAAAA,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAEF,KAAA,aAAA,CAAA,MAAA,CAA0B,KAA1B,KAAA,C;;;;;;;;;;;;;;;;;;2BAGMC,K,EAAeC,M,EAAgB;AAC3C,WAAA,aAAA,CAAA,MAAA,CAAA,KAAA,EAAA,MAAA;AACD;;;wBAEaF,I,EAAgBG,M,EAAqB;AACjD,UAAIH,IAAI,CAAJA,OAAAA,OAAmBI,QAAQ,CAA/B,cAAA,EAAgD;AAC9C,aAAA,aAAA,CAAA,GAAA,CAAA,IAAA,EAEE,KAFF,KAAA,EAAA,MAAA;AADF,OAAA,MAMO;AACLJ,QAAAA,IAAI,CAAJA,IAAAA,CAAU,KAAVA,KAAAA,EAAAA,MAAAA;AACA,aAAA,MAAA,CAAA,IAAA,CAAA,IAAA;AACD;AACF;;;2BAEgBA,I,EAAgBG,M,EAAoBE,K,EAAe;AAClEL,MAAAA,IAAI,CAAJA,IAAAA,CAAU,KAAVA,KAAAA,EAAAA,MAAAA;AACA,WAAA,MAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA,EAAA,IAAA;AACD;;;;;;;;;;SApDkBN,iB","sourcesContent":["import { inject, injectable } from 'inversify';\nimport { TYPES } from '../../../types';\nimport { ILayer } from '../../layer/ILayerService';\nimport {\n  IMultiPassRenderer,\n  IPass,\n  IPostProcessingPass,\n  IPostProcessor,\n  PassType,\n} from '../IMultiPassRenderer';\n\n/**\n * ported from Three.js EffectComposer\n * @example\n * const renderer = new MultiPassRenderer([\n *   new ClearPass(),\n *   new RenderPass({\n *     models: [\n *       new Model(),\n *       new Model(),\n *     ],\n *   }),\n *   new CopyPass({\n *     renderToScreen: true,\n *   }),\n *   new TAAPass(),\n * ]);\n * renderer.render();\n * @see https://yuque.antfin-inc.com/yuqi.pyq/fgetpa/apuvbf#dRM8W\n */\n@injectable()\nexport default class MultiPassRenderer implements IMultiPassRenderer {\n  private passes: Array<IPass<unknown>> = [];\n\n  @inject(TYPES.IPostProcessor)\n  private postProcessor: IPostProcessor;\n\n  private layer: ILayer;\n  private renderFlag: boolean;\n\n  public setLayer(layer: ILayer) {\n    this.layer = layer;\n  }\n\n  public setRenderFlag(renderFlag: boolean) {\n    this.renderFlag = renderFlag;\n  }\n\n  public getRenderFlag() {\n    return this.renderFlag;\n  }\n\n  public getPostProcessor() {\n    return this.postProcessor;\n  }\n\n  public async render() {\n    for (const pass of this.passes) {\n      await pass.render(this.layer);\n    }\n    await this.postProcessor.render(this.layer);\n  }\n\n  public resize(width: number, height: number) {\n    this.postProcessor.resize(width, height);\n  }\n\n  public add<T>(pass: IPass<T>, config?: Partial<T>) {\n    if (pass.getType() === PassType.PostProcessing) {\n      this.postProcessor.add<T>(\n        pass as IPostProcessingPass<T>,\n        this.layer,\n        config,\n      );\n    } else {\n      pass.init(this.layer, config);\n      this.passes.push(pass);\n    }\n  }\n\n  public insert<T>(pass: IPass<T>, config: Partial<T>, index: number) {\n    pass.init(this.layer, config);\n    this.passes.splice(index, 0, pass);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}