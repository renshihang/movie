{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { generateColorRamp } from '@antv/l7-utils';\nimport BaseModel from '../../core/BaseModel';\nimport { RasterImageTriangulation } from '../../core/triangulation';\nvar rasterFrag = \"precision mediump float;\\nuniform float u_opacity: 1.0;\\nuniform sampler2D u_texture;\\nuniform sampler2D u_colorTexture;\\nuniform float u_min;\\nuniform float u_max;\\nuniform vec2 u_domain;\\nuniform float u_noDataValue;\\nuniform bool u_clampLow: true;\\nuniform bool u_clampHigh: true;\\nvarying vec2 v_texCoord;\\n\\nvoid main() {\\n\\n  float value = texture2D(u_texture,vec2(v_texCoord.x,v_texCoord.y)).r;\\n  if (value == u_noDataValue)\\n    gl_FragColor = vec4(0.0, 0, 0, 0.0);\\n  else if ((!u_clampLow && value < u_domain[0]) || (!u_clampHigh && value > u_domain[1]))\\n    gl_FragColor = vec4(0, 0, 0, 0);\\n  else {\\n    float normalisedValue =(value - u_domain[0]) / (u_domain[1] -u_domain[0]);\\n    vec2 ramp_pos = vec2(\\n        fract(16.0 * (1.0 - normalisedValue)),\\n        floor(16.0 * (1.0 - normalisedValue)) / 16.0);\\n    gl_FragColor = texture2D(u_colorTexture, ramp_pos);\\n  }\\n\\n\\n}\\n\";\nvar rasterVert = \"precision highp float;\\nuniform mat4 u_ModelMatrix;\\nattribute vec3 a_Position;\\nattribute vec2 a_Uv;\\nvarying vec2 v_texCoord;\\n#pragma include \\\"projection\\\"\\nvoid main() {\\n   v_texCoord = a_Uv;\\n   vec4 project_pos = project_position(vec4(a_Position, 1.0));\\n   gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy,0., 1.0));\\n}\\n\";\n\nvar RasterModel = function (_BaseModel) {\n  _inherits(RasterModel, _BaseModel);\n\n  function RasterModel() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, RasterModel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RasterModel)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.texture = void 0;\n    _this.colorTexture = void 0;\n    return _this;\n  }\n\n  _createClass(RasterModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      var _ref = this.layer.getLayerConfig(),\n          _ref$opacity = _ref.opacity,\n          opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,\n          _ref$clampLow = _ref.clampLow,\n          clampLow = _ref$clampLow === void 0 ? true : _ref$clampLow,\n          _ref$clampHigh = _ref.clampHigh,\n          clampHigh = _ref$clampHigh === void 0 ? true : _ref$clampHigh,\n          _ref$noDataValue = _ref.noDataValue,\n          noDataValue = _ref$noDataValue === void 0 ? -9999999 : _ref$noDataValue,\n          _ref$domain = _ref.domain,\n          domain = _ref$domain === void 0 ? [0, 1] : _ref$domain;\n\n      this.updateColorTexure();\n      return {\n        u_opacity: opacity || 1,\n        u_texture: this.texture,\n        u_domain: domain,\n        u_clampLow: clampLow,\n        u_clampHigh: typeof clampHigh !== 'undefined' ? clampHigh : clampLow,\n        u_noDataValue: noDataValue,\n        u_colorTexture: this.colorTexture\n      };\n    }\n  }, {\n    key: \"buildModels\",\n    value: function buildModels() {\n      var source = this.layer.getSource();\n      var createTexture2D = this.rendererService.createTexture2D;\n      var parserDataItem = source.data.dataArray[0];\n      this.texture = createTexture2D({\n        data: parserDataItem.data,\n        width: parserDataItem.width,\n        height: parserDataItem.height,\n        format: gl.LUMINANCE,\n        type: gl.FLOAT\n      });\n\n      var _ref2 = this.layer.getLayerConfig(),\n          rampColors = _ref2.rampColors;\n\n      var imageData = generateColorRamp(rampColors);\n      this.colorTexture = createTexture2D({\n        data: imageData.data,\n        width: imageData.width,\n        height: imageData.height,\n        flipY: true\n      });\n      return [this.layer.buildLayerModel({\n        moduleName: 'RasterImageData',\n        vertexShader: rasterVert,\n        fragmentShader: rasterFrag,\n        triangulation: RasterImageTriangulation,\n        primitive: gl.TRIANGLES,\n        depth: {\n          enable: false\n        },\n        blend: this.getBlend()\n      })];\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'uv',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Uv',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            return [vertex[3], vertex[4]];\n          }\n        }\n      });\n    }\n  }, {\n    key: \"updateColorTexure\",\n    value: function updateColorTexure() {\n      var createTexture2D = this.rendererService.createTexture2D;\n\n      var _ref3 = this.layer.getLayerConfig(),\n          rampColors = _ref3.rampColors;\n\n      var imageData = generateColorRamp(rampColors);\n      this.colorTexture = createTexture2D({\n        data: imageData.data,\n        width: imageData.width,\n        height: imageData.height,\n        flipY: true\n      });\n    }\n  }]);\n\n  return RasterModel;\n}(BaseModel);\n\nexport { RasterModel as default };","map":{"version":3,"sources":["../../../src/raster/models/raster.ts"],"names":["RasterModel","BaseModel","texture","colorTexture","opacity","clampLow","clampHigh","noDataValue","domain","u_opacity","u_texture","u_domain","u_clampLow","u_clampHigh","u_noDataValue","u_colorTexture","source","createTexture2D","parserDataItem","data","width","height","format","gl","type","FLOAT","rampColors","imageData","generateColorRamp","flipY","moduleName","vertexShader","fragmentShader","triangulation","primitive","depth","enable","blend","name","AttributeType","descriptor","buffer","usage","size","update","vertex"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IEncodeFeature,\n  ILayer,\n  ILayerPlugin,\n  ILogService,\n  IModel,\n  IModelUniform,\n  IRasterParserDataItem,\n  IStyleAttributeService,\n  ITexture2D,\n  lazyInject,\n  TYPES,\n} from '@antv/l7-core';\nimport { generateColorRamp, IColorRamp } from '@antv/l7-utils';\nimport BaseModel from '../../core/BaseModel';\nimport { RasterImageTriangulation } from '../../core/triangulation';\nimport rasterFrag from '../shaders/raster_2d_frag.glsl';\nimport rasterVert from '../shaders/raster_2d_vert.glsl';\n\ninterface IRasterLayerStyleOptions {\n  opacity: number;\n  domain: [number, number];\n  noDataValue: number;\n  clampLow: boolean;\n  clampHigh: boolean;\n  rampColors: IColorRamp;\n}\nexport default class RasterModel extends BaseModel {\n  protected texture: ITexture2D;\n  protected colorTexture: ITexture2D;\n  public getUninforms() {\n    const {\n      opacity = 1,\n      clampLow = true,\n      clampHigh = true,\n      noDataValue = -9999999,\n      domain = [0, 1],\n    } = this.layer.getLayerConfig() as IRasterLayerStyleOptions;\n    this.updateColorTexure();\n    return {\n      u_opacity: opacity || 1,\n      u_texture: this.texture,\n      u_domain: domain,\n      u_clampLow: clampLow,\n      u_clampHigh: typeof clampHigh !== 'undefined' ? clampHigh : clampLow,\n      u_noDataValue: noDataValue,\n      u_colorTexture: this.colorTexture,\n    };\n  }\n\n  public buildModels() {\n    const source = this.layer.getSource();\n    const { createTexture2D } = this.rendererService;\n    const parserDataItem = source.data.dataArray[0];\n    this.texture = createTexture2D({\n      data: parserDataItem.data,\n      width: parserDataItem.width,\n      height: parserDataItem.height,\n      format: gl.LUMINANCE,\n      type: gl.FLOAT,\n      // aniso: 4,\n    });\n    const {\n      rampColors,\n    } = this.layer.getLayerConfig() as IRasterLayerStyleOptions;\n    const imageData = generateColorRamp(rampColors as IColorRamp);\n    this.colorTexture = createTexture2D({\n      data: imageData.data,\n      width: imageData.width,\n      height: imageData.height,\n      flipY: true,\n    });\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'RasterImageData',\n        vertexShader: rasterVert,\n        fragmentShader: rasterFrag,\n        triangulation: RasterImageTriangulation,\n        primitive: gl.TRIANGLES,\n        depth: { enable: false },\n        blend: this.getBlend(),\n      }),\n    ];\n  }\n\n  protected registerBuiltinAttributes() {\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'uv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Uv',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          return [vertex[3], vertex[4]];\n        },\n      },\n    });\n  }\n\n  private updateColorTexure() {\n    const { createTexture2D } = this.rendererService;\n    const {\n      rampColors,\n    } = this.layer.getLayerConfig() as IRasterLayerStyleOptions;\n    const imageData = generateColorRamp(rampColors as IColorRamp);\n    this.colorTexture = createTexture2D({\n      data: imageData.data,\n      width: imageData.width,\n      height: imageData.height,\n      flipY: true,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}