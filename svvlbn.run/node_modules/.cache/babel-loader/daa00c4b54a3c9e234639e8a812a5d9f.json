{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport { AttributeType, gl } from '@antv/l7-core';\nimport BaseModel from '../../core/BaseModel';\nimport { RasterImageTriangulation } from '../../core/triangulation';\nvar ImageFrag = \"precision mediump float;\\nuniform float u_opacity: 1.0;\\nuniform sampler2D u_texture;\\nvarying vec2 v_texCoord;\\nvoid main() {\\n  vec4 color = texture2D(u_texture,vec2(v_texCoord.x,v_texCoord.y));\\n  gl_FragColor = color;\\n}\\n\";\nvar ImageVert = \"precision highp float;\\nuniform mat4 u_ModelMatrix;\\nattribute vec3 a_Position;\\nattribute vec2 a_Uv;\\nvarying vec2 v_texCoord;\\n#pragma include \\\"projection\\\"\\nvoid main() {\\n   v_texCoord = a_Uv;\\n   vec4 project_pos = project_position(vec4(a_Position, 1.0));\\n   gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy,0., 1.0));\\n}\\n\";\n\nvar ImageModel = function (_BaseModel) {\n  _inherits(ImageModel, _BaseModel);\n\n  function ImageModel() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ImageModel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ImageModel)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.texture = void 0;\n    return _this;\n  }\n\n  _createClass(ImageModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      var _ref = this.layer.getLayerConfig(),\n          opacity = _ref.opacity;\n\n      return {\n        u_opacity: opacity || 1,\n        u_texture: this.texture\n      };\n    }\n  }, {\n    key: \"buildModels\",\n    value: function buildModels() {\n      var _this2 = this;\n\n      var source = this.layer.getSource();\n      var createTexture2D = this.rendererService.createTexture2D;\n      this.texture = createTexture2D({\n        height: 0,\n        width: 0\n      });\n      source.data.images.then(function (imageData) {\n        _this2.texture = createTexture2D({\n          data: imageData[0],\n          width: imageData[0].width,\n          height: imageData[0].height\n        });\n\n        _this2.layerService.renderLayers();\n      });\n      return [this.layer.buildLayerModel({\n        moduleName: 'RasterImage',\n        vertexShader: ImageVert,\n        fragmentShader: ImageFrag,\n        triangulation: RasterImageTriangulation,\n        primitive: gl.TRIANGLES,\n        depth: {\n          enable: false\n        },\n        blend: this.getBlend()\n      })];\n    }\n  }, {\n    key: \"getConfigSchema\",\n    value: function getConfigSchema() {\n      return {\n        properties: {\n          opacity: {\n            type: 'number',\n            minimum: 0,\n            maximum: 1\n          }\n        }\n      };\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'uv',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Uv',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            return [vertex[3], vertex[4]];\n          }\n        }\n      });\n    }\n  }]);\n\n  return ImageModel;\n}(BaseModel);\n\nexport { ImageModel as default };","map":{"version":3,"sources":["../../../src/image/models/image.ts"],"names":["ImageModel","BaseModel","texture","opacity","u_opacity","u_texture","source","createTexture2D","height","width","data","imageData","moduleName","vertexShader","fragmentShader","triangulation","primitive","gl","depth","enable","blend","properties","type","minimum","maximum","name","AttributeType","descriptor","buffer","usage","FLOAT","size","update","vertex"],"mappings":";;;;;AAAA,SAAA,aAAA,EAAA,EAAA,QAAA,eAAA;AAgBA,OAAA,SAAA,MAAA,sBAAA;AACA,SAAA,wBAAA,QAAA,0BAAA;;;;IAOqBA,U;;;;;;;;;;;;;;;UACTE,O;;;;;;mCAC2B;AAAA,UAAA,IAAA,GACf,KAAA,KAAA,CADe,cACf,EADe;AAAA,UAC3BC,OAD2B,GAAA,IAAA,CAAA,OAAA;;AAEnC,aAAO;AACLC,QAAAA,SAAS,EAAED,OAAO,IADb,CAAA;AAELE,QAAAA,SAAS,EAAE,KAAKH;AAFX,OAAP;AAID;;;kCACoB;AAAA,UAAA,MAAA,GAAA,IAAA;;AACnB,UAAMI,MAAM,GAAG,KAAA,KAAA,CAAf,SAAe,EAAf;AADmB,UAEXC,eAFW,GAES,KAFT,eAES,CAFT,eAAA;AAGnB,WAAA,OAAA,GAAeA,eAAe,CAAC;AAC7BC,QAAAA,MAAM,EADuB,CAAA;AAE7BC,QAAAA,KAAK,EAAE;AAFsB,OAAD,CAA9B;AAIAH,MAAAA,MAAM,CAANA,IAAAA,CAAAA,MAAAA,CAAAA,IAAAA,CAAwB,UAAA,SAAA,EAAmC;AACzD,QAAA,MAAI,CAAJ,OAAA,GAAeC,eAAe,CAAC;AAC7BG,UAAAA,IAAI,EAAEC,SAAS,CADc,CACd,CADc;AAE7BF,UAAAA,KAAK,EAAEE,SAAS,CAATA,CAAS,CAATA,CAFsB,KAAA;AAG7BH,UAAAA,MAAM,EAAEG,SAAS,CAATA,CAAS,CAATA,CAAaH;AAHQ,SAAD,CAA9B;;AAKA,QAAA,MAAI,CAAJ,YAAA,CAAA,YAAA;AANFF,OAAAA;AAQA,aAAO,CACL,KAAA,KAAA,CAAA,eAAA,CAA2B;AACzBM,QAAAA,UAAU,EADe,aAAA;AAEzBC,QAAAA,YAAY,EAFa,SAAA;AAGzBC,QAAAA,cAAc,EAHW,SAAA;AAIzBC,QAAAA,aAAa,EAJY,wBAAA;AAKzBC,QAAAA,SAAS,EAAEC,EAAE,CALY,SAAA;AAMzBC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAE;AAAV,SANkB;AAOzBC,QAAAA,KAAK,EAAE,KAAA,QAAA;AAPkB,OAA3B,CADK,CAAP;AAWD;;;sCAE2B;AAC1B,aAAO;AACLC,QAAAA,UAAU,EAAE;AACVlB,UAAAA,OAAO,EAAE;AACPmB,YAAAA,IAAI,EADG,QAAA;AAEPC,YAAAA,OAAO,EAFA,CAAA;AAGPC,YAAAA,OAAO,EAAE;AAHF;AADC;AADP,OAAP;AASD;;;gDAEqC;AAEpC,WAAA,qBAAA,CAAA,sBAAA,CAAkD;AAChDC,QAAAA,IAAI,EAD4C,IAAA;AAEhDH,QAAAA,IAAI,EAAEI,aAAa,CAF6B,SAAA;AAGhDC,QAAAA,UAAU,EAAE;AACVF,UAAAA,IAAI,EADM,MAAA;AAEVG,UAAAA,MAAM,EAAE;AAENC,YAAAA,KAAK,EAAEZ,EAAE,CAFH,YAAA;AAGNP,YAAAA,IAAI,EAHE,EAAA;AAINY,YAAAA,IAAI,EAAEL,EAAE,CAACa;AAJH,WAFE;AAQVC,UAAAA,IAAI,EARM,CAAA;AASVC,UAAAA,MAAM,EAAE,SAAA,MAAA,CAAA,OAAA,EAAA,UAAA,EAAA,MAAA,EAAA,YAAA,EAKH;AACH,mBAAO,CAACC,MAAM,CAAP,CAAO,CAAP,EAAYA,MAAM,CAAzB,CAAyB,CAAlB,CAAP;AACD;AAhBS;AAHoC,OAAlD;AAsBD;;;;EAzEqChC,S;;SAAnBD,U","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IEncodeFeature,\n  ILayer,\n  ILayerPlugin,\n  ILogService,\n  IModel,\n  IModelUniform,\n  IRasterParserDataItem,\n  IStyleAttributeService,\n  ITexture2D,\n  lazyInject,\n  TYPES,\n} from '@antv/l7-core';\nimport { generateColorRamp, IColorRamp } from '@antv/l7-utils';\nimport BaseModel from '../../core/BaseModel';\nimport { RasterImageTriangulation } from '../../core/triangulation';\nimport ImageFrag from '../shaders/image_frag.glsl';\nimport ImageVert from '../shaders/image_vert.glsl';\n\ninterface IImageLayerStyleOptions {\n  opacity: number;\n}\nexport default class ImageModel extends BaseModel {\n  protected texture: ITexture2D;\n  public getUninforms(): IModelUniform {\n    const { opacity } = this.layer.getLayerConfig() as IImageLayerStyleOptions;\n    return {\n      u_opacity: opacity || 1,\n      u_texture: this.texture,\n    };\n  }\n  public buildModels() {\n    const source = this.layer.getSource();\n    const { createTexture2D } = this.rendererService;\n    this.texture = createTexture2D({\n      height: 0,\n      width: 0,\n    });\n    source.data.images.then((imageData: HTMLImageElement[]) => {\n      this.texture = createTexture2D({\n        data: imageData[0],\n        width: imageData[0].width,\n        height: imageData[0].height,\n      });\n      this.layerService.renderLayers();\n    });\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'RasterImage',\n        vertexShader: ImageVert,\n        fragmentShader: ImageFrag,\n        triangulation: RasterImageTriangulation,\n        primitive: gl.TRIANGLES,\n        depth: { enable: false },\n        blend: this.getBlend(),\n      }),\n    ];\n  }\n\n  protected getConfigSchema() {\n    return {\n      properties: {\n        opacity: {\n          type: 'number',\n          minimum: 0,\n          maximum: 1,\n        },\n      },\n    };\n  }\n\n  protected registerBuiltinAttributes() {\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'uv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Uv',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          return [vertex[3], vertex[4]];\n        },\n      },\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}