{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nexport function join(geoData, options) {\n  var field = options.field,\n      data = options.data;\n  var dataObj = {};\n  data.forEach(function (element) {\n    dataObj[element[field]] = element;\n  });\n  geoData.dataArray = data.dataArray.map(function (item) {\n    var joinName = item[field];\n    return _objectSpread({}, dataObj[joinName], {}, item);\n  });\n  return data;\n}","map":{"version":3,"sources":["../../src/transform/join.ts"],"names":["field","data","options","dataObj","element","geoData","joinName","item"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA,OAAO,SAAA,IAAA,CAAA,OAAA,EAAA,OAAA,EAAqE;AAAA,MAClEA,KADkE,GAClDE,OADkD,CAAA,KAAA;AAAA,MAC3DD,IAD2D,GAClDC,OADkD,CAAA,IAAA;AAE1E,MAAMC,OAA+B,GAArC,EAAA;AACAF,EAAAA,IAAI,CAAJA,OAAAA,CAAa,UAAA,OAAA,EAAqC;AAChDE,IAAAA,OAAO,CAACC,OAAO,CAAfD,KAAe,CAAR,CAAPA,GAAAA,OAAAA;AADFF,GAAAA;AAGAI,EAAAA,OAAO,CAAPA,SAAAA,GAAoB,IAAI,CAAJ,SAAA,CAAA,GAAA,CAAmB,UAAA,IAAA,EAA0B;AAC/D,QAAMC,QAAQ,GAAGC,IAAI,CAArB,KAAqB,CAArB;AACA,WAAA,aAAA,CAAA,EAAA,EACKJ,OAAO,CADZ,QACY,CADZ,EAAA,EAAA,EAAA,IAAA,CAAA;AAFFE,GAAoB,CAApBA;AAQA,SAAA,IAAA;AACD","sourcesContent":["import { IParseDataItem, IParserData } from '@antv/l7-core';\n\ninterface IJoinOption {\n  field: 'string';\n  data: any[];\n}\n\n/**\n *\n * @param data\n * @param options\n */\nexport function join(geoData: IParserData, options: { [key: string]: any }) {\n  const { field, data } = options;\n  const dataObj: { [key: string]: any } = {};\n  data.forEach((element: { [key: string]: any }) => {\n    dataObj[element[field]] = element;\n  });\n  geoData.dataArray = data.dataArray.map((item: IParseDataItem) => {\n    const joinName = item[field];\n    return {\n      ...dataObj[joinName],\n      ...item,\n    };\n  });\n\n  return data;\n}\n"]},"metadata":{},"sourceType":"module"}