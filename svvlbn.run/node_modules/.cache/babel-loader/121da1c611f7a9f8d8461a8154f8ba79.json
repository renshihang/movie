{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _class, _descriptor, _descriptor2, _temp;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { lazyInject, TYPES } from '@antv/l7-core';\nvar BaseMapWrapper = (_dec = lazyInject(TYPES.ILogService), _dec2 = lazyInject(TYPES.IGlobalConfigService), (_class = (_temp = function () {\n  function BaseMapWrapper(config) {\n    _classCallCheck(this, BaseMapWrapper);\n\n    _initializerDefineProperty(this, \"logger\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"configService\", _descriptor2, this);\n\n    this.config = void 0;\n    this.config = config;\n  }\n\n  _createClass(BaseMapWrapper, [{\n    key: \"setContainer\",\n    value: function setContainer(sceneContainer, id) {\n      var _this$configService$v = this.configService.validateMapConfig(this.config),\n          valid = _this$configService$v.valid,\n          errorText = _this$configService$v.errorText;\n\n      if (!valid) {\n        this.logger.error(errorText || '');\n        return;\n      }\n\n      sceneContainer.bind(TYPES.MapConfig).toConstantValue(_objectSpread({}, this.config, {\n        id: id\n      }));\n      sceneContainer.bind(TYPES.IMapService).to(this.getServiceConstructor()).inSingletonScope();\n    }\n  }, {\n    key: \"getServiceConstructor\",\n    value: function getServiceConstructor() {\n      throw new Error('Method not implemented.');\n    }\n  }]);\n\n  return BaseMapWrapper;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"logger\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"configService\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class));\nexport { BaseMapWrapper as default };","map":{"version":3,"sources":["../src/BaseMapWrapper.ts"],"names":["BaseMapWrapper","lazyInject","TYPES","config","sceneContainer","id","valid","errorText"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,UAAA,EAAA,KAAA,QAAA,eAAA;IAUqBA,c,WAClBC,UAAU,CAACC,KAAK,CAAN,WAAA,C,UAGVD,UAAU,CAACC,KAAK,CAAN,oBAAA,C;AAKX,WAAA,cAAA,CAAA,MAAA,EAAyC;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,cAAA,CAAA;;AAAA,IAAA,0BAAA,CAAA,IAAA,EAAA,QAAA,EAAA,WAAA,EAAA,IAAA,CAAA;;AAAA,IAAA,0BAAA,CAAA,IAAA,EAAA,eAAA,EAAA,YAAA,EAAA,IAAA,CAAA;;AAAA,SAF/BC,MAE+B,GAAA,KAAA,CAAA;AACvC,SAAA,MAAA,GAAA,MAAA;AACD;;;;iCAEmBC,c,EAA2BC,E,EAAY;AAAA,UAAA,qBAAA,GAE5B,KAAA,aAAA,CAAA,iBAAA,CAC3B,KAHuD,MAE5B,CAF4B;AAAA,UAEjDC,KAFiD,GAAA,qBAAA,CAAA,KAAA;AAAA,UAE1CC,SAF0C,GAAA,qBAAA,CAAA,SAAA;;AAMzD,UAAI,CAAJ,KAAA,EAAY;AACV,aAAA,MAAA,CAAA,KAAA,CAAkBA,SAAS,IAA3B,EAAA;AACA;AACD;;AAEDH,MAAAA,cAAc,CAAdA,IAAAA,CAAyCF,KAAK,CAA9CE,SAAAA,EAAAA,eAAAA,CAAAA,aAAAA,CAAAA,EAAAA,EACK,KADLA,MAAAA,EAAAA;AAEEC,QAAAA,EAAE,EAAFA;AAFFD,OAAAA,CAAAA;AAIAA,MAAAA,cAAc,CAAdA,IAAAA,CAC6BF,KAAK,CADlCE,WAAAA,EAAAA,EAAAA,CAEM,KAFNA,qBAEM,EAFNA,EAAAA,gBAAAA;AAID;;;4CAIC;AACA,YAAM,IAAA,KAAA,CAAN,yBAAM,CAAN;AACD;;;;;;;;;;;;;;;SAtCkBJ,c","sourcesContent":["import {\n  IGlobalConfigService,\n  ILogService,\n  IMapConfig,\n  IMapService,\n  IMapWrapper,\n  lazyInject,\n  TYPES,\n} from '@antv/l7-core';\nimport { Container } from 'inversify';\nexport default class BaseMapWrapper<RawMap> implements IMapWrapper {\n  @lazyInject(TYPES.ILogService)\n  protected readonly logger: ILogService;\n\n  @lazyInject(TYPES.IGlobalConfigService)\n  protected readonly configService: IGlobalConfigService;\n\n  protected config: Partial<IMapConfig>;\n\n  constructor(config: Partial<IMapConfig>) {\n    this.config = config;\n  }\n\n  public setContainer(sceneContainer: Container, id: string) {\n    // // 首先使用全局配置服务校验地图参数\n    const { valid, errorText } = this.configService.validateMapConfig(\n      this.config,\n    );\n\n    if (!valid) {\n      this.logger.error(errorText || '');\n      return;\n    }\n    // 绑定用户传入的原始地图参数\n    sceneContainer.bind<Partial<IMapConfig>>(TYPES.MapConfig).toConstantValue({\n      ...this.config,\n      id,\n    });\n    sceneContainer\n      .bind<IMapService<RawMap>>(TYPES.IMapService)\n      .to(this.getServiceConstructor())\n      .inSingletonScope();\n  }\n\n  protected getServiceConstructor(): new (...args: any[]) => IMapService<\n    RawMap\n  > {\n    throw new Error('Method not implemented.');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}