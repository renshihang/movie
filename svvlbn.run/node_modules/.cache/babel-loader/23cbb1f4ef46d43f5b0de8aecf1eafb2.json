{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nvar _dec, _class;\n\nimport { injectable } from 'inversify';\nimport { PassType } from '../IMultiPassRenderer';\nimport BaseNormalPass from './BaseNormalPass';\nvar RenderPass = (_dec = injectable(), _dec(_class = function (_BaseNormalPass) {\n  _inherits(RenderPass, _BaseNormalPass);\n\n  function RenderPass() {\n    _classCallCheck(this, RenderPass);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(RenderPass).apply(this, arguments));\n  }\n\n  _createClass(RenderPass, [{\n    key: \"getType\",\n    value: function getType() {\n      return PassType.Normal;\n    }\n  }, {\n    key: \"getName\",\n    value: function getName() {\n      return 'render';\n    }\n  }, {\n    key: \"init\",\n    value: function init(layer, config) {\n      _get(_getPrototypeOf(RenderPass.prototype), \"init\", this).call(this, layer, config);\n    }\n  }, {\n    key: \"render\",\n    value: function render(layer) {\n      var _this$rendererService = this.rendererService,\n          useFramebuffer = _this$rendererService.useFramebuffer,\n          clear = _this$rendererService.clear;\n      var readFBO = layer.multiPassRenderer.getPostProcessor().getReadFBO();\n      useFramebuffer(readFBO, function () {\n        clear({\n          color: [0, 0, 0, 0],\n          depth: 1,\n          stencil: 0,\n          framebuffer: readFBO\n        });\n        layer.multiPassRenderer.setRenderFlag(false);\n        layer.render();\n        layer.multiPassRenderer.setRenderFlag(true);\n      });\n    }\n  }]);\n\n  return RenderPass;\n}(BaseNormalPass)) || _class);\nexport { RenderPass as default };","map":{"version":3,"sources":["../../../../src/services/renderer/passes/RenderPass.ts"],"names":["injectable","RenderPass","BaseNormalPass","PassType","layer","config","useFramebuffer","clear","readFBO","color","depth","stencil","framebuffer"],"mappings":";;;;;;;;;AAAA,SAAA,UAAA,QAAA,WAAA;AAEA,SAAA,QAAA,QAAA,uBAAA;AACA,OAAA,cAAA,MAAA,kBAAA;IAMqBC,U,WADpBD,UAAU,E;;;;;;;;;;;8BAIQ;AACf,aAAOG,QAAQ,CAAf,MAAA;AACD;;;8BAEgB;AACf,aAAA,QAAA;AACD;;;yBAEWC,K,EAAeC,M,EAAyC;AAClE,MAAA,IAAA,CAAA,eAAA,CAAA,UAAA,CAAA,SAAA,CAAA,EAAA,MAAA,EAAA,IAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,EAAA,MAAA;AACD;;;2BAEaD,K,EAAe;AAAA,UAAA,qBAAA,GACO,KADP,eAAA;AAAA,UACnBE,cADmB,GAAA,qBAAA,CAAA,cAAA;AAAA,UACHC,KADG,GAAA,qBAAA,CAAA,KAAA;AAE3B,UAAMC,OAAO,GAAGJ,KAAK,CAALA,iBAAAA,CAAAA,gBAAAA,GAAhB,UAAgBA,EAAhB;AACAE,MAAAA,cAAc,CAAA,OAAA,EAAU,YAAM;AAC5BC,QAAAA,KAAK,CAAC;AACJE,UAAAA,KAAK,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EADH,CACG,CADH;AAEJC,UAAAA,KAAK,EAFD,CAAA;AAGJC,UAAAA,OAAO,EAHH,CAAA;AAIJC,UAAAA,WAAW,EAAEJ;AAJT,SAAD,CAALD;AAQAH,QAAAA,KAAK,CAALA,iBAAAA,CAAAA,aAAAA,CAAAA,KAAAA;AACAA,QAAAA,KAAK,CAALA,MAAAA;AACAA,QAAAA,KAAK,CAALA,iBAAAA,CAAAA,aAAAA,CAAAA,IAAAA;AAXFE,OAAc,CAAdA;AAaD;;;;EA7BOJ,c;SAFWD,U","sourcesContent":["import { injectable } from 'inversify';\nimport { ILayer } from '../../layer/ILayerService';\nimport { PassType } from '../IMultiPassRenderer';\nimport BaseNormalPass from './BaseNormalPass';\n\n/**\n * RenderPass，负责输出到后续 PostProcessor 的 readFBO 中\n */\n@injectable()\nexport default class RenderPass<\n  InitializationOptions = {}\n> extends BaseNormalPass<InitializationOptions> {\n  public getType() {\n    return PassType.Normal;\n  }\n\n  public getName() {\n    return 'render';\n  }\n\n  public init(layer: ILayer, config?: Partial<InitializationOptions>) {\n    super.init(layer, config);\n  }\n\n  public render(layer: ILayer) {\n    const { useFramebuffer, clear } = this.rendererService;\n    const readFBO = layer.multiPassRenderer.getPostProcessor().getReadFBO();\n    useFramebuffer(readFBO, () => {\n      clear({\n        color: [0, 0, 0, 0],\n        depth: 1,\n        stencil: 0,\n        framebuffer: readFBO,\n      });\n\n      // render to post processor\n      layer.multiPassRenderer.setRenderFlag(false);\n      layer.render();\n      layer.multiPassRenderer.setRenderFlag(true);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}