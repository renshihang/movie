{"ast":null,"code":"export var PositionType;\n\n(function (PositionType) {\n  PositionType[\"TOPRIGHT\"] = \"topright\";\n  PositionType[\"TOPLEFT\"] = \"topleft\";\n  PositionType[\"BOTTOMRIGHT\"] = \"bottomright\";\n  PositionType[\"BOTTOMLEFT\"] = \"bottomleft\";\n})(PositionType || (PositionType = {}));","map":{"version":3,"sources":["../../../src/services/component/IControlService.ts"],"names":["PositionType"],"mappings":"AACA,OAAA,IAAA,YAAA;;WAAYA,Y;AAAAA,EAAAA,Y,YAAAA,G,UAAAA;AAAAA,EAAAA,Y,WAAAA,G,SAAAA;AAAAA,EAAAA,Y,eAAAA,G,aAAAA;AAAAA,EAAAA,Y,cAAAA,G,YAAAA;GAAAA,Y,KAAAA,Y","sourcesContent":["import { Container } from 'inversify';\nexport enum PositionType {\n  'TOPRIGHT' = 'topright',\n  'TOPLEFT' = 'topleft',\n  'BOTTOMRIGHT' = 'bottomright',\n  'BOTTOMLEFT' = 'bottomleft',\n}\nexport interface IControlOption {\n  position: PositionType;\n}\nexport interface IControlServiceCfg {\n  container: HTMLElement;\n}\nexport interface IControlCorners {\n  [key: string]: HTMLElement;\n}\nexport interface IControl {\n  setPosition(pos: PositionType): void;\n  addTo(sceneContainer: Container): void;\n  onAdd(): HTMLElement;\n  hide(): void;\n  show(): void;\n  remove(): void;\n}\nexport interface IControlService {\n  container: HTMLElement;\n  controlCorners: IControlCorners;\n  controlContainer: HTMLElement;\n  addControls(): void;\n  init(cfg: IControlServiceCfg, sceneContainer: Container): void;\n  addControl(ctr: IControl, sceneContainer: Container): void;\n  removeControl(ctr: IControl): void;\n  destroy(): void;\n}\n"]},"metadata":{},"sourceType":"module"}