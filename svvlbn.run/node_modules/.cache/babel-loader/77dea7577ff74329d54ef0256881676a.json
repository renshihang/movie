{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport { bindAll, DOM, lnglatDistance } from '@antv/l7-utils';\nimport Control, { PositionType } from './BaseControl';\n\nvar Scale = function (_Control) {\n  _inherits(Scale, _Control);\n\n  function Scale(cfg) {\n    var _this;\n\n    _classCallCheck(this, Scale);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Scale).call(this, cfg));\n    _this.mScale = void 0;\n    _this.iScale = void 0;\n    bindAll(['update'], _assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Scale, [{\n    key: \"getDefault\",\n    value: function getDefault() {\n      return {\n        position: PositionType.BOTTOMLEFT,\n        maxWidth: 100,\n        metric: true,\n        updateWhenIdle: false,\n        imperial: false\n      };\n    }\n  }, {\n    key: \"onAdd\",\n    value: function onAdd() {\n      var className = 'l7-control-scale';\n      var container = DOM.create('div', className);\n      this.addScales(className + '-line', container);\n      var updateWhenIdle = this.controlOption.updateWhenIdle;\n      this.mapsService.on(updateWhenIdle ? 'moveend' : 'mapmove', this.update);\n      this.update();\n      return container;\n    }\n  }, {\n    key: \"onRemove\",\n    value: function onRemove() {\n      var updateWhenIdle = this.controlOption.updateWhenIdle;\n      this.mapsService.off(updateWhenIdle ? 'moveend' : 'mapmove', this.update);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var mapsService = this.mapsService;\n      var maxWidth = this.controlOption.maxWidth;\n      var y = mapsService.getSize()[1] / 2;\n      var p1 = mapsService.containerToLngLat([0, y]);\n      var p2 = mapsService.containerToLngLat([maxWidth, y]);\n      var maxMeters = lnglatDistance([p1.lng, p1.lat], [p2.lng, p2.lat]);\n      this.updateScales(maxMeters);\n    }\n  }, {\n    key: \"updateScales\",\n    value: function updateScales(maxMeters) {\n      var _this$controlOption = this.controlOption,\n          metric = _this$controlOption.metric,\n          imperial = _this$controlOption.imperial;\n\n      if (metric && maxMeters) {\n        this.updateMetric(maxMeters);\n      }\n\n      if (imperial && maxMeters) {\n        this.updateImperial(maxMeters);\n      }\n    }\n  }, {\n    key: \"updateMetric\",\n    value: function updateMetric(maxMeters) {\n      var meters = this.getRoundNum(maxMeters);\n      var label = meters < 1000 ? meters + ' m' : meters / 1000 + ' km';\n      this.updateScale(this.mScale, label, meters / maxMeters);\n    }\n  }, {\n    key: \"updateImperial\",\n    value: function updateImperial(maxMeters) {\n      var maxFeet = maxMeters * 3.2808399;\n      var maxMiles;\n      var miles;\n      var feet;\n\n      if (maxFeet > 5280) {\n        maxMiles = maxFeet / 5280;\n        miles = this.getRoundNum(maxMiles);\n        this.updateScale(this.iScale, miles + ' mi', miles / maxMiles);\n      } else {\n        feet = this.getRoundNum(maxFeet);\n        this.updateScale(this.iScale, feet + ' ft', feet / maxFeet);\n      }\n    }\n  }, {\n    key: \"updateScale\",\n    value: function updateScale(scale, text, ratio) {\n      var maxWidth = this.controlOption.maxWidth;\n      scale.style.width = Math.round(maxWidth * ratio) + 'px';\n      scale.innerHTML = text;\n    }\n  }, {\n    key: \"getRoundNum\",\n    value: function getRoundNum(num) {\n      var pow10 = Math.pow(10, (Math.floor(num) + '').length - 1);\n      var d = num / pow10;\n      d = d >= 10 ? 10 : d >= 5 ? 5 : d >= 3 ? 3 : d >= 2 ? 2 : 1;\n      return pow10 * d;\n    }\n  }, {\n    key: \"addScales\",\n    value: function addScales(className, container) {\n      var _this$controlOption2 = this.controlOption,\n          metric = _this$controlOption2.metric,\n          imperial = _this$controlOption2.imperial;\n\n      if (metric) {\n        this.mScale = DOM.create('div', className, container);\n      }\n\n      if (imperial) {\n        this.iScale = DOM.create('div', className, container);\n      }\n    }\n  }]);\n\n  return Scale;\n}(Control);\n\nexport { Scale as default };","map":{"version":3,"sources":["../../src/control/scale.ts"],"names":["Scale","Control","mScale","iScale","bindAll","position","PositionType","maxWidth","metric","updateWhenIdle","imperial","className","container","DOM","mapsService","y","p1","p2","maxMeters","lnglatDistance","meters","label","maxFeet","maxMiles","miles","feet","scale","text","ratio","Math","num","pow10","d"],"mappings":"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","sourcesContent":["import { IMapService } from '@antv/l7-core';\nimport { bindAll, DOM, lnglatDistance } from '@antv/l7-utils';\nimport Control, { IControlOption, PositionType } from './BaseControl';\nexport interface IScaleControlOption extends IControlOption {\n  maxWidth: number;\n  metric: boolean;\n  updateWhenIdle: boolean;\n  imperial: boolean;\n}\nexport default class Scale extends Control {\n  private mScale: HTMLElement;\n  private iScale: HTMLElement;\n  constructor(cfg?: Partial<IScaleControlOption>) {\n    super(cfg);\n    bindAll(['update'], this);\n  }\n\n  public getDefault() {\n    return {\n      position: PositionType.BOTTOMLEFT,\n      maxWidth: 100,\n      metric: true,\n      updateWhenIdle: false,\n      imperial: false,\n    };\n  }\n\n  public onAdd() {\n    const className = 'l7-control-scale';\n    const container = DOM.create('div', className);\n    this.addScales(className + '-line', container);\n    const { updateWhenIdle } = this.controlOption;\n    // TODO: 高德地图和MapBox地图事件不一致问题\n    this.mapsService.on(updateWhenIdle ? 'moveend' : 'mapmove', this.update);\n    this.update();\n\n    return container;\n  }\n  public onRemove() {\n    const { updateWhenIdle } = this.controlOption;\n    this.mapsService.off(updateWhenIdle ? 'moveend' : 'mapmove', this.update);\n  }\n  public update() {\n    const mapsService = this.mapsService;\n    const { maxWidth } = this.controlOption;\n    const y = mapsService.getSize()[1] / 2;\n\n    const p1 = mapsService.containerToLngLat([0, y]);\n    const p2 = mapsService.containerToLngLat([maxWidth, y]);\n    const maxMeters = lnglatDistance([p1.lng, p1.lat], [p2.lng, p2.lat]);\n    this.updateScales(maxMeters);\n  }\n  public updateScales(maxMeters: number) {\n    const { metric, imperial } = this.controlOption;\n    if (metric && maxMeters) {\n      this.updateMetric(maxMeters);\n    }\n    if (imperial && maxMeters) {\n      this.updateImperial(maxMeters);\n    }\n  }\n  private updateMetric(maxMeters: number) {\n    const meters = this.getRoundNum(maxMeters);\n    const label = meters < 1000 ? meters + ' m' : meters / 1000 + ' km';\n    this.updateScale(this.mScale, label, meters / maxMeters);\n  }\n  private updateImperial(maxMeters: number) {\n    const maxFeet = maxMeters * 3.2808399;\n    let maxMiles: number;\n    let miles: number;\n    let feet: number;\n\n    if (maxFeet > 5280) {\n      maxMiles = maxFeet / 5280;\n      miles = this.getRoundNum(maxMiles);\n      this.updateScale(this.iScale, miles + ' mi', miles / maxMiles);\n    } else {\n      feet = this.getRoundNum(maxFeet);\n      this.updateScale(this.iScale, feet + ' ft', feet / maxFeet);\n    }\n  }\n  private updateScale(scale: HTMLElement, text: string, ratio: number) {\n    const { maxWidth } = this.controlOption;\n    scale.style.width = Math.round(maxWidth * ratio) + 'px';\n    scale.innerHTML = text;\n  }\n  private getRoundNum(num: number) {\n    const pow10 = Math.pow(10, (Math.floor(num) + '').length - 1);\n    let d = num / pow10;\n\n    d = d >= 10 ? 10 : d >= 5 ? 5 : d >= 3 ? 3 : d >= 2 ? 2 : 1;\n\n    return pow10 * d;\n  }\n  private addScales(className: string, container: HTMLElement) {\n    const { metric, imperial } = this.controlOption;\n    if (metric) {\n      this.mScale = DOM.create('div', className, container);\n    }\n    if (imperial) {\n      this.iScale = DOM.create('div', className, container);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}