{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar _dec, _class, _temp;\n\nimport { mat4 } from 'gl-matrix';\nimport { injectable } from 'inversify';\nvar CameraService = (_dec = injectable(), _dec(_class = (_temp = function () {\n  function CameraService() {\n    _classCallCheck(this, CameraService);\n\n    this.viewport = void 0;\n    this.overridedViewProjectionMatrix = void 0;\n    this.jitteredViewProjectionMatrix = void 0;\n    this.jitteredProjectionMatrix = void 0;\n    this.viewMatrixInverse = void 0;\n    this.cameraPosition = void 0;\n  }\n\n  _createClass(CameraService, [{\n    key: \"init\",\n    value: function init() {}\n  }, {\n    key: \"update\",\n    value: function update(viewport) {\n      this.viewport = viewport;\n      this.viewMatrixInverse = mat4.invert(mat4.create(), this.getViewMatrix());\n      this.cameraPosition = [this.viewMatrixInverse[12], this.viewMatrixInverse[13], this.viewMatrixInverse[14]];\n    }\n  }, {\n    key: \"getProjectionMatrix\",\n    value: function getProjectionMatrix() {\n      return this.jitteredProjectionMatrix || this.viewport.getProjectionMatrix();\n    }\n  }, {\n    key: \"getViewMatrix\",\n    value: function getViewMatrix() {\n      return this.viewport.getViewMatrix();\n    }\n  }, {\n    key: \"getViewMatrixUncentered\",\n    value: function getViewMatrixUncentered() {\n      return this.viewport.getViewMatrixUncentered();\n    }\n  }, {\n    key: \"getViewProjectionMatrix\",\n    value: function getViewProjectionMatrix() {\n      return this.overridedViewProjectionMatrix || this.jitteredViewProjectionMatrix || this.viewport.getViewProjectionMatrix();\n    }\n  }, {\n    key: \"getZoom\",\n    value: function getZoom() {\n      return this.viewport.getZoom();\n    }\n  }, {\n    key: \"getZoomScale\",\n    value: function getZoomScale() {\n      return this.viewport.getZoomScale();\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter() {\n      var _this$viewport$getCen = this.viewport.getCenter(),\n          _this$viewport$getCen2 = _slicedToArray(_this$viewport$getCen, 2),\n          lng = _this$viewport$getCen2[0],\n          lat = _this$viewport$getCen2[1];\n\n      return [lng, lat];\n    }\n  }, {\n    key: \"getFocalDistance\",\n    value: function getFocalDistance() {\n      return this.viewport.getFocalDistance();\n    }\n  }, {\n    key: \"getCameraPosition\",\n    value: function getCameraPosition() {\n      return this.cameraPosition;\n    }\n  }, {\n    key: \"projectFlat\",\n    value: function projectFlat(lngLat, scale) {\n      return this.viewport.projectFlat(lngLat, scale);\n    }\n  }, {\n    key: \"setViewProjectionMatrix\",\n    value: function setViewProjectionMatrix(viewProjectionMatrix) {\n      this.overridedViewProjectionMatrix = viewProjectionMatrix;\n    }\n  }, {\n    key: \"jitterProjectionMatrix\",\n    value: function jitterProjectionMatrix(x, y) {\n      var translation = mat4.fromTranslation(mat4.create(), [x, y, 0]);\n      this.jitteredProjectionMatrix = mat4.multiply(mat4.create(), translation, this.viewport.getProjectionMatrix());\n      this.jitteredViewProjectionMatrix = mat4.multiply(mat4.create(), this.jitteredProjectionMatrix, this.viewport.getViewMatrix());\n    }\n  }, {\n    key: \"clearJitterProjectionMatrix\",\n    value: function clearJitterProjectionMatrix() {\n      this.jitteredProjectionMatrix = undefined;\n      this.jitteredViewProjectionMatrix = undefined;\n    }\n  }]);\n\n  return CameraService;\n}(), _temp)) || _class);\nexport { CameraService as default };","map":{"version":3,"sources":["../../../src/services/camera/CameraService.ts"],"names":["injectable","CameraService","viewport","overridedViewProjectionMatrix","jitteredViewProjectionMatrix","jitteredProjectionMatrix","viewMatrixInverse","cameraPosition","mat4","lng","lat","lngLat","scale","viewProjectionMatrix","x","y","translation"],"mappings":";;;;;;AAAA,SAAA,IAAA,QAAA,WAAA;AACA,SAAA,UAAA,QAAA,WAAA;IAIqBC,a,WADpBD,UAAU,E;;;;SAEDE,Q;SAKAC,6B;SAKAC,4B;SAKAC,wB;SAKAC,iB;SAKAC,c;;;;;2BAEM,CAEb;;;2BAKaL,Q,EAAqB;AACjC,WAAA,QAAA,GAAA,QAAA;AAGA,WAAA,iBAAA,GAA0BM,IAAI,CAAJA,MAAAA,CACxBA,IAAI,CADoBA,MACxBA,EADwBA,EAEvB,KAFH,aAEG,EAFuBA,CAA1B;AAKA,WAAA,cAAA,GAAsB,CACpB,KAAA,iBAAA,CADoB,EACpB,CADoB,EAEpB,KAAA,iBAAA,CAFoB,EAEpB,CAFoB,EAGpB,KAAA,iBAAA,CAHF,EAGE,CAHoB,CAAtB;AAKD;;;0CAEsC;AAErC,aAAO,KAAA,wBAAA,IAAiC,KAAA,QAAA,CAAxC,mBAAwC,EAAxC;AACD;;;oCAEgC;AAC/B,aAAO,KAAA,QAAA,CAAP,aAAO,EAAP;AACD;;;8CAE0C;AACzC,aAAO,KAAA,QAAA,CAAP,uBAAO,EAAP;AACD;;;8CAE0C;AACzC,aACE,KAAA,6BAAA,IACA,KADA,4BAAA,IAEA,KAAA,QAAA,CAHF,uBAGE,EAHF;AAKD;;;8BAEwB;AACvB,aAAO,KAAA,QAAA,CAAP,OAAO,EAAP;AACD;;;mCAE6B;AAC5B,aAAO,KAAA,QAAA,CAAP,YAAO,EAAP;AACD;;;gCAEoC;AAAA,UAAA,qBAAA,GAChB,KAAA,QAAA,CADgB,SAChB,EADgB;AAAA,UAAA,sBAAA,GAAA,cAAA,CAAA,qBAAA,EAAA,CAAA,CAAA;AAAA,UAC5BC,GAD4B,GAAA,sBAAA,CAAA,CAAA,CAAA;AAAA,UACvBC,GADuB,GAAA,sBAAA,CAAA,CAAA,CAAA;;AAEnC,aAAO,CAAA,GAAA,EAAP,GAAO,CAAP;AACD;;;uCAEyB;AACxB,aAAO,KAAA,QAAA,CAAP,gBAAO,EAAP;AACD;;;wCAE0B;AACzB,aAAO,KAAP,cAAA;AACD;;;gCAGCC,M,EACAC,K,EACkB;AAClB,aAAO,KAAA,QAAA,CAAA,WAAA,CAAA,MAAA,EAAP,KAAO,CAAP;AACD;;;4CAK8BC,oB,EAA4C;AACzE,WAAA,6BAAA,GAAA,oBAAA;AACD;;;2CAE6BC,C,EAAWC,C,EAAW;AAClD,UAAMC,WAAW,GAAGR,IAAI,CAAJA,eAAAA,CAAqBA,IAAI,CAAzBA,MAAqBA,EAArBA,EAAoC,CAAA,CAAA,EAAA,CAAA,EAAxD,CAAwD,CAApCA,CAApB;AAEA,WAAA,wBAAA,GAAiCA,IAAI,CAAJA,QAAAA,CAC/BA,IAAI,CAD2BA,MAC/BA,EAD+BA,EAAAA,WAAAA,EAG9B,KAAA,QAAA,CAHH,mBAGG,EAH8BA,CAAjC;AAMA,WAAA,4BAAA,GAAqCA,IAAI,CAAJA,QAAAA,CACnCA,IAAI,CAD+BA,MACnCA,EADmCA,EAElC,KAFkCA,wBAAAA,EAGlC,KAAA,QAAA,CAHH,aAGG,EAHkCA,CAArC;AAKD;;;kDAEoC;AACnC,WAAA,wBAAA,GAAA,SAAA;AACA,WAAA,4BAAA,GAAA,SAAA;AACD;;;;;SA9HkBP,a","sourcesContent":["import { mat4 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport { ICameraService, IViewport } from './ICameraService';\n\n@injectable()\nexport default class CameraService implements ICameraService {\n  private viewport: IViewport;\n\n  /**\n   * 不使用 Viewport 计算的 VP 矩阵，例如偏移坐标系场景\n   */\n  private overridedViewProjectionMatrix: number[] | undefined;\n\n  /**\n   * 抖动后的 VP 矩阵\n   */\n  private jitteredViewProjectionMatrix: number[] | undefined;\n\n  /**\n   * 抖动后的 Projection 矩阵\n   */\n  private jitteredProjectionMatrix: number[] | undefined;\n\n  /**\n   * ViewMatrix 逆矩阵，用于计算相机位置\n   */\n  private viewMatrixInverse: number[];\n\n  /**\n   * 相机位置\n   */\n  private cameraPosition: number[];\n\n  public init() {\n    //\n  }\n\n  /**\n   * 同步根据相机参数创建的视口\n   */\n  public update(viewport: IViewport) {\n    this.viewport = viewport;\n\n    // 计算逆矩阵\n    this.viewMatrixInverse = (mat4.invert(\n      mat4.create(),\n      (this.getViewMatrix() as unknown) as mat4,\n    ) as unknown) as number[];\n\n    this.cameraPosition = [\n      this.viewMatrixInverse[12],\n      this.viewMatrixInverse[13],\n      this.viewMatrixInverse[14],\n    ];\n  }\n\n  public getProjectionMatrix(): number[] {\n    // 优先返回抖动后的 ProjectionMatrix\n    return this.jitteredProjectionMatrix || this.viewport.getProjectionMatrix();\n  }\n\n  public getViewMatrix(): number[] {\n    return this.viewport.getViewMatrix();\n  }\n\n  public getViewMatrixUncentered(): number[] {\n    return this.viewport.getViewMatrixUncentered();\n  }\n\n  public getViewProjectionMatrix(): number[] {\n    return (\n      this.overridedViewProjectionMatrix ||\n      this.jitteredViewProjectionMatrix ||\n      this.viewport.getViewProjectionMatrix()\n    );\n  }\n\n  public getZoom(): number {\n    return this.viewport.getZoom();\n  }\n\n  public getZoomScale(): number {\n    return this.viewport.getZoomScale();\n  }\n\n  public getCenter(): [number, number] {\n    const [lng, lat] = this.viewport.getCenter();\n    return [lng, lat];\n  }\n\n  public getFocalDistance() {\n    return this.viewport.getFocalDistance();\n  }\n\n  public getCameraPosition() {\n    return this.cameraPosition;\n  }\n\n  public projectFlat(\n    lngLat: [number, number],\n    scale?: number | undefined,\n  ): [number, number] {\n    return this.viewport.projectFlat(lngLat, scale);\n  }\n\n  /**\n   * 支持外部计算 VP 矩阵的场景，例如：在偏移坐标系场景中，需要重新计算 VP 矩阵\n   */\n  public setViewProjectionMatrix(viewProjectionMatrix: number[] | undefined) {\n    this.overridedViewProjectionMatrix = viewProjectionMatrix;\n  }\n\n  public jitterProjectionMatrix(x: number, y: number) {\n    const translation = mat4.fromTranslation(mat4.create(), [x, y, 0]);\n\n    this.jitteredProjectionMatrix = (mat4.multiply(\n      mat4.create(),\n      translation,\n      (this.viewport.getProjectionMatrix() as unknown) as mat4,\n    ) as unknown) as number[];\n\n    this.jitteredViewProjectionMatrix = (mat4.multiply(\n      mat4.create(),\n      (this.jitteredProjectionMatrix as unknown) as mat4,\n      (this.viewport.getViewMatrix() as unknown) as mat4,\n    ) as unknown) as number[];\n  }\n\n  public clearJitterProjectionMatrix() {\n    this.jitteredProjectionMatrix = undefined;\n    this.jitteredViewProjectionMatrix = undefined;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}