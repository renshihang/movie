{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar _dec, _class, _temp;\n\nimport { injectable } from 'inversify';\nimport regl from 'regl';\nimport ReglAttribute from './ReglAttribute';\nimport ReglBuffer from './ReglBuffer';\nimport ReglElements from './ReglElements';\nimport ReglFramebuffer from './ReglFramebuffer';\nimport ReglModel from './ReglModel';\nimport ReglTexture2D from './ReglTexture2D';\nvar ReglRendererService = (_dec = injectable(), _dec(_class = (_temp = function () {\n  function ReglRendererService() {\n    var _this = this;\n\n    _classCallCheck(this, ReglRendererService);\n\n    this.gl = void 0;\n    this.$container = void 0;\n\n    this.createModel = function (options) {\n      return new ReglModel(_this.gl, options);\n    };\n\n    this.createAttribute = function (options) {\n      return new ReglAttribute(_this.gl, options);\n    };\n\n    this.createBuffer = function (options) {\n      return new ReglBuffer(_this.gl, options);\n    };\n\n    this.createElements = function (options) {\n      return new ReglElements(_this.gl, options);\n    };\n\n    this.createTexture2D = function (options) {\n      return new ReglTexture2D(_this.gl, options);\n    };\n\n    this.createFramebuffer = function (options) {\n      return new ReglFramebuffer(_this.gl, options);\n    };\n\n    this.useFramebuffer = function (framebuffer, drawCommands) {\n      _this.gl({\n        framebuffer: framebuffer ? framebuffer.get() : null\n      })(drawCommands);\n    };\n\n    this.clear = function (options) {\n      var color = options.color,\n          depth = options.depth,\n          stencil = options.stencil,\n          _options$framebuffer = options.framebuffer,\n          framebuffer = _options$framebuffer === void 0 ? null : _options$framebuffer;\n      var reglClearOptions = {\n        color: color,\n        depth: depth,\n        stencil: stencil\n      };\n      reglClearOptions.framebuffer = framebuffer === null ? framebuffer : framebuffer.get();\n\n      _this.gl.clear(reglClearOptions);\n    };\n\n    this.viewport = function (_ref) {\n      var _this$$container;\n\n      var x = _ref.x,\n          y = _ref.y,\n          width = _ref.width,\n          height = _ref.height;\n      var renderCanvas = (_this$$container = _this.$container) === null || _this$$container === void 0 ? void 0 : _this$$container.getElementsByTagName('canvas')[0];\n\n      if (renderCanvas) {\n        renderCanvas.width = width;\n        renderCanvas.height = height;\n        renderCanvas.style.width = width / 2 + 'px';\n        renderCanvas.style.height = height / 2 + 'px';\n      }\n\n      _this.gl._gl.viewport(x, y, width, height);\n\n      _this.gl._refresh();\n    };\n\n    this.readPixels = function (options) {\n      var framebuffer = options.framebuffer,\n          x = options.x,\n          y = options.y,\n          width = options.width,\n          height = options.height;\n      var readPixelsOptions = {\n        x: x,\n        y: y,\n        width: width,\n        height: height\n      };\n\n      if (framebuffer) {\n        readPixelsOptions.framebuffer = framebuffer.get();\n      }\n\n      return _this.gl.read(readPixelsOptions);\n    };\n\n    this.getViewportSize = function () {\n      return {\n        width: _this.gl._gl.drawingBufferWidth,\n        height: _this.gl._gl.drawingBufferHeight\n      };\n    };\n\n    this.getContainer = function () {\n      return _this.$container;\n    };\n\n    this.destroy = function () {\n      _this.gl.destroy();\n    };\n  }\n\n  _createClass(ReglRendererService, [{\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator(_regeneratorRuntime.mark(function _callee($container) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.$container = $container;\n                _context.next = 3;\n                return new Promise(function (resolve, reject) {\n                  regl({\n                    container: $container,\n                    attributes: {\n                      alpha: true,\n                      antialias: true,\n                      premultipliedAlpha: true\n                    },\n                    extensions: ['OES_element_index_uint', 'EXT_blend_minmax', 'OES_standard_derivatives', 'WEBGL_depth_texture', 'angle_instanced_arrays', 'EXT_texture_filter_anisotropic'],\n                    optionalExtensions: ['oes_texture_float_linear', 'OES_texture_float'],\n                    profile: true,\n                    onDone: function onDone(err, r) {\n                      if (err || !r) {\n                        reject(err);\n                      }\n\n                      resolve(r);\n                    }\n                  });\n                });\n\n              case 3:\n                this.gl = _context.sent;\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function init(_x) {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n  }]);\n\n  return ReglRendererService;\n}(), _temp)) || _class);\nexport { ReglRendererService as default };","map":{"version":3,"sources":["../../src/regl/index.ts"],"names":["injectable","ReglRendererService","gl","$container","regl","container","attributes","alpha","antialias","premultipliedAlpha","extensions","optionalExtensions","profile","onDone","err","reject","resolve","createModel","createAttribute","createBuffer","createElements","createTexture2D","createFramebuffer","useFramebuffer","framebuffer","clear","color","depth","stencil","options","reglClearOptions","viewport","x","y","width","height","renderCanvas","readPixels","readPixelsOptions","getViewportSize","drawingBufferHeight","getContainer","destroy"],"mappings":"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","sourcesContent":["/**\n * render w/ regl\n * @see https://github.com/regl-project/regl/blob/gh-pages/API.md\n */\nimport {\n  IAttribute,\n  IAttributeInitializationOptions,\n  IBuffer,\n  IBufferInitializationOptions,\n  IClearOptions,\n  IElements,\n  IElementsInitializationOptions,\n  IFramebuffer,\n  IFramebufferInitializationOptions,\n  IModel,\n  IModelInitializationOptions,\n  IReadPixelsOptions,\n  IRendererService,\n  ITexture2D,\n  ITexture2DInitializationOptions,\n} from '@antv/l7-core';\nimport { injectable } from 'inversify';\nimport regl from 'regl';\nimport ReglAttribute from './ReglAttribute';\nimport ReglBuffer from './ReglBuffer';\nimport ReglElements from './ReglElements';\nimport ReglFramebuffer from './ReglFramebuffer';\nimport ReglModel from './ReglModel';\nimport ReglTexture2D from './ReglTexture2D';\n\n/**\n * regl renderer\n */\n@injectable()\nexport default class ReglRendererService implements IRendererService {\n  private gl: regl.Regl;\n  private $container: HTMLDivElement | null;\n\n  public async init($container: HTMLDivElement): Promise<void> {\n    this.$container = $container;\n    // tslint:disable-next-line:typedef\n    this.gl = await new Promise((resolve, reject) => {\n      regl({\n        container: $container,\n        attributes: {\n          alpha: true,\n          // use TAA instead of MSAA\n          // @see https://www.khronos.org/registry/webgl/specs/1.0/#5.2.1\n          antialias: true,\n          premultipliedAlpha: true,\n        },\n        // TODO: use extensions\n        extensions: [\n          'OES_element_index_uint',\n          'EXT_blend_minmax',\n          'OES_standard_derivatives', // wireframe\n          // 'OES_texture_float', // shadow map 兼容性问题\n          'WEBGL_depth_texture',\n          'angle_instanced_arrays',\n          'EXT_texture_filter_anisotropic', // VSM shadow map\n        ],\n        optionalExtensions: ['oes_texture_float_linear', 'OES_texture_float'],\n        profile: true,\n        onDone: (err: Error | null, r?: regl.Regl | undefined): void => {\n          if (err || !r) {\n            reject(err);\n          }\n          resolve(r);\n        },\n      });\n    });\n  }\n\n  public createModel = (options: IModelInitializationOptions): IModel =>\n    new ReglModel(this.gl, options);\n\n  public createAttribute = (\n    options: IAttributeInitializationOptions,\n  ): IAttribute => new ReglAttribute(this.gl, options);\n\n  public createBuffer = (options: IBufferInitializationOptions): IBuffer =>\n    new ReglBuffer(this.gl, options);\n\n  public createElements = (\n    options: IElementsInitializationOptions,\n  ): IElements => new ReglElements(this.gl, options);\n\n  public createTexture2D = (\n    options: ITexture2DInitializationOptions,\n  ): ITexture2D => new ReglTexture2D(this.gl, options);\n\n  public createFramebuffer = (options: IFramebufferInitializationOptions) =>\n    new ReglFramebuffer(this.gl, options);\n\n  public useFramebuffer = (\n    framebuffer: IFramebuffer | null,\n    drawCommands: () => void,\n  ) => {\n    this.gl({\n      framebuffer: framebuffer ? (framebuffer as ReglFramebuffer).get() : null,\n    })(drawCommands);\n  };\n\n  public clear = (options: IClearOptions) => {\n    // @see https://github.com/regl-project/regl/blob/gh-pages/API.md#clear-the-draw-buffer\n    const { color, depth, stencil, framebuffer = null } = options;\n    const reglClearOptions: regl.ClearOptions = {\n      color,\n      depth,\n      stencil,\n    };\n\n    reglClearOptions.framebuffer =\n      framebuffer === null\n        ? framebuffer\n        : (framebuffer as ReglFramebuffer).get();\n\n    this.gl.clear(reglClearOptions);\n  };\n\n  public viewport = ({\n    x,\n    y,\n    width,\n    height,\n  }: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  }) => {\n    // use WebGL context directly\n    // @see https://github.com/regl-project/regl/blob/gh-pages/API.md#unsafe-escape-hatch\n    const renderCanvas = this.$container?.getElementsByTagName('canvas')[0];\n    if (renderCanvas) {\n      renderCanvas.width = width;\n      renderCanvas.height = height;\n      renderCanvas.style.width = width / 2 + 'px';\n      renderCanvas.style.height = height / 2 + 'px';\n    }\n    this.gl._gl.viewport(x, y, width, height);\n    this.gl._refresh();\n  };\n\n  public readPixels = (options: IReadPixelsOptions) => {\n    const { framebuffer, x, y, width, height } = options;\n    const readPixelsOptions: regl.ReadOptions = {\n      x,\n      y,\n      width,\n      height,\n    };\n    if (framebuffer) {\n      readPixelsOptions.framebuffer = (framebuffer as ReglFramebuffer).get();\n    }\n    return this.gl.read(readPixelsOptions);\n  };\n\n  public getViewportSize = () => {\n    return {\n      width: this.gl._gl.drawingBufferWidth,\n      height: this.gl._gl.drawingBufferHeight,\n    };\n  };\n\n  public getContainer = () => {\n    return this.$container;\n  };\n\n  public destroy = () => {\n    // @see https://github.com/regl-project/regl/blob/gh-pages/API.md#clean-up\n    this.gl.destroy();\n  };\n}\n"]},"metadata":{},"sourceType":"module"}