{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _merge from \"lodash/merge\";\n\nvar _dec, _dec2, _class, _class2, _temp;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport Ajv from 'ajv';\nimport { injectable, postConstruct } from 'inversify';\nimport mapConfigSchema from './mapConfigSchema';\nimport sceneConfigSchema from './sceneConfigSchema';\nimport WarnInfo from './warnInfo';\nvar defaultSceneConfig = {\n  id: 'map'\n};\nvar defaultLayerConfig = {\n  colors: ['rgb(103,0,31)', 'rgb(178,24,43)', 'rgb(214,96,77)', 'rgb(244,165,130)', 'rgb(253,219,199)', 'rgb(247,247,247)', 'rgb(209,229,240)', 'rgb(146,197,222)', 'rgb(67,147,195)', 'rgb(33,102,172)', 'rgb(5,48,97)'],\n  size: 10,\n  shape: 'circle',\n  scales: {},\n  shape2d: ['circle', 'triangle', 'square', 'pentagon', 'hexagon', 'octogon', 'hexagram', 'rhombus', 'vesica'],\n  shape3d: ['cylinder', 'triangleColumn', 'hexagonColumn', 'squareColumn'],\n  minZoom: -1,\n  maxZoom: 24,\n  visible: true,\n  autoFit: false,\n  zIndex: 0,\n  blend: 'normal',\n  pickedFeatureID: -1,\n  enableMultiPassRenderer: true,\n  enablePicking: true,\n  active: false,\n  activeColor: '#2f54eb',\n  enableHighlight: false,\n  enableSelect: false,\n  highlightColor: '#2f54eb',\n  selectColor: 'blue',\n  enableTAA: false,\n  jitterScale: 1,\n  enableLighting: false,\n  animateOption: {\n    enable: false,\n    interval: 0.2,\n    duration: 4,\n    trailLength: 0.15\n  }\n};\nvar ajv = new Ajv({\n  allErrors: true,\n  verbose: true\n});\nvar GlobalConfigService = (_dec = injectable(), _dec2 = postConstruct(), _dec(_class = (_class2 = (_temp = function () {\n  function GlobalConfigService() {\n    _classCallCheck(this, GlobalConfigService);\n\n    this.sceneConfigCache = {};\n    this.sceneConfigValidator = void 0;\n    this.mapConfigValidator = void 0;\n    this.layerConfigCache = {};\n    this.layerConfigValidatorCache = {};\n  }\n\n  _createClass(GlobalConfigService, [{\n    key: \"getSceneConfig\",\n    value: function getSceneConfig(sceneId) {\n      return this.sceneConfigCache[sceneId];\n    }\n  }, {\n    key: \"getSceneWarninfo\",\n    value: function getSceneWarninfo(id) {\n      return WarnInfo[id];\n    }\n  }, {\n    key: \"setSceneConfig\",\n    value: function setSceneConfig(sceneId, config) {\n      this.sceneConfigCache[sceneId] = _objectSpread({}, defaultSceneConfig, {}, config);\n    }\n  }, {\n    key: \"validateSceneConfig\",\n    value: function validateSceneConfig(data) {\n      return this.validate(this.sceneConfigValidator, data);\n    }\n  }, {\n    key: \"validateMapConfig\",\n    value: function validateMapConfig(data) {\n      return this.validate(this.mapConfigValidator, data);\n    }\n  }, {\n    key: \"getLayerConfig\",\n    value: function getLayerConfig(layerId) {\n      return this.layerConfigCache[layerId];\n    }\n  }, {\n    key: \"setLayerConfig\",\n    value: function setLayerConfig(sceneId, layerId, config) {\n      this.layerConfigCache[layerId] = _objectSpread({}, _merge({}, this.sceneConfigCache[sceneId], defaultLayerConfig, config));\n    }\n  }, {\n    key: \"registerLayerConfigSchemaValidator\",\n    value: function registerLayerConfigSchemaValidator(layerName, schema) {\n      if (!this.layerConfigValidatorCache[layerName]) {\n        this.layerConfigValidatorCache[layerName] = ajv.compile(schema);\n      }\n    }\n  }, {\n    key: \"validateLayerConfig\",\n    value: function validateLayerConfig(layerName, data) {\n      return this.validate(this.layerConfigValidatorCache[layerName], data);\n    }\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      this.sceneConfigCache = {};\n      this.layerConfigCache = {};\n    }\n  }, {\n    key: \"registerSceneConfigSchemaValidator\",\n    value: function registerSceneConfigSchemaValidator() {\n      this.sceneConfigValidator = ajv.compile(sceneConfigSchema);\n      this.mapConfigValidator = ajv.compile(mapConfigSchema);\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(validateFunc, data) {\n      if (validateFunc) {\n        var valid = validateFunc(data);\n\n        if (!valid) {\n          return {\n            valid: valid,\n            errors: validateFunc.errors,\n            errorText: ajv.errorsText(validateFunc.errors)\n          };\n        }\n      }\n\n      return {\n        valid: true,\n        errors: null,\n        errorText: null\n      };\n    }\n  }]);\n\n  return GlobalConfigService;\n}(), _temp), _applyDecoratedDescriptor(_class2.prototype, \"registerSceneConfigSchemaValidator\", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, \"registerSceneConfigSchemaValidator\"), _class2.prototype), _class2)) || _class);\nexport { GlobalConfigService as default };","map":{"version":3,"sources":["../../../src/services/config/ConfigService.ts"],"names":["defaultSceneConfig","id","defaultLayerConfig","colors","size","shape","scales","shape2d","shape3d","minZoom","maxZoom","visible","autoFit","zIndex","blend","pickedFeatureID","enableMultiPassRenderer","enablePicking","active","activeColor","enableHighlight","enableSelect","highlightColor","selectColor","enableTAA","jitterScale","enableLighting","animateOption","enable","interval","duration","trailLength","ajv","allErrors","verbose","injectable","GlobalConfigService","sceneConfigCache","sceneConfigValidator","mapConfigValidator","layerConfigCache","layerConfigValidatorCache","sceneId","WarnInfo","config","data","layerId","layerName","schema","postConstruct","validateFunc","valid","errors","errorText"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,GAAA,MAAA,KAAA;AACA,SAAA,UAAA,EAAA,aAAA,QAAA,WAAA;AAIA,OAAA,eAAA,MAAA,mBAAA;AACA,OAAA,iBAAA,MAAA,qBAAA;AACA,OAAA,QAAA,MAAA,YAAA;AAKA,IAAMA,kBAAyC,GAAG;AAChDC,EAAAA,EAAE,EAAE;AAD4C,CAAlD;AAOA,IAAMC,kBAAyC,GAAG;AAChDC,EAAAA,MAAM,EAAE,CAAA,eAAA,EAAA,gBAAA,EAAA,gBAAA,EAAA,kBAAA,EAAA,kBAAA,EAAA,kBAAA,EAAA,kBAAA,EAAA,kBAAA,EAAA,iBAAA,EAAA,iBAAA,EADwC,cACxC,CADwC;AAchDC,EAAAA,IAAI,EAd4C,EAAA;AAehDC,EAAAA,KAAK,EAf2C,QAAA;AAgBhDC,EAAAA,MAAM,EAhB0C,EAAA;AAiBhDC,EAAAA,OAAO,EAAE,CAAA,QAAA,EAAA,UAAA,EAAA,QAAA,EAAA,UAAA,EAAA,SAAA,EAAA,SAAA,EAAA,UAAA,EAAA,SAAA,EAjBuC,QAiBvC,CAjBuC;AA4BhDC,EAAAA,OAAO,EAAE,CAAA,UAAA,EAAA,gBAAA,EAAA,eAAA,EA5BuC,cA4BvC,CA5BuC;AA6BhDC,EAAAA,OAAO,EAAE,CA7BuC,CAAA;AA8BhDC,EAAAA,OAAO,EA9ByC,EAAA;AA+BhDC,EAAAA,OAAO,EA/ByC,IAAA;AAgChDC,EAAAA,OAAO,EAhCyC,KAAA;AAiChDC,EAAAA,MAAM,EAjC0C,CAAA;AAkChDC,EAAAA,KAAK,EAlC2C,QAAA;AAmChDC,EAAAA,eAAe,EAAE,CAnC+B,CAAA;AAoChDC,EAAAA,uBAAuB,EApCyB,IAAA;AAqChDC,EAAAA,aAAa,EArCmC,IAAA;AAsChDC,EAAAA,MAAM,EAtC0C,KAAA;AAuChDC,EAAAA,WAAW,EAvCqC,SAAA;AAwChDC,EAAAA,eAAe,EAxCiC,KAAA;AAyChDC,EAAAA,YAAY,EAzCoC,KAAA;AA0ChDC,EAAAA,cAAc,EA1CkC,SAAA;AA2ChDC,EAAAA,WAAW,EA3CqC,MAAA;AA4ChDC,EAAAA,SAAS,EA5CuC,KAAA;AA6ChDC,EAAAA,WAAW,EA7CqC,CAAA;AA8ChDC,EAAAA,cAAc,EA9CkC,KAAA;AA+ChDC,EAAAA,aAAa,EAAE;AACbC,IAAAA,MAAM,EADO,KAAA;AAEbC,IAAAA,QAAQ,EAFK,GAAA;AAGbC,IAAAA,QAAQ,EAHK,CAAA;AAIbC,IAAAA,WAAW,EAAE;AAJA;AA/CiC,CAAlD;AAwDA,IAAMC,GAAG,GAAG,IAAA,GAAA,CAAQ;AAClBC,EAAAA,SAAS,EADS,IAAA;AAElBC,EAAAA,OAAO,EAAE;AAFS,CAAR,CAAZ;IAMqBE,mB,WADpBD,UAAU,E,UAyFRc,aAAa,E;;;;SApFNZ,gB,GAEJ,E;SAKIC,oB;SAKAC,kB;SAKAC,gB,GAEJ,E;SAKIC,yB,GAEJ,E;;;;;mCAEkBC,O,EAAiB;AACrC,aAAO,KAAA,gBAAA,CAAP,OAAO,CAAP;AACD;;;qCAEuBzC,E,EAAY;AAClC,aAAO0C,QAAQ,CAAf,EAAe,CAAf;AACD;;;mCAEqBD,O,EAAiBE,M,EAA+B;AACpE,WAAA,gBAAA,CAAA,OAAA,IAAA,aAAA,CAAA,EAAA,EAAA,kBAAA,EAAA,EAAA,EAAA,MAAA,CAAA;AAID;;;wCAE0BC,I,EAAc;AACvC,aAAO,KAAA,QAAA,CAAc,KAAd,oBAAA,EAAP,IAAO,CAAP;AACD;;;sCAEwBA,I,EAAc;AACrC,aAAO,KAAA,QAAA,CAAc,KAAd,kBAAA,EAAP,IAAO,CAAP;AACD;;;mCAGCC,O,EAC0D;AAE1D,aAAO,KAAA,gBAAA,CAAP,OAAO,CAAP;AACD;;;mCAGCJ,O,EACAI,O,EACAF,M,EACA;AAEA,WAAA,gBAAA,CAAA,OAAA,IAAA,aAAA,CAAA,EAAA,EACK,MAAA,CAAA,EAAA,EAAU,KAAA,gBAAA,CAAV,OAAU,CAAV,EAAA,kBAAA,EADL,MACK,CADL,CAAA;AAGD;;;uDAEyCG,S,EAAmBC,M,EAAgB;AAC3E,UAAI,CAAC,KAAA,yBAAA,CAAL,SAAK,CAAL,EAAgD;AAC9C,aAAA,yBAAA,CAAA,SAAA,IAA4ChB,GAAG,CAAHA,OAAAA,CAA5C,MAA4CA,CAA5C;AACD;AACF;;;wCAE0Be,S,EAAmBF,I,EAAc;AAC1D,aAAO,KAAA,QAAA,CAAc,KAAA,yBAAA,CAAd,SAAc,CAAd,EAAP,IAAO,CAAP;AACD;;;4BAEc;AACb,WAAA,gBAAA,GAAA,EAAA;AACA,WAAA,gBAAA,GAAA,EAAA;AACD;;;yDAG4C;AAC3C,WAAA,oBAAA,GAA4Bb,GAAG,CAAHA,OAAAA,CAA5B,iBAA4BA,CAA5B;AACA,WAAA,kBAAA,GAA0BA,GAAG,CAAHA,OAAAA,CAA1B,eAA0BA,CAA1B;AACD;;;6BAGCkB,Y,EACAL,I,EACA;AACA,UAAA,YAAA,EAAkB;AAChB,YAAMM,KAAK,GAAGD,YAAY,CAA1B,IAA0B,CAA1B;;AACA,YAAI,CAAJ,KAAA,EAAY;AACV,iBAAO;AACLC,YAAAA,KAAK,EADA,KAAA;AAELC,YAAAA,MAAM,EAAEF,YAAY,CAFf,MAAA;AAGLG,YAAAA,SAAS,EAAErB,GAAG,CAAHA,UAAAA,CAAekB,YAAY,CAA3BlB,MAAAA;AAHN,WAAP;AAKD;AACF;;AACD,aAAO;AACLmB,QAAAA,KAAK,EADA,IAAA;AAELC,QAAAA,MAAM,EAFD,IAAA;AAGLC,QAAAA,SAAS,EAAE;AAHN,OAAP;AAKD;;;;;SAjHkBjB,mB","sourcesContent":["import Ajv from 'ajv';\nimport { injectable, postConstruct } from 'inversify';\nimport { merge } from 'lodash';\nimport { ILayerConfig } from '../layer/ILayerService';\nimport { IGlobalConfigService, ISceneConfig } from './IConfigService';\nimport mapConfigSchema from './mapConfigSchema';\nimport sceneConfigSchema from './sceneConfigSchema';\nimport WarnInfo, { IWarnInfo } from './warnInfo';\n\n/**\n * 场景默认配置项\n */\nconst defaultSceneConfig: Partial<ISceneConfig> = {\n  id: 'map',\n};\n\n/**\n * 图层基类默认样式属性\n */\nconst defaultLayerConfig: Partial<ILayerConfig> = {\n  colors: [\n    'rgb(103,0,31)',\n    'rgb(178,24,43)',\n    'rgb(214,96,77)',\n    'rgb(244,165,130)',\n    'rgb(253,219,199)',\n    'rgb(247,247,247)',\n    'rgb(209,229,240)',\n    'rgb(146,197,222)',\n    'rgb(67,147,195)',\n    'rgb(33,102,172)',\n    'rgb(5,48,97)',\n  ],\n  size: 10,\n  shape: 'circle',\n  scales: {},\n  shape2d: [\n    'circle',\n    'triangle',\n    'square',\n    'pentagon',\n    'hexagon',\n    'octogon',\n    'hexagram',\n    'rhombus',\n    'vesica',\n  ],\n  shape3d: ['cylinder', 'triangleColumn', 'hexagonColumn', 'squareColumn'],\n  minZoom: -1,\n  maxZoom: 24,\n  visible: true,\n  autoFit: false,\n  zIndex: 0,\n  blend: 'normal',\n  pickedFeatureID: -1,\n  enableMultiPassRenderer: true,\n  enablePicking: true,\n  active: false,\n  activeColor: '#2f54eb',\n  enableHighlight: false,\n  enableSelect: false,\n  highlightColor: '#2f54eb',\n  selectColor: 'blue',\n  enableTAA: false,\n  jitterScale: 1,\n  enableLighting: false,\n  animateOption: {\n    enable: false,\n    interval: 0.2,\n    duration: 4,\n    trailLength: 0.15,\n  },\n};\n\n// @see https://github.com/epoberezkin/ajv#options\nconst ajv = new Ajv({\n  allErrors: true,\n  verbose: true,\n});\n\n@injectable()\nexport default class GlobalConfigService implements IGlobalConfigService {\n  /**\n   * 全部场景配置项缓存\n   */\n  private sceneConfigCache: {\n    [sceneId: string]: Partial<ISceneConfig>;\n  } = {};\n\n  /**\n   * 场景配置项校验器\n   */\n  private sceneConfigValidator: Ajv.ValidateFunction;\n\n  /**\n   * 地图配置项校验器\n   */\n  private mapConfigValidator: Ajv.ValidateFunction;\n\n  /**\n   * 全部图层配置项缓存\n   */\n  private layerConfigCache: {\n    [layerId: string]: Partial<ILayerConfig & ISceneConfig>;\n  } = {};\n\n  /**\n   * 保存每一种 Layer 配置项的校验器\n   */\n  private layerConfigValidatorCache: {\n    [layerName: string]: Ajv.ValidateFunction;\n  } = {};\n\n  public getSceneConfig(sceneId: string) {\n    return this.sceneConfigCache[sceneId];\n  }\n\n  public getSceneWarninfo(id: string) {\n    return WarnInfo[id];\n  }\n\n  public setSceneConfig(sceneId: string, config: Partial<ISceneConfig>) {\n    this.sceneConfigCache[sceneId] = {\n      ...defaultSceneConfig,\n      ...config,\n    };\n  }\n\n  public validateSceneConfig(data: object) {\n    return this.validate(this.sceneConfigValidator, data);\n  }\n\n  public validateMapConfig(data: object) {\n    return this.validate(this.mapConfigValidator, data);\n  }\n\n  public getLayerConfig<IChildLayerConfig>(\n    layerId: string,\n  ): Partial<ILayerConfig & ISceneConfig & IChildLayerConfig> {\n    // @ts-ignore\n    return this.layerConfigCache[layerId];\n  }\n\n  public setLayerConfig(\n    sceneId: string,\n    layerId: string,\n    config: Partial<ILayerConfig>,\n  ) {\n    // @ts-ignore\n    this.layerConfigCache[layerId] = {\n      ...merge({}, this.sceneConfigCache[sceneId], defaultLayerConfig, config),\n    };\n  }\n\n  public registerLayerConfigSchemaValidator(layerName: string, schema: object) {\n    if (!this.layerConfigValidatorCache[layerName]) {\n      this.layerConfigValidatorCache[layerName] = ajv.compile(schema);\n    }\n  }\n\n  public validateLayerConfig(layerName: string, data: object) {\n    return this.validate(this.layerConfigValidatorCache[layerName], data);\n  }\n\n  public clean() {\n    this.sceneConfigCache = {};\n    this.layerConfigCache = {};\n  }\n\n  @postConstruct()\n  private registerSceneConfigSchemaValidator() {\n    this.sceneConfigValidator = ajv.compile(sceneConfigSchema);\n    this.mapConfigValidator = ajv.compile(mapConfigSchema);\n  }\n\n  private validate(\n    validateFunc: Ajv.ValidateFunction | undefined,\n    data: object,\n  ) {\n    if (validateFunc) {\n      const valid = validateFunc(data);\n      if (!valid) {\n        return {\n          valid,\n          errors: validateFunc.errors,\n          errorText: ajv.errorsText(validateFunc.errors),\n        };\n      }\n    }\n    return {\n      valid: true,\n      errors: null,\n      errorText: null,\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}