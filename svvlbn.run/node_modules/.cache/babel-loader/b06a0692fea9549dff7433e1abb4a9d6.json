{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport { AttributeType, gl } from '@antv/l7-core';\nimport BaseModel from '../../core/BaseModel';\nimport { PointExtrudeTriangulation } from '../../core/triangulation';\nimport { calculteCentroid } from '../../utils/geo';\nvar pointExtrudeFrag = \"varying vec4 v_color;\\nuniform float u_opacity: 1.0;\\n\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n  gl_FragColor = v_color;\\n  gl_FragColor.a *= u_opacity;\\n\\n  gl_FragColor = filterColor(gl_FragColor);\\n}\\n\";\nvar pointExtrudeVert = \"precision highp float;\\n\\n#define ambientRatio 0.5\\n#define diffuseRatio 0.3\\n#define specularRatio 0.2\\n\\nattribute vec3 a_Position;\\nattribute vec3 a_Pos;\\nattribute vec4 a_Color;\\nattribute vec3 a_Size;\\nattribute vec3 a_Normal;\\n\\nuniform mat4 u_ModelMatrix;\\nvarying vec4 v_color;\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"light\\\"\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n  vec3 size = a_Size * a_Position;\\n\\n  vec2 offset = project_pixel(size.xy);\\n\\n  vec4 project_pos = project_position(vec4(a_Pos.xy, 0., 1.0));\\n  vec4 pos = vec4(project_pos.xy + offset, project_pixel(size.z), 1.0);\\n\\n  float lightWeight = calc_lighting(pos);\\n  v_color =vec4(a_Color.rgb * lightWeight, a_Color.w);\\n\\n  gl_Position = project_common_position_to_clipspace(pos);\\n  setPickingColor(a_PickingColor);\\n}\\n\";\n\nvar ExtrudeModel = function (_BaseModel) {\n  _inherits(ExtrudeModel, _BaseModel);\n\n  function ExtrudeModel() {\n    _classCallCheck(this, ExtrudeModel);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ExtrudeModel).apply(this, arguments));\n  }\n\n  _createClass(ExtrudeModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      var _ref = this.layer.getLayerConfig(),\n          opacity = _ref.opacity;\n\n      return {\n        u_opacity: opacity || 1.0\n      };\n    }\n  }, {\n    key: \"buildModels\",\n    value: function buildModels() {\n      return [this.layer.buildLayerModel({\n        moduleName: 'pointExtrude2',\n        vertexShader: pointExtrudeVert,\n        fragmentShader: pointExtrudeFrag,\n        triangulation: PointExtrudeTriangulation,\n        blend: this.getBlend()\n      })];\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'size',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Size',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 3,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var size = feature.size;\n\n            if (size) {\n              var buffersize = [];\n\n              if (Array.isArray(size)) {\n                buffersize = size.length === 2 ? [size[0], size[0], size[1]] : size;\n              }\n\n              if (!Array.isArray(size)) {\n                buffersize = [size];\n              }\n\n              return buffersize;\n            } else {\n              return [2, 2, 2];\n            }\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'normal',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Normal',\n          buffer: {\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 3,\n          update: function update(feature, featureIdx, vertex, attributeIdx, normal) {\n            return normal;\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'pos',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Pos',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 3,\n          update: function update(feature, featureIdx) {\n            var coordinates = calculteCentroid(feature.coordinates);\n            return [coordinates[0], coordinates[1], 0];\n          }\n        }\n      });\n    }\n  }]);\n\n  return ExtrudeModel;\n}(BaseModel);\n\nexport { ExtrudeModel as default };","map":{"version":3,"sources":["../../../src/point/models/extrude.ts"],"names":["ExtrudeModel","BaseModel","opacity","u_opacity","moduleName","vertexShader","fragmentShader","triangulation","blend","name","type","AttributeType","descriptor","buffer","usage","gl","data","FLOAT","size","update","feature","buffersize","Array","coordinates","calculteCentroid"],"mappings":"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","sourcesContent":["import { AttributeType, gl, IEncodeFeature, IModel } from '@antv/l7-core';\nimport BaseModel from '../../core/BaseModel';\nimport { PointExtrudeTriangulation } from '../../core/triangulation';\nimport { calculteCentroid } from '../../utils/geo';\nimport pointExtrudeFrag from '../shaders/extrude_frag.glsl';\nimport pointExtrudeVert from '../shaders/extrude_vert.glsl';\ninterface IPointLayerStyleOptions {\n  opacity: number;\n}\nexport default class ExtrudeModel extends BaseModel {\n  public getUninforms() {\n    const { opacity } = this.layer.getLayerConfig() as IPointLayerStyleOptions;\n    return {\n      u_opacity: opacity || 1.0,\n    };\n  }\n\n  public buildModels(): IModel[] {\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'pointExtrude2',\n        vertexShader: pointExtrudeVert,\n        fragmentShader: pointExtrudeFrag,\n        triangulation: PointExtrudeTriangulation,\n        blend: this.getBlend(),\n      }),\n    ];\n  }\n  protected registerBuiltinAttributes() {\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 3,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size } = feature;\n          if (size) {\n            let buffersize: number[] = [];\n            if (Array.isArray(size)) {\n              buffersize =\n                size.length === 2 ? [size[0], size[0], size[1]] : size;\n            }\n            if (!Array.isArray(size)) {\n              buffersize = [size];\n            }\n            return buffersize;\n          } else {\n            return [2, 2, 2];\n          }\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'normal',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Normal',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.STATIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 3,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n          normal: number[],\n        ) => {\n          return normal;\n        },\n      },\n    });\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'pos',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Pos',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 3,\n        update: (feature: IEncodeFeature, featureIdx: number) => {\n          const coordinates = calculteCentroid(feature.coordinates);\n          return [coordinates[0], coordinates[1], 0];\n        },\n      },\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}