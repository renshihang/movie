{"ast":null,"code":"import _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;\n\nimport { TYPES } from '@antv/l7-core';\nimport { rgb2arr } from '@antv/l7-utils';\nimport { inject, injectable } from 'inversify';\nvar DataMappingPlugin = (_dec = injectable(), _dec2 = inject(TYPES.IGlobalConfigService), _dec3 = inject(TYPES.ILogService), _dec(_class = (_class2 = (_temp = function () {\n  function DataMappingPlugin() {\n    _classCallCheck(this, DataMappingPlugin);\n\n    _initializerDefineProperty(this, \"configService\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"logger\", _descriptor2, this);\n  }\n\n  _createClass(DataMappingPlugin, [{\n    key: \"apply\",\n    value: function apply(layer, _ref) {\n      var _this = this;\n\n      var styleAttributeService = _ref.styleAttributeService;\n      layer.hooks.init.tap('DataMappingPlugin', function () {\n        _this.generateMaping(layer, {\n          styleAttributeService: styleAttributeService\n        });\n      });\n      layer.hooks.beforeRenderData.tap('DataMappingPlugin', function (flag) {\n        if (flag || layer.dataState.dataMappingNeedUpdate) {\n          layer.dataState.dataMappingNeedUpdate = false;\n\n          _this.generateMaping(layer, {\n            styleAttributeService: styleAttributeService\n          });\n\n          return true;\n        }\n\n        return false;\n      });\n      layer.hooks.beforeRender.tap('DataMappingPlugin', function () {\n        var attributes = styleAttributeService.getLayerStyleAttributes() || [];\n        var dataArray = layer.getSource().data.dataArray;\n        var attributesToRemapping = attributes.filter(function (attribute) {\n          return attribute.needRemapping;\n        });\n\n        if (attributesToRemapping.length) {\n          layer.setEncodedData(_this.mapping(attributesToRemapping, dataArray));\n\n          _this.logger.debug('remapping finished');\n        }\n      });\n    }\n  }, {\n    key: \"generateMaping\",\n    value: function generateMaping(layer, _ref2) {\n      var _this2 = this;\n\n      var styleAttributeService = _ref2.styleAttributeService;\n      var attributes = styleAttributeService.getLayerStyleAttributes() || [];\n      var filter = styleAttributeService.getLayerStyleAttribute('filter');\n      var dataArray = layer.getSource().data.dataArray;\n      var filterData = dataArray;\n\n      if (filter === null || filter === void 0 ? void 0 : filter.scale) {\n        filterData = dataArray.filter(function (record) {\n          return _this2.applyAttributeMapping(filter, record)[0];\n        });\n      }\n\n      if (!filterData) {\n        return;\n      }\n\n      layer.setEncodedData(this.mapping(attributes, filterData));\n    }\n  }, {\n    key: \"mapping\",\n    value: function mapping(attributes, data) {\n      var _this3 = this;\n\n      return data.map(function (record) {\n        var encodeRecord = {\n          id: record._id,\n          coordinates: record.coordinates\n        };\n        attributes.filter(function (attribute) {\n          return attribute.scale !== undefined;\n        }).forEach(function (attribute) {\n          var values = _this3.applyAttributeMapping(attribute, record);\n\n          attribute.needRemapping = false;\n\n          if (attribute.name === 'color') {\n            values = values.map(function (c) {\n              return rgb2arr(c);\n            });\n          }\n\n          encodeRecord[attribute.name] = Array.isArray(values) && values.length === 1 ? values[0] : values;\n        });\n        return encodeRecord;\n      });\n    }\n  }, {\n    key: \"applyAttributeMapping\",\n    value: function applyAttributeMapping(attribute, record) {\n      var _attribute$scale;\n\n      if (!attribute.scale) {\n        return [];\n      }\n\n      var scalers = (attribute === null || attribute === void 0 ? void 0 : (_attribute$scale = attribute.scale) === null || _attribute$scale === void 0 ? void 0 : _attribute$scale.scalers) || [];\n      var params = [];\n      scalers.forEach(function (_ref3) {\n        var _attribute$scale2;\n\n        var field = _ref3.field;\n\n        if (record.hasOwnProperty(field) || ((_attribute$scale2 = attribute.scale) === null || _attribute$scale2 === void 0 ? void 0 : _attribute$scale2.type) === 'variable') {\n          params.push(record[field]);\n        }\n      });\n      return attribute.mapping ? attribute.mapping(params) : [];\n    }\n  }]);\n\n  return DataMappingPlugin;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"configService\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"logger\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);\nexport { DataMappingPlugin as default };","map":{"version":3,"sources":["../../src/plugins/DataMappingPlugin.ts"],"names":["injectable","DataMappingPlugin","inject","TYPES","layer","styleAttributeService","flag","attributes","dataArray","attributesToRemapping","attribute","filter","filterData","data","encodeRecord","id","record","coordinates","values","rgb2arr","Array","scalers","params","field"],"mappings":"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","sourcesContent":["import {\n  IEncodeFeature,\n  IGlobalConfigService,\n  ILayer,\n  ILayerPlugin,\n  ILogService,\n  IParseDataItem,\n  IStyleAttribute,\n  IStyleAttributeService,\n  TYPES,\n} from '@antv/l7-core';\nimport { rgb2arr } from '@antv/l7-utils';\nimport { inject, injectable } from 'inversify';\n\n@injectable()\nexport default class DataMappingPlugin implements ILayerPlugin {\n  @inject(TYPES.IGlobalConfigService)\n  private readonly configService: IGlobalConfigService;\n\n  @inject(TYPES.ILogService)\n  private readonly logger: ILogService;\n\n  public apply(\n    layer: ILayer,\n    {\n      styleAttributeService,\n    }: { styleAttributeService: IStyleAttributeService },\n  ) {\n    layer.hooks.init.tap('DataMappingPlugin', () => {\n      this.generateMaping(layer, { styleAttributeService });\n    });\n\n    layer.hooks.beforeRenderData.tap('DataMappingPlugin', (flag) => {\n      if (flag || layer.dataState.dataMappingNeedUpdate) {\n        layer.dataState.dataMappingNeedUpdate = false;\n        this.generateMaping(layer, { styleAttributeService });\n        return true;\n      }\n      return false;\n    });\n\n    // remapping before render\n    layer.hooks.beforeRender.tap('DataMappingPlugin', () => {\n      const attributes = styleAttributeService.getLayerStyleAttributes() || [];\n      const { dataArray } = layer.getSource().data;\n      const attributesToRemapping = attributes.filter(\n        (attribute) => attribute.needRemapping,\n      );\n      if (attributesToRemapping.length) {\n        layer.setEncodedData(this.mapping(attributesToRemapping, dataArray));\n        this.logger.debug('remapping finished');\n      }\n    });\n  }\n  private generateMaping(\n    layer: ILayer,\n    {\n      styleAttributeService,\n    }: { styleAttributeService: IStyleAttributeService },\n  ) {\n    const attributes = styleAttributeService.getLayerStyleAttributes() || [];\n    const filter = styleAttributeService.getLayerStyleAttribute('filter');\n    const { dataArray } = layer.getSource().data;\n    let filterData = dataArray;\n    // 数据过滤完 在执行数据映射\n    if (filter?.scale) {\n      filterData = dataArray.filter((record: IParseDataItem) => {\n        return this.applyAttributeMapping(filter, record)[0];\n      });\n    }\n\n    // TODO: FIXME\n    if (!filterData) {\n      return;\n    }\n    // mapping with source data\n    layer.setEncodedData(this.mapping(attributes, filterData));\n  }\n\n  private mapping(\n    attributes: IStyleAttribute[],\n    data: IParseDataItem[],\n  ): IEncodeFeature[] {\n    return data.map((record: IParseDataItem) => {\n      const encodeRecord: IEncodeFeature = {\n        id: record._id,\n        coordinates: record.coordinates,\n      };\n      attributes\n        .filter((attribute) => attribute.scale !== undefined)\n        .forEach((attribute: IStyleAttribute) => {\n          let values = this.applyAttributeMapping(attribute, record);\n          attribute.needRemapping = false;\n\n          // TODO: 支持每个属性配置 postprocess\n          if (attribute.name === 'color') {\n            values = values.map((c: unknown) => {\n              return rgb2arr(c as string);\n            });\n          }\n          // @ts-ignore\n          encodeRecord[attribute.name] =\n            Array.isArray(values) && values.length === 1 ? values[0] : values;\n        });\n      return encodeRecord;\n    }) as IEncodeFeature[];\n  }\n\n  private applyAttributeMapping(\n    attribute: IStyleAttribute,\n    record: { [key: string]: unknown },\n  ) {\n    if (!attribute.scale) {\n      return [];\n    }\n    const scalers = attribute?.scale?.scalers || [];\n    const params: unknown[] = [];\n\n    scalers.forEach(({ field }) => {\n      if (\n        record.hasOwnProperty(field) ||\n        attribute.scale?.type === 'variable'\n      ) {\n        params.push(record[field]);\n      }\n    });\n    return attribute.mapping ? attribute.mapping(params) : [];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}