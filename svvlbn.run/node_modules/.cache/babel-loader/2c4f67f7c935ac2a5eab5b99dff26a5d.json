{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Hook = require(\"./Hook\");\n\nconst HookCodeFactory = require(\"./HookCodeFactory\");\n\nclass SyncBailHookCodeFactory extends HookCodeFactory {\n  content({\n    onError,\n    onResult,\n    resultReturns,\n    onDone,\n    rethrowIfPossible\n  }) {\n    return this.callTapsSeries({\n      onError: (i, err) => onError(err),\n      onResult: (i, result, next) => `if(${result} !== undefined) {\\n${onResult(result)};\\n} else {\\n${next()}}\\n`,\n      resultReturns,\n      onDone,\n      rethrowIfPossible\n    });\n  }\n\n}\n\nconst factory = new SyncBailHookCodeFactory();\n\nconst TAP_ASYNC = () => {\n  throw new Error(\"tapAsync is not supported on a SyncBailHook\");\n};\n\nconst TAP_PROMISE = () => {\n  throw new Error(\"tapPromise is not supported on a SyncBailHook\");\n};\n\nconst COMPILE = function (options) {\n  factory.setup(this, options);\n  return factory.create(options);\n};\n\nfunction SyncBailHook(args = [], name = undefined) {\n  const hook = new Hook(args, name);\n  hook.constructor = SyncBailHook;\n  hook.tapAsync = TAP_ASYNC;\n  hook.tapPromise = TAP_PROMISE;\n  hook.compile = COMPILE;\n  return hook;\n}\n\nSyncBailHook.prototype = null;\nmodule.exports = SyncBailHook;","map":{"version":3,"sources":["/Users/renshihang/Desktop/svvlbn.run/node_modules/@antv/l7-core/node_modules/tapable/lib/SyncBailHook.js"],"names":["Hook","require","HookCodeFactory","SyncBailHookCodeFactory","content","onError","onResult","resultReturns","onDone","rethrowIfPossible","callTapsSeries","i","err","result","next","factory","TAP_ASYNC","Error","TAP_PROMISE","COMPILE","options","setup","create","SyncBailHook","args","name","undefined","hook","constructor","tapAsync","tapPromise","compile","prototype","module","exports"],"mappings":"AAAA;;;;AAIA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,mBAAD,CAA/B;;AAEA,MAAME,uBAAN,SAAsCD,eAAtC,CAAsD;AACrDE,EAAAA,OAAO,CAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,QAAX;AAAqBC,IAAAA,aAArB;AAAoCC,IAAAA,MAApC;AAA4CC,IAAAA;AAA5C,GAAD,EAAkE;AACxE,WAAO,KAAKC,cAAL,CAAoB;AAC1BL,MAAAA,OAAO,EAAE,CAACM,CAAD,EAAIC,GAAJ,KAAYP,OAAO,CAACO,GAAD,CADF;AAE1BN,MAAAA,QAAQ,EAAE,CAACK,CAAD,EAAIE,MAAJ,EAAYC,IAAZ,KACR,MAAKD,MAAO,sBAAqBP,QAAQ,CACzCO,MADyC,CAExC,gBAAeC,IAAI,EAAG,KALC;AAM1BP,MAAAA,aAN0B;AAO1BC,MAAAA,MAP0B;AAQ1BC,MAAAA;AAR0B,KAApB,CAAP;AAUA;;AAZoD;;AAetD,MAAMM,OAAO,GAAG,IAAIZ,uBAAJ,EAAhB;;AAEA,MAAMa,SAAS,GAAG,MAAM;AACvB,QAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACA,CAFD;;AAIA,MAAMC,WAAW,GAAG,MAAM;AACzB,QAAM,IAAID,KAAJ,CAAU,+CAAV,CAAN;AACA,CAFD;;AAIA,MAAME,OAAO,GAAG,UAASC,OAAT,EAAkB;AACjCL,EAAAA,OAAO,CAACM,KAAR,CAAc,IAAd,EAAoBD,OAApB;AACA,SAAOL,OAAO,CAACO,MAAR,CAAeF,OAAf,CAAP;AACA,CAHD;;AAKA,SAASG,YAAT,CAAsBC,IAAI,GAAG,EAA7B,EAAiCC,IAAI,GAAGC,SAAxC,EAAmD;AAClD,QAAMC,IAAI,GAAG,IAAI3B,IAAJ,CAASwB,IAAT,EAAeC,IAAf,CAAb;AACAE,EAAAA,IAAI,CAACC,WAAL,GAAmBL,YAAnB;AACAI,EAAAA,IAAI,CAACE,QAAL,GAAgBb,SAAhB;AACAW,EAAAA,IAAI,CAACG,UAAL,GAAkBZ,WAAlB;AACAS,EAAAA,IAAI,CAACI,OAAL,GAAeZ,OAAf;AACA,SAAOQ,IAAP;AACA;;AAEDJ,YAAY,CAACS,SAAb,GAAyB,IAAzB;AAEAC,MAAM,CAACC,OAAP,GAAiBX,YAAjB","sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Hook = require(\"./Hook\");\nconst HookCodeFactory = require(\"./HookCodeFactory\");\n\nclass SyncBailHookCodeFactory extends HookCodeFactory {\n\tcontent({ onError, onResult, resultReturns, onDone, rethrowIfPossible }) {\n\t\treturn this.callTapsSeries({\n\t\t\tonError: (i, err) => onError(err),\n\t\t\tonResult: (i, result, next) =>\n\t\t\t\t`if(${result} !== undefined) {\\n${onResult(\n\t\t\t\t\tresult\n\t\t\t\t)};\\n} else {\\n${next()}}\\n`,\n\t\t\tresultReturns,\n\t\t\tonDone,\n\t\t\trethrowIfPossible\n\t\t});\n\t}\n}\n\nconst factory = new SyncBailHookCodeFactory();\n\nconst TAP_ASYNC = () => {\n\tthrow new Error(\"tapAsync is not supported on a SyncBailHook\");\n};\n\nconst TAP_PROMISE = () => {\n\tthrow new Error(\"tapPromise is not supported on a SyncBailHook\");\n};\n\nconst COMPILE = function(options) {\n\tfactory.setup(this, options);\n\treturn factory.create(options);\n};\n\nfunction SyncBailHook(args = [], name = undefined) {\n\tconst hook = new Hook(args, name);\n\thook.constructor = SyncBailHook;\n\thook.tapAsync = TAP_ASYNC;\n\thook.tapPromise = TAP_PROMISE;\n\thook.compile = COMPILE;\n\treturn hook;\n}\n\nSyncBailHook.prototype = null;\n\nmodule.exports = SyncBailHook;\n"]},"metadata":{},"sourceType":"script"}