{"ast":null,"code":"import _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _uniq from \"lodash/uniq\";\nimport _isString from \"lodash/isString\";\nimport _isNil from \"lodash/isNil\";\n\nvar _scaleMap, _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;\n\nimport { ScaleTypes, StyleScaleType, TYPES } from '@antv/l7-core';\nimport { extent } from 'd3-array';\nimport * as d3 from 'd3-scale';\nimport { inject, injectable } from 'inversify';\nvar dateRegex = /^(?:(?!0000)[0-9]{4}([-/.]+)(?:(?:0?[1-9]|1[0-2])\\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\\1(?:29|30)|(?:0?[13578]|1[02])\\1(?:31))|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)([-/.]?)0?2\\2(?:29))(\\s+([01]|([01][0-9]|2[0-3])):([0-9]|[0-5][0-9]):([0-9]|[0-5][0-9]))?$/;\nvar scaleMap = (_scaleMap = {}, _defineProperty(_scaleMap, ScaleTypes.LINEAR, d3.scaleLinear), _defineProperty(_scaleMap, ScaleTypes.POWER, d3.scalePow), _defineProperty(_scaleMap, ScaleTypes.LOG, d3.scaleLog), _defineProperty(_scaleMap, ScaleTypes.IDENTITY, d3.scaleIdentity), _defineProperty(_scaleMap, ScaleTypes.TIME, d3.scaleTime), _defineProperty(_scaleMap, ScaleTypes.QUANTILE, d3.scaleQuantile), _defineProperty(_scaleMap, ScaleTypes.QUANTIZE, d3.scaleQuantize), _defineProperty(_scaleMap, ScaleTypes.THRESHOLD, d3.scaleThreshold), _defineProperty(_scaleMap, ScaleTypes.CAT, d3.scaleOrdinal), _scaleMap);\nvar FeatureScalePlugin = (_dec = injectable(), _dec2 = inject(TYPES.IGlobalConfigService), _dec3 = inject(TYPES.ILogService), _dec(_class = (_class2 = (_temp = function () {\n  function FeatureScalePlugin() {\n    _classCallCheck(this, FeatureScalePlugin);\n\n    _initializerDefineProperty(this, \"configService\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"logger\", _descriptor2, this);\n\n    this.scaleCache = {};\n    this.scaleOptions = {};\n  }\n\n  _createClass(FeatureScalePlugin, [{\n    key: \"apply\",\n    value: function apply(layer, _ref) {\n      var _this = this;\n\n      var styleAttributeService = _ref.styleAttributeService;\n      layer.hooks.init.tap('FeatureScalePlugin', function () {\n        _this.scaleOptions = layer.getScaleOptions();\n        var attributes = styleAttributeService.getLayerStyleAttributes();\n        var dataArray = layer.getSource().data.dataArray;\n\n        _this.caculateScalesForAttributes(attributes || [], dataArray);\n      });\n      layer.hooks.beforeRenderData.tap('FeatureScalePlugin', function (flag) {\n        if (flag) {\n          _this.scaleOptions = layer.getScaleOptions();\n          var attributes = styleAttributeService.getLayerStyleAttributes();\n          var dataArray = layer.getSource().data.dataArray;\n\n          _this.caculateScalesForAttributes(attributes || [], dataArray);\n\n          return true;\n        }\n\n        return false;\n      });\n      layer.hooks.beforeRender.tap('FeatureScalePlugin', function () {\n        _this.scaleOptions = layer.getScaleOptions();\n        var attributes = styleAttributeService.getLayerStyleAttributes();\n\n        if (attributes) {\n          var dataArray = layer.getSource().data.dataArray;\n          var attributesToRescale = attributes.filter(function (attribute) {\n            return attribute.needRescale;\n          });\n\n          if (attributesToRescale.length) {\n            _this.caculateScalesForAttributes(attributesToRescale, dataArray);\n\n            _this.logger.debug('rescale finished');\n          }\n        }\n      });\n    }\n  }, {\n    key: \"isNumber\",\n    value: function isNumber(n) {\n      return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n  }, {\n    key: \"caculateScalesForAttributes\",\n    value: function caculateScalesForAttributes(attributes, dataArray) {\n      var _this2 = this;\n\n      this.scaleCache = {};\n      attributes.forEach(function (attribute) {\n        if (attribute.scale) {\n          var attributeScale = attribute.scale;\n          var type = attribute.name;\n          attributeScale.names = _this2.parseFields(attribute.scale.field || []);\n          var scales = attributeScale.names.map(function (field) {\n            return _this2.getOrCreateScale(field, attribute, dataArray);\n          });\n\n          if (scales.some(function (scale) {\n            return scale.type === StyleScaleType.VARIABLE;\n          })) {\n            attributeScale.type = StyleScaleType.VARIABLE;\n            scales.forEach(function (scale) {\n              if (!attributeScale.callback) {\n                var _scale$option2;\n\n                if (attributeScale.values && attributeScale.values !== 'text') {\n                  var _scale$option;\n\n                  if (((_scale$option = scale.option) === null || _scale$option === void 0 ? void 0 : _scale$option.type) === 'linear' && attributeScale.values.length > 2) {\n                    var tick = scale.scale.ticks(attributeScale.values.length);\n\n                    if (type === 'color') {\n                      scale.scale.domain(tick);\n                    }\n                  }\n\n                  scale.scale.range(attributeScale.values);\n                } else if (((_scale$option2 = scale.option) === null || _scale$option2 === void 0 ? void 0 : _scale$option2.type) === 'cat') {\n                  scale.scale.range(scale.option.domain);\n                }\n              }\n            });\n          } else {\n            attributeScale.type = StyleScaleType.CONSTANT;\n            attributeScale.values = scales.map(function (scale, index) {\n              return scale.scale(attributeScale.names[index]);\n            });\n          }\n\n          attributeScale.scalers = scales.map(function (scale) {\n            return {\n              field: scale.field,\n              func: scale.scale\n            };\n          });\n          attribute.needRescale = false;\n        }\n      });\n    }\n  }, {\n    key: \"getOrCreateScale\",\n    value: function getOrCreateScale(field, attribute, dataArray) {\n      var _attribute$scale;\n\n      var scalekey = [field, attribute.name].join('_');\n      var values = (_attribute$scale = attribute.scale) === null || _attribute$scale === void 0 ? void 0 : _attribute$scale.values;\n\n      if (this.scaleCache[scalekey]) {\n        return this.scaleCache[scalekey];\n      }\n\n      var styleScale = this.createScale(field, values, dataArray);\n      this.scaleCache[scalekey] = styleScale;\n      return this.scaleCache[scalekey];\n    }\n  }, {\n    key: \"parseFields\",\n    value: function parseFields(field) {\n      if (Array.isArray(field)) {\n        return field;\n      }\n\n      if (_isString(field)) {\n        return field.split('*');\n      }\n\n      return [field];\n    }\n  }, {\n    key: \"createScale\",\n    value: function createScale(field, values, data) {\n      var _find;\n\n      var scaleOption = this.scaleOptions[field];\n      var styleScale = {\n        field: field,\n        scale: undefined,\n        type: StyleScaleType.VARIABLE,\n        option: scaleOption\n      };\n\n      if (!data || !data.length) {\n        if (scaleOption && scaleOption.type) {\n          styleScale.scale = this.createDefaultScale(scaleOption);\n        } else {\n          styleScale.scale = d3.scaleOrdinal([field]);\n          styleScale.type = StyleScaleType.CONSTANT;\n        }\n\n        return styleScale;\n      }\n\n      var firstValue = (_find = data.find(function (d) {\n        return !_isNil(d[field]);\n      })) === null || _find === void 0 ? void 0 : _find[field];\n\n      if (this.isNumber(field) || _isNil(firstValue) && !scaleOption) {\n        styleScale.scale = d3.scaleOrdinal([field]);\n        styleScale.type = StyleScaleType.CONSTANT;\n      } else {\n        var type = scaleOption && scaleOption.type || this.getDefaultType(firstValue);\n\n        if (values === 'text') {\n          type = ScaleTypes.CAT;\n        }\n\n        var cfg = this.createDefaultScaleConfig(type, field, data);\n        Object.assign(cfg, scaleOption);\n        styleScale.scale = this.createDefaultScale(cfg);\n        styleScale.option = cfg;\n      }\n\n      return styleScale;\n    }\n  }, {\n    key: \"getDefaultType\",\n    value: function getDefaultType(firstValue) {\n      var type = ScaleTypes.LINEAR;\n\n      if (typeof firstValue === 'string') {\n        type = dateRegex.test(firstValue) ? ScaleTypes.TIME : ScaleTypes.CAT;\n      }\n\n      return type;\n    }\n  }, {\n    key: \"createDefaultScaleConfig\",\n    value: function createDefaultScaleConfig(type, field, data) {\n      var cfg = {\n        type: type\n      };\n      var values = (data === null || data === void 0 ? void 0 : data.map(function (item) {\n        return item[field];\n      })) || [];\n\n      if (type !== ScaleTypes.CAT && type !== ScaleTypes.QUANTILE) {\n        cfg.domain = extent(values);\n      } else if (type === ScaleTypes.CAT) {\n        cfg.domain = _uniq(values);\n      } else if (type === ScaleTypes.QUANTILE) {\n        cfg.domain = values;\n      }\n\n      return cfg;\n    }\n  }, {\n    key: \"createDefaultScale\",\n    value: function createDefaultScale(_ref2) {\n      var type = _ref2.type,\n          domain = _ref2.domain;\n      var scale = scaleMap[type]();\n\n      if (domain) {\n        scale.domain(domain);\n      }\n\n      return scale;\n    }\n  }]);\n\n  return FeatureScalePlugin;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"configService\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"logger\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);\nexport { FeatureScalePlugin as default };","map":{"version":3,"sources":["../../src/plugins/FeatureScalePlugin.ts"],"names":["dateRegex","scaleMap","ScaleTypes","d3","injectable","FeatureScalePlugin","inject","TYPES","scaleCache","scaleOptions","layer","styleAttributeService","attributes","dataArray","attributesToRescale","attribute","n","isNaN","parseFloat","isFinite","attributeScale","type","scales","scale","StyleScaleType","tick","field","func","scalekey","values","styleScale","Array","data","scaleOption","option","firstValue","d","cfg","Object","item","extent","domain"],"mappings":"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","sourcesContent":["import {\n  IGlobalConfigService,\n  ILayer,\n  ILayerPlugin,\n  ILogService,\n  IScale,\n  IScaleOptions,\n  IStyleAttribute,\n  IStyleAttributeService,\n  IStyleScale,\n  ScaleTypeName,\n  ScaleTypes,\n  StyleScaleType,\n  TYPES,\n} from '@antv/l7-core';\nimport { IParseDataItem } from '@antv/l7-source';\nimport { extent, ticks } from 'd3-array';\nimport * as d3 from 'd3-scale';\nimport { inject, injectable } from 'inversify';\nimport { isNil, isString, uniq } from 'lodash';\n\nconst dateRegex = /^(?:(?!0000)[0-9]{4}([-/.]+)(?:(?:0?[1-9]|1[0-2])\\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\\1(?:29|30)|(?:0?[13578]|1[02])\\1(?:31))|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)([-/.]?)0?2\\2(?:29))(\\s+([01]|([01][0-9]|2[0-3])):([0-9]|[0-5][0-9]):([0-9]|[0-5][0-9]))?$/;\n\nconst scaleMap = {\n  [ScaleTypes.LINEAR]: d3.scaleLinear,\n  [ScaleTypes.POWER]: d3.scalePow,\n  [ScaleTypes.LOG]: d3.scaleLog,\n  [ScaleTypes.IDENTITY]: d3.scaleIdentity,\n  [ScaleTypes.TIME]: d3.scaleTime,\n  [ScaleTypes.QUANTILE]: d3.scaleQuantile,\n  [ScaleTypes.QUANTIZE]: d3.scaleQuantize,\n  [ScaleTypes.THRESHOLD]: d3.scaleThreshold,\n  [ScaleTypes.CAT]: d3.scaleOrdinal,\n};\n\n/**\n * 根据 Source 原始数据为指定字段创建 Scale，保存在 StyleAttribute 上，供下游插件使用\n */\n@injectable()\nexport default class FeatureScalePlugin implements ILayerPlugin {\n  @inject(TYPES.IGlobalConfigService)\n  private readonly configService: IGlobalConfigService;\n\n  @inject(TYPES.ILogService)\n  private readonly logger: ILogService;\n\n  // key = field_attribute name\n  private scaleCache: {\n    [field: string]: IStyleScale;\n  } = {};\n\n  private scaleOptions: IScaleOptions = {};\n\n  public apply(\n    layer: ILayer,\n    {\n      styleAttributeService,\n    }: { styleAttributeService: IStyleAttributeService },\n  ) {\n    layer.hooks.init.tap('FeatureScalePlugin', () => {\n      this.scaleOptions = layer.getScaleOptions();\n      const attributes = styleAttributeService.getLayerStyleAttributes();\n      const { dataArray } = layer.getSource().data;\n      this.caculateScalesForAttributes(attributes || [], dataArray);\n    });\n\n    // 检测数据是不否需要更新\n    layer.hooks.beforeRenderData.tap('FeatureScalePlugin', (flag) => {\n      if (flag) {\n        this.scaleOptions = layer.getScaleOptions();\n        const attributes = styleAttributeService.getLayerStyleAttributes();\n        const { dataArray } = layer.getSource().data;\n        this.caculateScalesForAttributes(attributes || [], dataArray);\n        return true;\n      }\n      return false;\n    });\n\n    layer.hooks.beforeRender.tap('FeatureScalePlugin', () => {\n      this.scaleOptions = layer.getScaleOptions();\n      const attributes = styleAttributeService.getLayerStyleAttributes();\n      if (attributes) {\n        const { dataArray } = layer.getSource().data;\n        const attributesToRescale = attributes.filter(\n          (attribute) => attribute.needRescale,\n        );\n        if (attributesToRescale.length) {\n          this.caculateScalesForAttributes(attributesToRescale, dataArray);\n          this.logger.debug('rescale finished');\n        }\n      }\n    });\n  }\n  private isNumber(n: any) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  private caculateScalesForAttributes(\n    attributes: IStyleAttribute[],\n    dataArray: IParseDataItem[],\n  ) {\n    this.scaleCache = {};\n    attributes.forEach((attribute) => {\n      if (attribute.scale) {\n        // 创建Scale\n        const attributeScale = attribute.scale;\n        const type = attribute.name;\n        attributeScale.names = this.parseFields(attribute!.scale!.field || []);\n        const scales: IStyleScale[] = attributeScale.names.map(\n          (field: string) => {\n            return this.getOrCreateScale(field, attribute, dataArray);\n          },\n        );\n\n        // 为scales 设置值区间\n        if (scales.some((scale) => scale.type === StyleScaleType.VARIABLE)) {\n          attributeScale.type = StyleScaleType.VARIABLE;\n          scales.forEach((scale) => {\n            // 如果设置了回调, 这不需要设置让range\n            if (!attributeScale.callback) {\n              if (attributeScale.values && attributeScale.values !== 'text') {\n                if (\n                  scale.option?.type === 'linear' &&\n                  attributeScale.values.length > 2\n                ) {\n                  const tick = scale.scale.ticks(attributeScale.values.length);\n                  if (type === 'color') {\n                    scale.scale.domain(tick);\n                  }\n                }\n                scale.scale.range(attributeScale.values);\n              } else if (scale.option?.type === 'cat') {\n                // 如果没有设置初值且 类型为cat，range ==domain;\n\n                scale.scale.range(scale.option.domain);\n              }\n            }\n          });\n        } else {\n          // 设置attribute 常量值 常量直接在value取值\n          attributeScale.type = StyleScaleType.CONSTANT;\n          attributeScale.values = scales.map((scale, index) => {\n            return scale.scale(attributeScale.names[index]);\n          });\n        }\n        attributeScale.scalers = scales.map((scale: IStyleScale) => {\n          return {\n            field: scale.field,\n            func: scale.scale,\n          };\n        });\n\n        attribute.needRescale = false;\n      }\n    });\n  }\n  private getOrCreateScale(\n    field: string,\n    attribute: IStyleAttribute,\n    dataArray: IParseDataItem[],\n  ) {\n    const scalekey = [field, attribute.name].join('_');\n    const values = attribute.scale?.values;\n    if (this.scaleCache[scalekey]) {\n      return this.scaleCache[scalekey];\n    }\n    const styleScale = this.createScale(field, values, dataArray);\n    this.scaleCache[scalekey] = styleScale;\n\n    return this.scaleCache[scalekey];\n  }\n\n  /**\n   * @example\n   * 'w*h' => ['w', 'h']\n   * 'w' => ['w']\n   */\n  private parseFields(field: string[] | string): string[] {\n    if (Array.isArray(field)) {\n      return field;\n    }\n    if (isString(field)) {\n      return field.split('*');\n    }\n    return [field];\n  }\n\n  private createScale(\n    field: string,\n    values: unknown[] | string | undefined,\n    data?: IParseDataItem[],\n  ): IStyleScale {\n    // 首先查找全局默认配置例如 color\n    const scaleOption: IScale | undefined = this.scaleOptions[field];\n    const styleScale: IStyleScale = {\n      field,\n      scale: undefined,\n      type: StyleScaleType.VARIABLE,\n      option: scaleOption,\n    };\n\n    if (!data || !data.length) {\n      if (scaleOption && scaleOption.type) {\n        styleScale.scale = this.createDefaultScale(scaleOption);\n      } else {\n        styleScale.scale = d3.scaleOrdinal([field]);\n        styleScale.type = StyleScaleType.CONSTANT;\n      }\n      return styleScale;\n    }\n    const firstValue = data!.find((d) => !isNil(d[field]))?.[field];\n    // 常量 Scale\n    if (this.isNumber(field) || (isNil(firstValue) && !scaleOption)) {\n      styleScale.scale = d3.scaleOrdinal([field]);\n      styleScale.type = StyleScaleType.CONSTANT;\n    } else {\n      // 根据数据类型判断 默认等分位，时间，和枚举类型\n      let type =\n        (scaleOption && scaleOption.type) || this.getDefaultType(firstValue);\n      if (values === 'text') {\n        // text 为内置变 如果是文本则为cat\n        type = ScaleTypes.CAT;\n      }\n      const cfg = this.createDefaultScaleConfig(type, field, data);\n      Object.assign(cfg, scaleOption);\n      styleScale.scale = this.createDefaultScale(cfg);\n      styleScale.option = cfg;\n    }\n    return styleScale;\n  }\n\n  private getDefaultType(firstValue: unknown) {\n    let type = ScaleTypes.LINEAR;\n    if (typeof firstValue === 'string') {\n      type = dateRegex.test(firstValue) ? ScaleTypes.TIME : ScaleTypes.CAT;\n    }\n    return type;\n  }\n\n  private createDefaultScaleConfig(\n    type: ScaleTypeName,\n    field: string,\n    data?: IParseDataItem[],\n  ) {\n    const cfg: IScale = {\n      type,\n    };\n    const values = data?.map((item) => item[field]) || [];\n    // 默认类型为 Quantile Scales https://github.com/d3/d3-scale#quantile-scales\n    if (type !== ScaleTypes.CAT && type !== ScaleTypes.QUANTILE) {\n      cfg.domain = extent(values);\n    } else if (type === ScaleTypes.CAT) {\n      cfg.domain = uniq(values);\n    } else if (type === ScaleTypes.QUANTILE) {\n      cfg.domain = values;\n    }\n    return cfg;\n  }\n\n  private createDefaultScale({ type, domain }: IScale) {\n    // @ts-ignore\n    const scale = scaleMap[type]();\n    if (domain) {\n      scale.domain(domain);\n    }\n    // TODO 其他属性支持\n    return scale;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}