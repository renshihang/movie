{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _temp;\n\nimport { DOM } from '@antv/l7-utils';\nimport elementResizeEvent, { unbind } from 'element-resize-event';\nimport { EventEmitter } from 'eventemitter3';\nimport { inject, injectable } from 'inversify';\nimport { AsyncParallelHook } from 'tapable';\nimport { TYPES } from '../../types';\nimport { createRendererContainer } from '../../utils/dom';\nvar Scene = (_dec = injectable(), _dec2 = inject(TYPES.SceneID), _dec3 = inject(TYPES.IIconService), _dec4 = inject(TYPES.IFontService), _dec5 = inject(TYPES.IControlService), _dec6 = inject(TYPES.ILogService), _dec7 = inject(TYPES.IGlobalConfigService), _dec8 = inject(TYPES.IMapService), _dec9 = inject(TYPES.ICoordinateSystemService), _dec10 = inject(TYPES.IRendererService), _dec11 = inject(TYPES.ILayerService), _dec12 = inject(TYPES.ICameraService), _dec13 = inject(TYPES.IInteractionService), _dec14 = inject(TYPES.IShaderModuleService), _dec15 = inject(TYPES.IMarkerService), _dec16 = inject(TYPES.IPopupService), _dec(_class = (_class2 = (_temp = function (_EventEmitter) {\n  _inherits(Scene, _EventEmitter);\n\n  function Scene() {\n    var _this;\n\n    _classCallCheck(this, Scene);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Scene).call(this));\n\n    _initializerDefineProperty(_this, \"id\", _descriptor, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"iconService\", _descriptor2, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"fontService\", _descriptor3, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"controlService\", _descriptor4, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"logger\", _descriptor5, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"configService\", _descriptor6, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"map\", _descriptor7, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"coordinateSystemService\", _descriptor8, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"rendererService\", _descriptor9, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"layerService\", _descriptor10, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"cameraService\", _descriptor11, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"interactionService\", _descriptor12, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"shaderModuleService\", _descriptor13, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"markerService\", _descriptor14, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"popupService\", _descriptor15, _assertThisInitialized(_this));\n\n    _this.inited = false;\n    _this.initPromise = void 0;\n    _this.rendering = false;\n    _this.$container = void 0;\n    _this.hooks = void 0;\n\n    _this.handleWindowResized = function () {\n      _this.emit('resize');\n\n      if (_this.$container) {\n        var pixelRatio = window.devicePixelRatio;\n        var w = window.innerWidth;\n        var h = window.innerHeight;\n\n        if (_this.$container !== document.body) {\n          var bounds = _this.$container.getBoundingClientRect();\n\n          w = bounds.right - bounds.left;\n          h = bounds.bottom - bounds.top;\n        }\n\n        _this.rendererService.viewport({\n          x: 0,\n          y: 0,\n          width: pixelRatio * w,\n          height: pixelRatio * h\n        });\n\n        DOM.triggerResize();\n        _this.coordinateSystemService.needRefresh = true;\n\n        _this.render();\n      }\n    };\n\n    _this.handleMapCameraChanged = function (viewport) {\n      _this.cameraService.update(viewport);\n\n      _this.render();\n    };\n\n    _this.hooks = {\n      init: new AsyncParallelHook(['config'])\n    };\n    return _this;\n  }\n\n  _createClass(Scene, [{\n    key: \"init\",\n    value: function init(sceneConfig) {\n      var _this2 = this;\n\n      this.configService.setSceneConfig(this.id, sceneConfig);\n\n      var _this$configService$v = this.configService.validateSceneConfig(this.configService.getSceneConfig(this.id)),\n          valid = _this$configService$v.valid,\n          errorText = _this$configService$v.errorText;\n\n      if (!valid) {\n        this.logger.error(errorText || '');\n        return;\n      }\n\n      this.shaderModuleService.registerBuiltinModules();\n      this.iconService.init();\n      this.fontService.init();\n      this.hooks.init.tapPromise('initMap', _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return new Promise(function (resolve) {\n                  _this2.map.onCameraChanged(function (viewport) {\n                    _this2.cameraService.init();\n\n                    _this2.cameraService.update(viewport);\n\n                    resolve();\n                  });\n\n                  _this2.map.init();\n                });\n\n              case 2:\n                _this2.map.onCameraChanged(_this2.handleMapCameraChanged);\n\n                _this2.map.addMarkerContainer();\n\n                _this2.markerService.addMarkers();\n\n                _this2.markerService.addMarkerLayers();\n\n                _this2.popupService.initPopup();\n\n                _this2.interactionService.init();\n\n                _this2.logger.debug(\"map \".concat(_this2.id, \" loaded\"));\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      })));\n      this.hooks.init.tapPromise('initRenderer', _asyncToGenerator(_regeneratorRuntime.mark(function _callee2() {\n        var $container;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                $container = createRendererContainer(_this2.configService.getSceneConfig(_this2.id).id || '');\n                _this2.$container = $container;\n\n                if (!$container) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                _context2.next = 5;\n                return _this2.rendererService.init($container);\n\n              case 5:\n                elementResizeEvent(_this2.$container, _this2.handleWindowResized);\n                window.matchMedia('screen and (-webkit-min-device-pixel-ratio: 1.5)').addListener(_this2.handleWindowResized);\n                _context2.next = 10;\n                break;\n\n              case 9:\n                _this2.logger.error('容器 id 不存在');\n\n              case 10:\n                _this2.logger.debug(\"scene \".concat(_this2.id, \" renderer loaded\"));\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      })));\n      this.initPromise = this.hooks.init.promise(this.configService.getSceneConfig(this.id));\n      this.render();\n    }\n  }, {\n    key: \"addLayer\",\n    value: function addLayer(layer) {\n      this.logger.debug(\"add layer \".concat(layer.name, \" to scene \").concat(this.id));\n      this.layerService.add(layer);\n      this.render();\n    }\n  }, {\n    key: \"render\",\n    value: function () {\n      var _render = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this.rendering) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 2:\n                this.rendering = true;\n\n                if (this.inited) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                _context3.next = 6;\n                return this.initPromise;\n\n              case 6:\n                this.logger.info(' render inited');\n                this.controlService.addControls();\n                this.emit('loaded');\n                this.inited = true;\n\n              case 10:\n                this.layerService.initLayers();\n                this.layerService.renderLayers();\n                this.logger.debug(\"scene \".concat(this.id, \" render\"));\n                this.rendering = false;\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function render() {\n        return _render.apply(this, arguments);\n      }\n\n      return render;\n    }()\n  }, {\n    key: \"getSceneContainer\",\n    value: function getSceneContainer() {\n      return this.$container;\n    }\n  }, {\n    key: \"ExportMap2Png\",\n    value: function ExportMap2Png() {\n      var _this$$container;\n\n      var renderCanvas = (_this$$container = this.$container) === null || _this$$container === void 0 ? void 0 : _this$$container.getElementsByTagName('canvas')[0];\n      this.render();\n      var layersPng = renderCanvas === null || renderCanvas === void 0 ? void 0 : renderCanvas.toDataURL();\n      return layersPng;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.emit('destroy');\n      this.inited = false;\n      this.layerService.destroy();\n      this.interactionService.destroy();\n      this.controlService.destroy();\n      this.markerService.destroy();\n      this.removeAllListeners();\n      this.rendererService.destroy();\n      this.map.destroy();\n      unbind(this.$container, this.handleWindowResized);\n      window.matchMedia('screen and (min-resolution: 2dppx)').removeListener(this.handleWindowResized);\n    }\n  }]);\n\n  return Scene;\n}(EventEmitter), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"id\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"iconService\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"fontService\", [_dec4], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, \"controlService\", [_dec5], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, \"logger\", [_dec6], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, \"configService\", [_dec7], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, \"map\", [_dec8], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, \"coordinateSystemService\", [_dec9], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, \"rendererService\", [_dec10], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, \"layerService\", [_dec11], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, \"cameraService\", [_dec12], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, \"interactionService\", [_dec13], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, \"shaderModuleService\", [_dec14], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, \"markerService\", [_dec15], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, \"popupService\", [_dec16], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);\nexport { Scene as default };","map":{"version":3,"sources":["../../../src/services/scene/SceneService.ts"],"names":["injectable","Scene","EventEmitter","inject","TYPES","inited","initPromise","rendering","$container","hooks","init","sceneConfig","valid","errorText","resolve","createRendererContainer","elementResizeEvent","window","layer","renderCanvas","layersPng","unbind","pixelRatio","w","h","document","bounds","x","y","width","height","DOM"],"mappings":"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","sourcesContent":["import { DOM } from '@antv/l7-utils';\nimport elementResizeEvent, { unbind } from 'element-resize-event';\nimport { EventEmitter } from 'eventemitter3';\nimport { inject, injectable } from 'inversify';\nimport { AsyncParallelHook } from 'tapable';\nimport { TYPES } from '../../types';\nimport { createRendererContainer } from '../../utils/dom';\nimport { IFontService } from '../asset/IFontService';\nimport { IIconService } from '../asset/IIconService';\nimport { ICameraService, IViewport } from '../camera/ICameraService';\nimport { IControlService } from '../component/IControlService';\nimport { IMarkerService } from '../component/IMarkerService';\nimport { IPopupService } from '../component/IPopupService';\nimport { IGlobalConfigService, ISceneConfig } from '../config/IConfigService';\nimport { ICoordinateSystemService } from '../coordinate/ICoordinateSystemService';\nimport { IInteractionService } from '../interaction/IInteractionService';\nimport { ILayer, ILayerService } from '../layer/ILayerService';\nimport { ILogService } from '../log/ILogService';\nimport { IMapCamera, IMapService } from '../map/IMapService';\nimport { IRendererService } from '../renderer/IRendererService';\nimport { IShaderModuleService } from '../shader/IShaderModuleService';\nimport { ISceneService } from './ISceneService';\n\n/**\n * will emit `loaded` `resize` `destroy` event\n */\n@injectable()\nexport default class Scene extends EventEmitter implements ISceneService {\n  @inject(TYPES.SceneID)\n  private readonly id: string;\n  /**\n   * 使用各种 Service\n   */\n  @inject(TYPES.IIconService)\n  private readonly iconService: IIconService;\n\n  @inject(TYPES.IFontService)\n  private readonly fontService: IFontService;\n\n  @inject(TYPES.IControlService)\n  private readonly controlService: IControlService;\n\n  @inject(TYPES.ILogService)\n  private readonly logger: ILogService;\n\n  @inject(TYPES.IGlobalConfigService)\n  private readonly configService: IGlobalConfigService;\n\n  @inject(TYPES.IMapService)\n  private readonly map: IMapService;\n\n  @inject(TYPES.ICoordinateSystemService)\n  private readonly coordinateSystemService: ICoordinateSystemService;\n\n  @inject(TYPES.IRendererService)\n  private readonly rendererService: IRendererService;\n\n  @inject(TYPES.ILayerService)\n  private readonly layerService: ILayerService;\n\n  @inject(TYPES.ICameraService)\n  private readonly cameraService: ICameraService;\n\n  @inject(TYPES.IInteractionService)\n  private readonly interactionService: IInteractionService;\n\n  @inject(TYPES.IShaderModuleService)\n  private readonly shaderModuleService: IShaderModuleService;\n\n  @inject(TYPES.IMarkerService)\n  private readonly markerService: IMarkerService;\n\n  @inject(TYPES.IPopupService)\n  private readonly popupService: IPopupService;\n\n  /**\n   * 是否首次渲染\n   */\n  private inited: boolean = false;\n  private initPromise: Promise<void>;\n\n  // TODO: 改成状态机\n  private rendering: boolean = false;\n\n  /**\n   * canvas 容器\n   */\n  private $container: HTMLDivElement | null;\n\n  private hooks: {\n    init: AsyncParallelHook<unknown>;\n  };\n\n  public constructor() {\n    super();\n    // @see https://github.com/webpack/tapable#usage\n    this.hooks = {\n      /**\n       * 初始化异步任务，可并行：\n       * 1. initMap：初始化地图底图、相机\n       * 2. initRenderer：初始化渲染引擎\n       * 3. initWorker：初始化 Worker\n       */\n      init: new AsyncParallelHook(['config']),\n    };\n  }\n\n  public init(sceneConfig: ISceneConfig) {\n    // 设置场景配置项\n    this.configService.setSceneConfig(this.id, sceneConfig);\n\n    // 校验场景配置项，失败则终止初始化过程\n    const { valid, errorText } = this.configService.validateSceneConfig(\n      this.configService.getSceneConfig(this.id),\n    );\n    if (!valid) {\n      this.logger.error(errorText || '');\n      return;\n    }\n\n    // 初始化 ShaderModule\n    this.shaderModuleService.registerBuiltinModules();\n\n    // 初始化资源管理 图片\n    this.iconService.init();\n    // 字体资源\n    this.fontService.init();\n\n    /**\n     * 初始化底图\n     */\n    this.hooks.init.tapPromise('initMap', async () => {\n      // 等待首次相机同步\n      await new Promise((resolve) => {\n        this.map.onCameraChanged((viewport: IViewport) => {\n          this.cameraService.init();\n          this.cameraService.update(viewport);\n          resolve();\n        });\n        this.map.init();\n      });\n      // this.controlService.addControls();\n      // 重新绑定非首次相机更新事件\n      this.map.onCameraChanged(this.handleMapCameraChanged);\n      this.map.addMarkerContainer();\n\n      // 初始化未加载的marker;\n      this.markerService.addMarkers();\n      this.markerService.addMarkerLayers();\n      this.popupService.initPopup();\n      // 地图初始化之后 才能初始化 container 上的交互\n      this.interactionService.init();\n      this.logger.debug(`map ${this.id} loaded`);\n    });\n\n    /**\n     * 初始化渲染引擎\n     */\n    this.hooks.init.tapPromise('initRenderer', async () => {\n      // 创建底图之上的 container\n      const $container = createRendererContainer(\n        this.configService.getSceneConfig(this.id).id || '',\n      );\n      this.$container = $container;\n      if ($container) {\n        await this.rendererService.init($container);\n        elementResizeEvent(\n          this.$container as HTMLDivElement,\n          this.handleWindowResized,\n        );\n        window\n          .matchMedia('screen and (-webkit-min-device-pixel-ratio: 1.5)')\n          .addListener(this.handleWindowResized);\n      } else {\n        this.logger.error('容器 id 不存在');\n      }\n\n      this.logger.debug(`scene ${this.id} renderer loaded`);\n    });\n    // TODO：init worker, fontAtlas...\n\n    // 执行异步并行初始化任务\n    this.initPromise = this.hooks.init.promise(\n      this.configService.getSceneConfig(this.id),\n    );\n\n    this.render();\n  }\n\n  public addLayer(layer: ILayer) {\n    this.logger.debug(`add layer ${layer.name} to scene ${this.id}`);\n    this.layerService.add(layer);\n    this.render();\n  }\n\n  public async render() {\n    if (this.rendering) {\n      return;\n    }\n\n    this.rendering = true;\n    // 首次初始化，或者地图的容器被强制销毁的需要重新初始化\n    if (!this.inited) {\n      // 还未初始化完成需要等待\n\n      await this.initPromise;\n      // FIXME: 初始化 marker 容器，可以放到 map 初始化方法中？\n\n      this.logger.info(' render inited');\n      this.controlService.addControls();\n      this.emit('loaded');\n      this.inited = true;\n    }\n\n    // 尝试初始化未初始化的图层\n    this.layerService.initLayers();\n    this.layerService.renderLayers();\n    // 组件需要等待layer 初始化完成之后添加\n\n    this.logger.debug(`scene ${this.id} render`);\n\n    this.rendering = false;\n  }\n\n  public getSceneContainer(): HTMLDivElement {\n    return this.$container as HTMLDivElement;\n  }\n\n  public ExportMap2Png(): string {\n    const renderCanvas = this.$container?.getElementsByTagName('canvas')[0];\n    this.render();\n    const layersPng = renderCanvas?.toDataURL() as string;\n    return layersPng;\n  }\n\n  public destroy() {\n    this.emit('destroy');\n    this.inited = false;\n    this.layerService.destroy();\n    this.interactionService.destroy();\n    this.controlService.destroy();\n    this.markerService.destroy();\n    this.removeAllListeners();\n    this.rendererService.destroy();\n    this.map.destroy();\n    unbind(this.$container as HTMLDivElement, this.handleWindowResized);\n    window\n      .matchMedia('screen and (min-resolution: 2dppx)')\n      .removeListener(this.handleWindowResized);\n  }\n\n  private handleWindowResized = () => {\n    this.emit('resize');\n    // @ts-check\n    if (this.$container) {\n      // recalculate the viewport's size and call gl.viewport\n      // @see https://github.com/regl-project/regl/blob/master/lib/webgl.js#L24-L38\n      const pixelRatio = window.devicePixelRatio;\n      let w = window.innerWidth;\n      let h = window.innerHeight;\n      if (this.$container !== document.body) {\n        const bounds = this.$container.getBoundingClientRect();\n        w = bounds.right - bounds.left;\n        h = bounds.bottom - bounds.top;\n      }\n\n      this.rendererService.viewport({\n        x: 0,\n        y: 0,\n        width: pixelRatio * w,\n        height: pixelRatio * h,\n      });\n      // 触发 Map， canvas\n      DOM.triggerResize();\n      this.coordinateSystemService.needRefresh = true;\n      //  repaint layers\n      this.render();\n    }\n  };\n\n  private handleMapCameraChanged = (viewport: IViewport) => {\n    this.cameraService.update(viewport);\n    this.render();\n  };\n}\n"]},"metadata":{},"sourceType":"module"}