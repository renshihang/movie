{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar _dec, _class, _temp;\n\nimport { DOM } from '@antv/l7-utils';\nimport { injectable } from 'inversify';\nimport { TYPES } from '../../types';\nvar ControlService = (_dec = injectable(), _dec(_class = (_temp = function () {\n  function ControlService() {\n    _classCallCheck(this, ControlService);\n\n    this.container = void 0;\n    this.controlCorners = void 0;\n    this.controlContainer = void 0;\n    this.scene = void 0;\n    this.mapsService = void 0;\n    this.controls = [];\n    this.unAddControls = [];\n  }\n\n  _createClass(ControlService, [{\n    key: \"init\",\n    value: function init(cfg, sceneContainer) {\n      this.container = cfg.container;\n      this.scene = sceneContainer;\n      this.mapsService = sceneContainer.get(TYPES.IMapService);\n      this.initControlPos();\n    }\n  }, {\n    key: \"addControl\",\n    value: function addControl(ctr, sceneContainer) {\n      var mapsService = sceneContainer.get(TYPES.IMapService);\n\n      if (mapsService.map) {\n        ctr.addTo(this.scene);\n        this.controls.push(ctr);\n      } else {\n        this.unAddControls.push(ctr);\n      }\n    }\n  }, {\n    key: \"removeControl\",\n    value: function removeControl(ctr) {\n      var index = this.controls.indexOf(ctr);\n\n      if (index > -1) {\n        this.controls.splice(index, 1);\n      }\n\n      ctr.remove();\n      return this;\n    }\n  }, {\n    key: \"addControls\",\n    value: function addControls() {\n      var _this = this;\n\n      this.unAddControls.forEach(function (ctr) {\n        ctr.addTo(_this.scene);\n\n        _this.controls.push(ctr);\n      });\n      this.unAddControls = [];\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.controls[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var ctr = _step.value;\n          ctr.remove();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.controls = [];\n      this.clearControlPos();\n    }\n  }, {\n    key: \"initControlPos\",\n    value: function initControlPos() {\n      var corners = this.controlCorners = {};\n      var l = 'l7-';\n      var container = this.controlContainer = DOM.create('div', l + 'control-container', this.container);\n\n      function createCorner(vSide, hSide) {\n        var className = l + vSide + ' ' + l + hSide;\n        corners[vSide + hSide] = DOM.create('div', className, container);\n      }\n\n      createCorner('top', 'left');\n      createCorner('top', 'right');\n      createCorner('bottom', 'left');\n      createCorner('bottom', 'right');\n    }\n  }, {\n    key: \"clearControlPos\",\n    value: function clearControlPos() {\n      for (var i in this.controlCorners) {\n        if (this.controlCorners[i]) {\n          DOM.remove(this.controlCorners[i]);\n        }\n      }\n\n      if (this.controlContainer) {\n        DOM.remove(this.controlContainer);\n      }\n\n      delete this.controlCorners;\n      delete this.controlContainer;\n    }\n  }]);\n\n  return ControlService;\n}(), _temp)) || _class);\nexport { ControlService as default };","map":{"version":3,"sources":["../../../src/services/component/ControlService.ts"],"names":["injectable","ControlService","container","controlCorners","controlContainer","scene","mapsService","controls","unAddControls","cfg","sceneContainer","TYPES","ctr","index","corners","l","DOM","className","vSide","createCorner"],"mappings":"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","sourcesContent":["import { DOM } from '@antv/l7-utils';\nimport { Container, injectable } from 'inversify';\nimport { TYPES } from '../../types';\nimport { IMapService } from '../map/IMapService';\nimport {\n  IControl,\n  IControlCorners,\n  IControlService,\n  IControlServiceCfg,\n} from './IControlService';\n@injectable()\nexport default class ControlService implements IControlService {\n  public container: HTMLElement;\n  public controlCorners: IControlCorners;\n  public controlContainer: HTMLElement;\n  public scene: Container;\n  public mapsService: IMapService;\n  private controls: IControl[] = [];\n  private unAddControls: IControl[] = [];\n  public init(cfg: IControlServiceCfg, sceneContainer: Container) {\n    this.container = cfg.container;\n    this.scene = sceneContainer;\n    this.mapsService = sceneContainer.get<IMapService>(TYPES.IMapService);\n    this.initControlPos();\n  }\n  public addControl(ctr: IControl, sceneContainer: Container): void {\n    const mapsService = sceneContainer.get<IMapService>(TYPES.IMapService);\n    if (mapsService.map) {\n      ctr.addTo(this.scene); // scene对象\n      this.controls.push(ctr);\n    } else {\n      this.unAddControls.push(ctr);\n    }\n  }\n  public removeControl(ctr: IControl): this {\n    const index = this.controls.indexOf(ctr);\n    if (index > -1) {\n      this.controls.splice(index, 1);\n    }\n    ctr.remove();\n    return this;\n  }\n\n  public addControls() {\n    this.unAddControls.forEach((ctr: IControl) => {\n      ctr.addTo(this.scene); // scene对象\n      this.controls.push(ctr);\n    });\n    this.unAddControls = [];\n  }\n\n  public destroy(): void {\n    for (const ctr of this.controls) {\n      ctr.remove();\n    }\n    this.controls = [];\n    this.clearControlPos();\n  }\n\n  private initControlPos() {\n    const corners: IControlCorners = (this.controlCorners = {});\n    const l = 'l7-';\n    const container = (this.controlContainer = DOM.create(\n      'div',\n      l + 'control-container',\n      this.container,\n    ));\n\n    function createCorner(vSide: string, hSide: string) {\n      const className = l + vSide + ' ' + l + hSide;\n\n      corners[vSide + hSide] = DOM.create('div', className, container);\n    }\n\n    createCorner('top', 'left');\n    createCorner('top', 'right');\n    createCorner('bottom', 'left');\n    createCorner('bottom', 'right');\n  }\n\n  private clearControlPos() {\n    for (const i in this.controlCorners) {\n      if (this.controlCorners[i]) {\n        DOM.remove(this.controlCorners[i]);\n      }\n    }\n    if (this.controlContainer) {\n      DOM.remove(this.controlContainer);\n    }\n    delete this.controlCorners;\n    delete this.controlContainer;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}