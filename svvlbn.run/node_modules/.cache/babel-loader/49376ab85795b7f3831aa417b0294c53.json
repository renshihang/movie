{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nvar _dec, _class;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { injectable } from 'inversify';\nvar colorHalftone = \"varying vec2 v_UV;\\n\\nuniform sampler2D u_Texture;\\nuniform vec2 u_ViewportSize: [1.0, 1.0];\\nuniform vec2 u_Center : [0.5, 0.5];\\nuniform float u_Angle : 0;\\nuniform float u_Size : 8;\\n\\n#pragma include \\\"common\\\"\\n\\nfloat scale = PI / u_Size;\\n\\nfloat pattern(float u_Angle, vec2 texSize, vec2 texCoord) {\\n  float s = sin(u_Angle), c = cos(u_Angle);\\n  vec2 tex = texCoord * texSize - u_Center * texSize;\\n  vec2 point = vec2(\\n    c * tex.x - s * tex.y,\\n    s * tex.x + c * tex.y\\n  ) * scale;\\n  return (sin(point.x) * sin(point.y)) * 4.0;\\n}\\n\\n// https://github.com/evanw/glfx.js/blob/master/src/filters/fun/colorhalftone.js\\nvec4 colorHalftone_filterColor(vec4 color, vec2 texSize, vec2 texCoord) {\\n  vec3 cmy = 1.0 - color.rgb;\\n  float k = min(cmy.x, min(cmy.y, cmy.z));\\n  cmy = (cmy - k) / (1.0 - k);\\n  cmy = clamp(\\n    cmy * 10.0 - 3.0 + vec3(\\n      pattern(u_Angle + 0.26179, texSize, texCoord),\\n      pattern(u_Angle + 1.30899, texSize, texCoord),\\n      pattern(u_Angle, texSize, texCoord)\\n    ),\\n    0.0,\\n    1.0\\n  );\\n  k = clamp(k * 10.0 - 5.0 + pattern(u_Angle + 0.78539, texSize, texCoord), 0.0, 1.0);\\n  return vec4(1.0 - cmy - k, color.a);\\n}\\n\\nvoid main() {\\n  gl_FragColor = vec4(texture2D(u_Texture, v_UV));\\n  gl_FragColor = colorHalftone_filterColor(gl_FragColor, u_ViewportSize, v_UV);\\n}\";\nvar quad = \"attribute vec2 a_Position;\\n\\nvarying vec2 v_UV;\\n\\nvoid main() {\\n  v_UV = 0.5 * (a_Position + 1.0);\\n  gl_Position = vec4(a_Position, 0., 1.);\\n}\";\nimport BasePostProcessingPass from '../BasePostProcessingPass';\nvar ColorHalftonePass = (_dec = injectable(), _dec(_class = function (_BasePostProcessingPa) {\n  _inherits(ColorHalftonePass, _BasePostProcessingPa);\n\n  function ColorHalftonePass() {\n    _classCallCheck(this, ColorHalftonePass);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ColorHalftonePass).apply(this, arguments));\n  }\n\n  _createClass(ColorHalftonePass, [{\n    key: \"setupShaders\",\n    value: function setupShaders() {\n      this.shaderModuleService.registerModule('colorhalftone-pass', {\n        vs: quad,\n        fs: colorHalftone\n      });\n\n      var _this$shaderModuleSer = this.shaderModuleService.getModule('colorhalftone-pass'),\n          vs = _this$shaderModuleSer.vs,\n          fs = _this$shaderModuleSer.fs,\n          uniforms = _this$shaderModuleSer.uniforms;\n\n      var _this$rendererService = this.rendererService.getViewportSize(),\n          width = _this$rendererService.width,\n          height = _this$rendererService.height;\n\n      return {\n        vs: vs,\n        fs: fs,\n        uniforms: _objectSpread({}, uniforms, {\n          u_ViewportSize: [width, height]\n        })\n      };\n    }\n  }]);\n\n  return ColorHalftonePass;\n}(BasePostProcessingPass)) || _class);\nexport { ColorHalftonePass as default };","map":{"version":3,"sources":["../../../../../src/services/renderer/passes/post-processing/ColorHalfTonePass.ts"],"names":["injectable","ColorHalftonePass","BasePostProcessingPass","vs","fs","colorHalftone","uniforms","width","height","u_ViewportSize"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,UAAA,QAAA,WAAA;;;AAGA,OAAA,sBAAA,MAAA,2BAAA;IASqBC,iB,WADpBD,UAAU,E;;;;;;;;;;;mCAIgB;AACvB,WAAA,mBAAA,CAAA,cAAA,CAAA,oBAAA,EAA8D;AAC5DG,QAAAA,EAAE,EAD0D,IAAA;AAE5DC,QAAAA,EAAE,EAAEC;AAFwD,OAA9D;;AADuB,UAAA,qBAAA,GAMM,KAAA,mBAAA,CAAA,SAAA,CANN,oBAMM,CANN;AAAA,UAMfF,EANe,GAAA,qBAAA,CAAA,EAAA;AAAA,UAMXC,EANW,GAAA,qBAAA,CAAA,EAAA;AAAA,UAMPE,QANO,GAAA,qBAAA,CAAA,QAAA;;AAAA,UAAA,qBAAA,GASG,KAAA,eAAA,CATH,eASG,EATH;AAAA,UASfC,KATe,GAAA,qBAAA,CAAA,KAAA;AAAA,UASRC,MATQ,GAAA,qBAAA,CAAA,MAAA;;AAWvB,aAAO;AACLL,QAAAA,EAAE,EADG,EAAA;AAELC,QAAAA,EAAE,EAFG,EAAA;AAGLE,QAAAA,QAAQ,EAAA,aAAA,CAAA,EAAA,EAAA,QAAA,EAAA;AAENG,UAAAA,cAAc,EAAE,CAAA,KAAA,EAAA,MAAA;AAFV,SAAA;AAHH,OAAP;AAQD;;;;EAtB4CP,sB;SAA1BD,iB","sourcesContent":["import { injectable } from 'inversify';\nimport colorHalftone from '../../../../shaders/post-processing/colorhalftone.glsl';\nimport quad from '../../../../shaders/post-processing/quad.glsl';\nimport BasePostProcessingPass from '../BasePostProcessingPass';\n\nexport interface IColorHalftonePassConfig {\n  center: [number, number];\n  angle: number;\n  size: number;\n}\n\n@injectable()\nexport default class ColorHalftonePass extends BasePostProcessingPass<\n  IColorHalftonePassConfig\n> {\n  protected setupShaders() {\n    this.shaderModuleService.registerModule('colorhalftone-pass', {\n      vs: quad,\n      fs: colorHalftone,\n    });\n\n    const { vs, fs, uniforms } = this.shaderModuleService.getModule(\n      'colorhalftone-pass',\n    );\n    const { width, height } = this.rendererService.getViewportSize();\n\n    return {\n      vs,\n      fs,\n      uniforms: {\n        ...uniforms,\n        u_ViewportSize: [width, height],\n      },\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}