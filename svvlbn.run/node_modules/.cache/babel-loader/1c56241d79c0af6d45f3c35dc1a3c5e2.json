{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar _dec, _class, _temp;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { LRUCache } from '@antv/l7-utils';\nimport TinySDF from '@mapbox/tiny-sdf';\nimport { injectable } from 'inversify';\nimport { buildMapping } from '../../utils/font_util';\nexport var DEFAULT_CHAR_SET = getDefaultCharacterSet();\nexport var DEFAULT_FONT_FAMILY = 'sans-serif';\nexport var DEFAULT_FONT_WEIGHT = '800';\nexport var DEFAULT_FONT_SIZE = 24;\nexport var DEFAULT_BUFFER = 3;\nexport var DEFAULT_CUTOFF = 0.25;\nexport var DEFAULT_RADIUS = 8;\nvar MAX_CANVAS_WIDTH = 1024;\nvar BASELINE_SCALE = 1.0;\nvar HEIGHT_SCALE = 1.0;\nvar CACHE_LIMIT = 3;\nvar VALID_PROPS = ['fontFamily', 'fontWeight', 'characterSet', 'fontSize', 'sdf', 'buffer', 'cutoff', 'radius'];\n\nfunction getDefaultCharacterSet() {\n  var charSet = [];\n\n  for (var i = 32; i < 128; i++) {\n    charSet.push(String.fromCharCode(i));\n  }\n\n  return charSet;\n}\n\nfunction setTextStyle(ctx, fontFamily, fontSize, fontWeight) {\n  ctx.font = \"\".concat(fontWeight, \" \").concat(fontSize, \"px \").concat(fontFamily);\n  ctx.fillStyle = 'black';\n  ctx.textBaseline = 'middle';\n}\n\nfunction populateAlphaChannel(alphaChannel, imageData) {\n  for (var i = 0; i < alphaChannel.length; i++) {\n    imageData.data[4 * i + 3] = alphaChannel[i];\n  }\n}\n\nvar FontService = (_dec = injectable(), _dec(_class = (_temp = function () {\n  function FontService() {\n    _classCallCheck(this, FontService);\n\n    this.fontAtlas = void 0;\n    this.fontOptions = void 0;\n    this.key = void 0;\n    this.cache = new LRUCache(CACHE_LIMIT);\n  }\n\n  _createClass(FontService, [{\n    key: \"init\",\n    value: function init() {\n      this.cache.clear();\n      this.fontOptions = {\n        fontFamily: DEFAULT_FONT_FAMILY,\n        fontWeight: DEFAULT_FONT_WEIGHT,\n        characterSet: DEFAULT_CHAR_SET,\n        fontSize: DEFAULT_FONT_SIZE,\n        buffer: DEFAULT_BUFFER,\n        sdf: true,\n        cutoff: DEFAULT_CUTOFF,\n        radius: DEFAULT_RADIUS\n      };\n      this.key = '';\n    }\n  }, {\n    key: \"setFontOptions\",\n    value: function setFontOptions(option) {\n      this.fontOptions = _objectSpread({}, this.fontOptions, {}, option);\n      this.key = this.getKey();\n      var charSet = this.getNewChars(this.key, this.fontOptions.characterSet);\n      var cachedFontAtlas = this.cache.get(this.key);\n\n      if (cachedFontAtlas && charSet.length === 0) {\n        return;\n      }\n\n      var fontAtlas = this.generateFontAtlas(this.key, charSet, cachedFontAtlas);\n      this.fontAtlas = fontAtlas;\n      this.cache.set(this.key, fontAtlas);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.cache.clear();\n    }\n  }, {\n    key: \"generateFontAtlas\",\n    value: function generateFontAtlas(key, characterSet, cachedFontAtlas) {\n      var _this$fontOptions = this.fontOptions,\n          fontFamily = _this$fontOptions.fontFamily,\n          fontWeight = _this$fontOptions.fontWeight,\n          fontSize = _this$fontOptions.fontSize,\n          buffer = _this$fontOptions.buffer,\n          sdf = _this$fontOptions.sdf,\n          radius = _this$fontOptions.radius,\n          cutoff = _this$fontOptions.cutoff;\n      var canvas = cachedFontAtlas && cachedFontAtlas.data;\n\n      if (!canvas) {\n        canvas = document.createElement('canvas');\n        canvas.width = MAX_CANVAS_WIDTH;\n      }\n\n      var ctx = canvas.getContext('2d');\n      setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n      var _buildMapping = buildMapping(_objectSpread({\n        getFontWidth: function getFontWidth(char) {\n          return ctx.measureText(char).width;\n        },\n        fontHeight: fontSize * HEIGHT_SCALE,\n        buffer: buffer,\n        characterSet: characterSet,\n        maxCanvasWidth: MAX_CANVAS_WIDTH\n      }, cachedFontAtlas && {\n        mapping: cachedFontAtlas.mapping,\n        xOffset: cachedFontAtlas.xOffset,\n        yOffset: cachedFontAtlas.yOffset\n      })),\n          mapping = _buildMapping.mapping,\n          canvasHeight = _buildMapping.canvasHeight,\n          xOffset = _buildMapping.xOffset,\n          yOffset = _buildMapping.yOffset;\n\n      if (canvas.height !== canvasHeight) {\n        var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n        canvas.height = canvasHeight;\n        ctx.putImageData(imageData, 0, 0);\n      }\n\n      setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n      if (sdf) {\n        var tinySDF = new TinySDF(fontSize, buffer, radius, cutoff, fontFamily, fontWeight);\n\n        var _imageData = ctx.getImageData(0, 0, tinySDF.size, tinySDF.size);\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = characterSet[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var char = _step.value;\n            populateAlphaChannel(tinySDF.draw(char), _imageData);\n            ctx.putImageData(_imageData, mapping[char].x, mapping[char].y);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      } else {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = characterSet[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var _char = _step2.value;\n            ctx.fillText(_char, mapping[_char].x, mapping[_char].y + fontSize * BASELINE_SCALE);\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n\n      return {\n        xOffset: xOffset,\n        yOffset: yOffset,\n        mapping: mapping,\n        data: canvas,\n        width: canvas.width,\n        height: canvas.height\n      };\n    }\n  }, {\n    key: \"getKey\",\n    value: function getKey() {\n      var _this$fontOptions2 = this.fontOptions,\n          fontFamily = _this$fontOptions2.fontFamily,\n          fontWeight = _this$fontOptions2.fontWeight,\n          fontSize = _this$fontOptions2.fontSize,\n          buffer = _this$fontOptions2.buffer,\n          sdf = _this$fontOptions2.sdf,\n          radius = _this$fontOptions2.radius,\n          cutoff = _this$fontOptions2.cutoff;\n\n      if (sdf) {\n        return \"\".concat(fontFamily, \" \").concat(fontWeight, \" \").concat(fontSize, \" \").concat(buffer, \" \").concat(radius, \" \").concat(cutoff);\n      }\n\n      return \"\".concat(fontFamily, \" \").concat(fontWeight, \" \").concat(fontSize, \" \").concat(buffer);\n    }\n  }, {\n    key: \"getNewChars\",\n    value: function getNewChars(key, characterSet) {\n      var cachedFontAtlas = this.cache.get(key);\n\n      if (!cachedFontAtlas) {\n        return characterSet;\n      }\n\n      var newChars = [];\n      var cachedMapping = cachedFontAtlas.mapping;\n      var cachedCharSet = new Set(Object.keys(cachedMapping));\n      var charSet = new Set(characterSet);\n      charSet.forEach(function (char) {\n        if (!cachedCharSet.has(char)) {\n          newChars.push(char);\n        }\n      });\n      return newChars;\n    }\n  }, {\n    key: \"scale\",\n    get: function get() {\n      return HEIGHT_SCALE;\n    }\n  }, {\n    key: \"canvas\",\n    get: function get() {\n      var data = this.cache.get(this.key);\n      return data && data.data;\n    }\n  }, {\n    key: \"mapping\",\n    get: function get() {\n      var data = this.cache.get(this.key);\n      return data && data.mapping;\n    }\n  }]);\n\n  return FontService;\n}(), _temp)) || _class);\nexport { FontService as default };","map":{"version":3,"sources":["../../../src/services/asset/FontService.ts"],"names":["DEFAULT_CHAR_SET","getDefaultCharacterSet","DEFAULT_FONT_FAMILY","DEFAULT_FONT_WEIGHT","DEFAULT_FONT_SIZE","DEFAULT_BUFFER","DEFAULT_CUTOFF","DEFAULT_RADIUS","MAX_CANVAS_WIDTH","BASELINE_SCALE","HEIGHT_SCALE","CACHE_LIMIT","VALID_PROPS","charSet","i","String","ctx","alphaChannel","imageData","injectable","FontService","fontAtlas","fontOptions","key","cache","fontFamily","fontWeight","characterSet","fontSize","buffer","sdf","cutoff","radius","data","option","cachedFontAtlas","canvas","document","setTextStyle","mapping","canvasHeight","xOffset","yOffset","buildMapping","getFontWidth","fontHeight","maxCanvasWidth","tinySDF","char","populateAlphaChannel","width","height","newChars","cachedMapping","cachedCharSet","Object"],"mappings":"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","sourcesContent":["import { LRUCache } from '@antv/l7-utils';\n// @ts-ignore\nimport TinySDF from '@mapbox/tiny-sdf';\nimport { inject, injectable } from 'inversify';\nimport { buildMapping } from '../../utils/font_util';\nimport {\n  IFontAtlas,\n  IFontMapping,\n  IFontMappingItem,\n  IFontOptions,\n  IFontService,\n} from './IFontService';\nexport const DEFAULT_CHAR_SET = getDefaultCharacterSet();\nexport const DEFAULT_FONT_FAMILY = 'sans-serif';\nexport const DEFAULT_FONT_WEIGHT = '800';\nexport const DEFAULT_FONT_SIZE = 24;\nexport const DEFAULT_BUFFER = 3;\nexport const DEFAULT_CUTOFF = 0.25;\nexport const DEFAULT_RADIUS = 8;\nconst MAX_CANVAS_WIDTH = 1024;\nconst BASELINE_SCALE = 1.0;\nconst HEIGHT_SCALE = 1.0;\nconst CACHE_LIMIT = 3;\nconst VALID_PROPS = [\n  'fontFamily',\n  'fontWeight',\n  'characterSet',\n  'fontSize',\n  'sdf',\n  'buffer',\n  'cutoff',\n  'radius',\n];\nfunction getDefaultCharacterSet() {\n  const charSet = [];\n  for (let i = 32; i < 128; i++) {\n    charSet.push(String.fromCharCode(i));\n  }\n  return charSet;\n}\n\nfunction setTextStyle(\n  ctx: CanvasRenderingContext2D,\n  fontFamily: string,\n  fontSize: number,\n  fontWeight: string,\n) {\n  ctx.font = `${fontWeight} ${fontSize}px ${fontFamily}`;\n  ctx.fillStyle = 'black';\n  ctx.textBaseline = 'middle';\n  // ctx.textAlign = 'left';\n}\nfunction populateAlphaChannel(alphaChannel: number[], imageData: ImageData) {\n  // populate distance value from tinySDF to image alpha channel\n  for (let i = 0; i < alphaChannel.length; i++) {\n    imageData.data[4 * i + 3] = alphaChannel[i];\n  }\n}\n\n@injectable()\nexport default class FontService implements IFontService {\n  public fontAtlas: IFontAtlas;\n  private fontOptions: IFontOptions;\n  private key: string;\n  private cache: LRUCache = new LRUCache(CACHE_LIMIT);\n  public init() {\n    this.cache.clear();\n    this.fontOptions = {\n      fontFamily: DEFAULT_FONT_FAMILY,\n      fontWeight: DEFAULT_FONT_WEIGHT,\n      characterSet: DEFAULT_CHAR_SET,\n      fontSize: DEFAULT_FONT_SIZE,\n      buffer: DEFAULT_BUFFER,\n      sdf: true,\n      cutoff: DEFAULT_CUTOFF,\n      radius: DEFAULT_RADIUS,\n    };\n    this.key = '';\n  }\n\n  public get scale() {\n    return HEIGHT_SCALE;\n  }\n\n  public get canvas(): HTMLCanvasElement {\n    const data = this.cache.get(this.key);\n    return data && data.data;\n  }\n\n  public get mapping(): IFontMapping {\n    const data = this.cache.get(this.key);\n    return data && data.mapping;\n  }\n\n  public setFontOptions(option: Partial<IFontOptions>) {\n    this.fontOptions = {\n      ...this.fontOptions,\n      ...option,\n    };\n\n    // const oldKey = this.key;\n    this.key = this.getKey();\n\n    const charSet = this.getNewChars(this.key, this.fontOptions.characterSet);\n    const cachedFontAtlas = this.cache.get(this.key);\n\n    if (cachedFontAtlas && charSet.length === 0) {\n      // update texture with cached fontAtlas\n      return;\n    }\n    // update fontAtlas with new settings\n    const fontAtlas = this.generateFontAtlas(\n      this.key,\n      charSet,\n      cachedFontAtlas,\n    );\n    this.fontAtlas = fontAtlas;\n\n    // update cache\n    this.cache.set(this.key, fontAtlas);\n  }\n\n  public destroy(): void {\n    this.cache.clear();\n  }\n\n  private generateFontAtlas(\n    key: string,\n    characterSet: string[],\n    cachedFontAtlas: IFontAtlas,\n  ): IFontAtlas {\n    const {\n      fontFamily,\n      fontWeight,\n      fontSize,\n      buffer,\n      sdf,\n      radius,\n      cutoff,\n    } = this.fontOptions;\n    let canvas = cachedFontAtlas && cachedFontAtlas.data;\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      canvas.width = MAX_CANVAS_WIDTH;\n    }\n    const ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 1. build mapping\n    const { mapping, canvasHeight, xOffset, yOffset } = buildMapping({\n      getFontWidth: (char) => ctx.measureText(char).width,\n      fontHeight: fontSize * HEIGHT_SCALE,\n      buffer,\n      characterSet,\n      maxCanvasWidth: MAX_CANVAS_WIDTH,\n      ...(cachedFontAtlas && {\n        mapping: cachedFontAtlas.mapping,\n        xOffset: cachedFontAtlas.xOffset,\n        yOffset: cachedFontAtlas.yOffset,\n      }),\n    });\n\n    // 2. update canvas\n    // copy old canvas data to new canvas only when height changed\n    if (canvas.height !== canvasHeight) {\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      canvas.height = canvasHeight;\n      ctx.putImageData(imageData, 0, 0);\n    }\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 3. layout characters\n    if (sdf) {\n      const tinySDF = new TinySDF(\n        fontSize,\n        buffer,\n        radius,\n        cutoff,\n        fontFamily,\n        fontWeight,\n      );\n      // used to store distance values from tinySDF\n      // tinySDF.size equals `fontSize + buffer * 2`\n      const imageData = ctx.getImageData(0, 0, tinySDF.size, tinySDF.size);\n\n      for (const char of characterSet) {\n        populateAlphaChannel(tinySDF.draw(char), imageData);\n        // 考虑到描边，需要保留 sdf 的 buffer，不能像 deck.gl 一样直接减去\n        ctx.putImageData(imageData, mapping[char].x, mapping[char].y);\n      }\n    } else {\n      for (const char of characterSet) {\n        ctx.fillText(\n          char,\n          mapping[char].x,\n          mapping[char].y + fontSize * BASELINE_SCALE,\n        );\n      }\n    }\n    return {\n      xOffset,\n      yOffset,\n      mapping,\n      data: canvas,\n      width: canvas.width,\n      height: canvas.height,\n    };\n  }\n\n  private getKey() {\n    const {\n      fontFamily,\n      fontWeight,\n      fontSize,\n      buffer,\n      sdf,\n      radius,\n      cutoff,\n    } = this.fontOptions;\n    if (sdf) {\n      return `${fontFamily} ${fontWeight} ${fontSize} ${buffer} ${radius} ${cutoff}`;\n    }\n    return `${fontFamily} ${fontWeight} ${fontSize} ${buffer}`;\n  }\n\n  private getNewChars(key: string, characterSet: string[]): string[] {\n    const cachedFontAtlas = this.cache.get(key);\n    if (!cachedFontAtlas) {\n      return characterSet;\n    }\n\n    const newChars: string[] = [];\n    const cachedMapping = cachedFontAtlas.mapping;\n    const cachedCharSet = new Set(Object.keys(cachedMapping));\n    const charSet = new Set(characterSet);\n    charSet.forEach((char: string) => {\n      if (!cachedCharSet.has(char)) {\n        newChars.push(char);\n      }\n    });\n\n    return newChars;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}