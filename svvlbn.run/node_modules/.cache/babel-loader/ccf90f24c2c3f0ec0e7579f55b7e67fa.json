{"ast":null,"code":"import _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;\n\nimport { TYPES } from '@antv/l7-core';\nimport { inject, injectable } from 'inversify';\nvar ConfigSchemaValidationPlugin = (_dec = injectable(), _dec2 = inject(TYPES.IGlobalConfigService), _dec3 = inject(TYPES.ILogService), _dec(_class = (_class2 = (_temp = function () {\n  function ConfigSchemaValidationPlugin() {\n    _classCallCheck(this, ConfigSchemaValidationPlugin);\n\n    _initializerDefineProperty(this, \"configService\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"logger\", _descriptor2, this);\n  }\n\n  _createClass(ConfigSchemaValidationPlugin, [{\n    key: \"apply\",\n    value: function apply(layer) {\n      var _this = this;\n\n      layer.hooks.init.tap('ConfigSchemaValidationPlugin', function () {\n        _this.configService.registerLayerConfigSchemaValidator(layer.name, layer.getConfigSchemaForValidation());\n\n        var _this$configService$v = _this.configService.validateLayerConfig(layer.name, layer.getLayerConfig()),\n            valid = _this$configService$v.valid,\n            errorText = _this$configService$v.errorText;\n\n        if (!valid) {\n          _this.logger.error(errorText || '');\n\n          return false;\n        }\n      });\n      layer.hooks.beforeRender.tap('ConfigSchemaValidationPlugin', function () {});\n    }\n  }]);\n\n  return ConfigSchemaValidationPlugin;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"configService\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"logger\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);\nexport { ConfigSchemaValidationPlugin as default };","map":{"version":3,"sources":["../../src/plugins/ConfigSchemaValidationPlugin.ts"],"names":["injectable","ConfigSchemaValidationPlugin","inject","TYPES","layer","valid","errorText"],"mappings":";;;;;;;;AAAA,SAAA,KAAA,QAAA,eAAA;AAOA,SAAA,MAAA,EAAA,UAAA,QAAA,WAAA;IAMqBC,4B,WADpBD,UAAU,E,UAERE,MAAM,CAACC,KAAK,CAAN,oBAAA,C,UAGND,MAAM,CAACC,KAAK,CAAN,WAAA,C;;;;;;;;;;;0BAGMC,K,EAAe;AAAA,UAAA,KAAA,GAAA,IAAA;;AAC1BA,MAAAA,KAAK,CAALA,KAAAA,CAAAA,IAAAA,CAAAA,GAAAA,CAAAA,8BAAAA,EAAqD,YAAM;AACzD,QAAA,KAAI,CAAJ,aAAA,CAAA,kCAAA,CACEA,KAAK,CADP,IAAA,EAEEA,KAAK,CAFP,4BAEEA,EAFF;;AADyD,YAAA,qBAAA,GAM5B,KAAI,CAAJ,aAAA,CAAA,mBAAA,CAC3BA,KAAK,CADsB,IAAA,EAE3BA,KAAK,CARkD,cAQvDA,EAF2B,CAN4B;AAAA,YAMjDC,KANiD,GAAA,qBAAA,CAAA,KAAA;AAAA,YAM1CC,SAN0C,GAAA,qBAAA,CAAA,SAAA;;AAWzD,YAAI,CAAJ,KAAA,EAAY;AACV,UAAA,KAAI,CAAJ,MAAA,CAAA,KAAA,CAAkBA,SAAS,IAA3B,EAAA;;AAEA,iBAAA,KAAA;AACD;AAfHF,OAAAA;AAiBAA,MAAAA,KAAK,CAALA,KAAAA,CAAAA,YAAAA,CAAAA,GAAAA,CAAAA,8BAAAA,EAA6D,YAAM,CAAnEA,CAAAA;AAGD;;;;;;;;;;;;;;;SA5BkBH,4B","sourcesContent":["import {\n  IGlobalConfigService,\n  ILayer,\n  ILayerPlugin,\n  ILogService,\n  TYPES,\n} from '@antv/l7-core';\nimport { inject, injectable } from 'inversify';\n\n/**\n * Layer 初始化阶段以及重绘阶段首先校验传入参数，如果校验失败则中断后续插件处理。\n */\n@injectable()\nexport default class ConfigSchemaValidationPlugin implements ILayerPlugin {\n  @inject(TYPES.IGlobalConfigService)\n  private readonly configService: IGlobalConfigService;\n\n  @inject(TYPES.ILogService)\n  private readonly logger: ILogService;\n\n  public apply(layer: ILayer) {\n    layer.hooks.init.tap('ConfigSchemaValidationPlugin', () => {\n      this.configService.registerLayerConfigSchemaValidator(\n        layer.name as string,\n        layer.getConfigSchemaForValidation(),\n      );\n\n      const { valid, errorText } = this.configService.validateLayerConfig(\n        layer.name as string,\n        layer.getLayerConfig(),\n      );\n\n      if (!valid) {\n        this.logger.error(errorText || '');\n        // 中断 init 过程\n        return false;\n      }\n    });\n    layer.hooks.beforeRender.tap('ConfigSchemaValidationPlugin', () => {\n      // TODO: 配置项发生变化，需要重新校验\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}