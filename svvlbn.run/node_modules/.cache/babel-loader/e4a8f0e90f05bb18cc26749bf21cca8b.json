{"ast":null,"code":"import _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;\n\nimport { inject, injectable } from 'inversify';\nimport { TYPES } from '../../types';\nimport Clock from '../../utils/clock';\nvar LayerService = (_dec = injectable(), _dec2 = inject(TYPES.IRendererService), _dec3 = inject(TYPES.IGlobalConfigService), _dec(_class = (_class2 = (_temp = function () {\n  function LayerService() {\n    _classCallCheck(this, LayerService);\n\n    this.clock = new Clock();\n    this.layers = [];\n    this.layerRenderID = void 0;\n    this.sceneInited = false;\n    this.animateInstanceCount = 0;\n    this.alreadyInRendering = false;\n\n    _initializerDefineProperty(this, \"renderService\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"configService\", _descriptor2, this);\n  }\n\n  _createClass(LayerService, [{\n    key: \"add\",\n    value: function add(layer) {\n      this.layers.push(layer);\n    }\n  }, {\n    key: \"initLayers\",\n    value: function initLayers() {\n      this.sceneInited = true;\n      this.layers.forEach(function (layer) {\n        if (!layer.inited) {\n          layer.init();\n        }\n      });\n    }\n  }, {\n    key: \"getLayers\",\n    value: function getLayers() {\n      return this.layers;\n    }\n  }, {\n    key: \"getLayer\",\n    value: function getLayer(name) {\n      return this.layers.find(function (layer) {\n        return layer.name === name;\n      });\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(layer) {\n      var layerIndex = this.layers.indexOf(layer);\n\n      if (layerIndex > -1) {\n        this.layers.splice(layerIndex, 1);\n      }\n\n      layer.emit('remove', null);\n      layer.destroy();\n      this.renderLayers();\n    }\n  }, {\n    key: \"removeAllLayers\",\n    value: function removeAllLayers() {\n      this.destroy();\n    }\n  }, {\n    key: \"renderLayers\",\n    value: function renderLayers() {\n      if (this.alreadyInRendering) {\n        return;\n      }\n\n      this.alreadyInRendering = true;\n      this.clear();\n      this.layers.filter(function (layer) {\n        return layer.isVisible();\n      }).forEach(function (layer) {\n        layer.hooks.beforeRenderData.call(true);\n        layer.hooks.beforeRender.call();\n        layer.render();\n        layer.hooks.afterRender.call();\n      });\n      this.alreadyInRendering = false;\n    }\n  }, {\n    key: \"updateRenderOrder\",\n    value: function updateRenderOrder() {\n      this.layers.sort(function (pre, next) {\n        return pre.zIndex - next.zIndex;\n      });\n      this.renderLayers();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.layers.forEach(function (layer) {\n        return layer.destroy();\n      });\n      this.layers = [];\n      this.renderLayers();\n    }\n  }, {\n    key: \"startAnimate\",\n    value: function startAnimate() {\n      if (this.animateInstanceCount++ === 0) {\n        this.clock.start();\n        this.runRender();\n      }\n    }\n  }, {\n    key: \"stopAnimate\",\n    value: function stopAnimate() {\n      if (--this.animateInstanceCount === 0) {\n        this.stopRender();\n        this.clock.stop();\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.renderService.clear({\n        color: [0, 0, 0, 0],\n        depth: 1,\n        stencil: 0,\n        framebuffer: null\n      });\n    }\n  }, {\n    key: \"runRender\",\n    value: function runRender() {\n      this.renderLayers();\n      this.layerRenderID = requestAnimationFrame(this.runRender.bind(this));\n    }\n  }, {\n    key: \"stopRender\",\n    value: function stopRender() {\n      cancelAnimationFrame(this.layerRenderID);\n    }\n  }]);\n\n  return LayerService;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"renderService\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"configService\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);\nexport { LayerService as default };","map":{"version":3,"sources":["../../../src/services/layer/LayerService.ts"],"names":["injectable","LayerService","clock","layers","layerRenderID","sceneInited","animateInstanceCount","alreadyInRendering","inject","TYPES","layer","name","layerIndex","pre","next","color","depth","stencil","framebuffer","requestAnimationFrame","cancelAnimationFrame"],"mappings":"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","sourcesContent":["import { inject, injectable } from 'inversify';\nimport { ILayer } from '../..';\nimport { TYPES } from '../../types';\nimport Clock from '../../utils/clock';\nimport { IGlobalConfigService } from '../config/IConfigService';\nimport { IRendererService } from '../renderer/IRendererService';\nimport { ILayerModel, ILayerService } from './ILayerService';\n\n@injectable()\nexport default class LayerService implements ILayerService {\n  public clock = new Clock();\n\n  private layers: ILayer[] = [];\n\n  private layerRenderID: number;\n\n  private sceneInited: boolean = false;\n\n  private animateInstanceCount: number = 0;\n\n  private alreadyInRendering: boolean = false;\n\n  @inject(TYPES.IRendererService)\n  private readonly renderService: IRendererService;\n\n  @inject(TYPES.IGlobalConfigService)\n  private readonly configService: IGlobalConfigService;\n\n  public add(layer: ILayer) {\n    // if (this.sceneInited) {\n    //   layer.init();\n    // }\n    this.layers.push(layer);\n  }\n\n  public initLayers() {\n    this.sceneInited = true;\n    this.layers.forEach((layer) => {\n      if (!layer.inited) {\n        layer.init();\n      }\n    });\n  }\n\n  public getLayers(): ILayer[] {\n    return this.layers;\n  }\n\n  public getLayer(name: string): ILayer | undefined {\n    return this.layers.find((layer) => layer.name === name);\n  }\n\n  public remove(layer: ILayer): void {\n    const layerIndex = this.layers.indexOf(layer);\n    if (layerIndex > -1) {\n      this.layers.splice(layerIndex, 1);\n    }\n    layer.emit('remove', null);\n    layer.destroy();\n    this.renderLayers();\n  }\n\n  public removeAllLayers() {\n    this.destroy();\n  }\n\n  public renderLayers() {\n    // TODO：脏检查，只渲染发生改变的 Layer\n    if (this.alreadyInRendering) {\n      return;\n    }\n    //\n    this.alreadyInRendering = true;\n    this.clear();\n    this.layers\n      .filter((layer) => layer.isVisible())\n      .forEach((layer) => {\n        // trigger hooks\n        layer.hooks.beforeRenderData.call(true);\n        layer.hooks.beforeRender.call();\n        layer.render();\n        layer.hooks.afterRender.call();\n      });\n    this.alreadyInRendering = false;\n  }\n\n  public updateRenderOrder() {\n    this.layers.sort((pre: ILayer, next: ILayer) => {\n      return pre.zIndex - next.zIndex;\n    });\n    this.renderLayers();\n  }\n\n  public destroy() {\n    this.layers.forEach((layer) => layer.destroy());\n    this.layers = [];\n    this.renderLayers();\n  }\n\n  public startAnimate() {\n    if (this.animateInstanceCount++ === 0) {\n      this.clock.start();\n      this.runRender();\n    }\n  }\n\n  public stopAnimate() {\n    if (--this.animateInstanceCount === 0) {\n      this.stopRender();\n      this.clock.stop();\n    }\n  }\n\n  private clear() {\n    this.renderService.clear({\n      color: [0, 0, 0, 0],\n      depth: 1,\n      stencil: 0,\n      framebuffer: null,\n    });\n  }\n\n  private runRender() {\n    this.renderLayers();\n    this.layerRenderID = requestAnimationFrame(this.runRender.bind(this));\n  }\n\n  private stopRender() {\n    cancelAnimationFrame(this.layerRenderID);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}