{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar _dec, _class, _temp;\n\nimport { TYPES } from '@antv/l7-core';\nimport Source from '@antv/l7-source';\nimport { injectable } from 'inversify';\nvar DataSourcePlugin = (_dec = injectable(), _dec(_class = (_temp = function () {\n  function DataSourcePlugin() {\n    _classCallCheck(this, DataSourcePlugin);\n\n    this.mapService = void 0;\n  }\n\n  _createClass(DataSourcePlugin, [{\n    key: \"apply\",\n    value: function apply(layer) {\n      var _this = this;\n\n      this.mapService = layer.getContainer().get(TYPES.IMapService);\n      layer.hooks.init.tap('DataSourcePlugin', function () {\n        var _layer$sourceOption = layer.sourceOption,\n            data = _layer$sourceOption.data,\n            options = _layer$sourceOption.options;\n        layer.setSource(new Source(data, options));\n\n        _this.updateClusterData(layer);\n      });\n      layer.hooks.beforeRenderData.tap('DataSourcePlugin', function (flag) {\n        var neeUpdate1 = _this.updateClusterData(layer);\n\n        var neeUpdate2 = layer.dataState.dataSourceNeedUpdate;\n        layer.dataState.dataSourceNeedUpdate = false;\n        return neeUpdate1 || neeUpdate2;\n      });\n    }\n  }, {\n    key: \"updateClusterData\",\n    value: function updateClusterData(layer) {\n      var source = layer.getSource();\n      var cluster = source.cluster;\n      var _source$clusterOption = source.clusterOptions,\n          _source$clusterOption2 = _source$clusterOption.zoom,\n          zoom = _source$clusterOption2 === void 0 ? 0 : _source$clusterOption2,\n          _source$clusterOption3 = _source$clusterOption.maxZoom,\n          maxZoom = _source$clusterOption3 === void 0 ? 16 : _source$clusterOption3;\n      var newZoom = this.mapService.getZoom() - 1;\n\n      if (cluster && Math.abs(zoom - newZoom) > 1 && maxZoom > zoom) {\n        source.updateClusterData(Math.floor(newZoom));\n        return true;\n      }\n\n      return false;\n    }\n  }]);\n\n  return DataSourcePlugin;\n}(), _temp)) || _class);\nexport { DataSourcePlugin as default };","map":{"version":3,"sources":["../../src/plugins/DataSourcePlugin.ts"],"names":["injectable","DataSourcePlugin","mapService","layer","TYPES","data","options","neeUpdate1","neeUpdate2","source","cluster","zoom","maxZoom","newZoom","Math"],"mappings":";;;;;AAAA,SAAA,KAAA,QAAA,eAAA;AACA,OAAA,MAAA,MAAA,iBAAA;AACA,SAAA,UAAA,QAAA,WAAA;IAGqBC,gB,WADpBD,UAAU,E;;;;SAECE,U;;;;;0BACGC,K,EAAe;AAAA,UAAA,KAAA,GAAA,IAAA;;AAC1B,WAAA,UAAA,GAAkBA,KAAK,CAALA,YAAAA,GAAAA,GAAAA,CAAsCC,KAAK,CAA7D,WAAkBD,CAAlB;AACAA,MAAAA,KAAK,CAALA,KAAAA,CAAAA,IAAAA,CAAAA,GAAAA,CAAAA,kBAAAA,EAAyC,YAAM;AAAA,YAAA,mBAAA,GACnBA,KAAK,CADc,YAAA;AAAA,YACrCE,IADqC,GAAA,mBAAA,CAAA,IAAA;AAAA,YAC/BC,OAD+B,GAAA,mBAAA,CAAA,OAAA;AAE7CH,QAAAA,KAAK,CAALA,SAAAA,CAAgB,IAAA,MAAA,CAAA,IAAA,EAAhBA,OAAgB,CAAhBA;;AAIA,QAAA,KAAI,CAAJ,iBAAA,CAAA,KAAA;AANFA,OAAAA;AAUAA,MAAAA,KAAK,CAALA,KAAAA,CAAAA,gBAAAA,CAAAA,GAAAA,CAAAA,kBAAAA,EAAqD,UAAA,IAAA,EAAU;AAC7D,YAAMI,UAAU,GAAG,KAAI,CAAJ,iBAAA,CAAnB,KAAmB,CAAnB;;AACA,YAAMC,UAAU,GAAGL,KAAK,CAALA,SAAAA,CAAnB,oBAAA;AACAA,QAAAA,KAAK,CAALA,SAAAA,CAAAA,oBAAAA,GAAAA,KAAAA;AACA,eAAOI,UAAU,IAAjB,UAAA;AAJFJ,OAAAA;AAMD;;;sCAEyBA,K,EAAwB;AAChD,UAAMM,MAAM,GAAGN,KAAK,CAApB,SAAeA,EAAf;AACA,UAAMO,OAAO,GAAGD,MAAM,CAAtB,OAAA;AAFgD,UAAA,qBAAA,GAGbA,MAAM,CAHO,cAAA;AAAA,UAAA,sBAAA,GAAA,qBAAA,CAAA,IAAA;AAAA,UAGxCE,IAHwC,GAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,CAAA,GAAA,sBAAA;AAAA,UAAA,sBAAA,GAAA,qBAAA,CAAA,OAAA;AAAA,UAG9BC,OAH8B,GAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,sBAAA;AAIhD,UAAMC,OAAO,GAAG,KAAA,UAAA,CAAA,OAAA,KAAhB,CAAA;;AACA,UAAIH,OAAO,IAAII,IAAI,CAAJA,GAAAA,CAASH,IAAI,GAAbG,OAAAA,IAAXJ,CAAAA,IAA2CE,OAAO,GAAtD,IAAA,EAA+D;AAC7DH,QAAAA,MAAM,CAANA,iBAAAA,CAAyBK,IAAI,CAAJA,KAAAA,CAAzBL,OAAyBK,CAAzBL;AACA,eAAA,IAAA;AACD;;AACD,aAAA,KAAA;AACD;;;;;SAhCkBR,gB","sourcesContent":["import { ILayer, ILayerPlugin, IMapService, TYPES } from '@antv/l7-core';\nimport Source from '@antv/l7-source';\nimport { injectable } from 'inversify';\n\n@injectable()\nexport default class DataSourcePlugin implements ILayerPlugin {\n  protected mapService: IMapService;\n  public apply(layer: ILayer) {\n    this.mapService = layer.getContainer().get<IMapService>(TYPES.IMapService);\n    layer.hooks.init.tap('DataSourcePlugin', () => {\n      const { data, options } = layer.sourceOption;\n      layer.setSource(new Source(data, options));\n      // if (layer.getSource().data.dataArray.length === 0) {\n      //   return true;\n      // }\n      this.updateClusterData(layer);\n    });\n\n    // 检测数据不否需要更新\n    layer.hooks.beforeRenderData.tap('DataSourcePlugin', (flag) => {\n      const neeUpdate1 = this.updateClusterData(layer);\n      const neeUpdate2 = layer.dataState.dataSourceNeedUpdate;\n      layer.dataState.dataSourceNeedUpdate = false;\n      return neeUpdate1 || neeUpdate2;\n    });\n  }\n\n  private updateClusterData(layer: ILayer): boolean {\n    const source = layer.getSource();\n    const cluster = source.cluster;\n    const { zoom = 0, maxZoom = 16 } = source.clusterOptions;\n    const newZoom = this.mapService.getZoom() - 1;\n    if (cluster && Math.abs(zoom - newZoom) > 1 && maxZoom > zoom) {\n      source.updateClusterData(Math.floor(newZoom));\n      return true;\n    }\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}