{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\nimport _isObject from \"lodash/isObject\";\nimport _isFunction from \"lodash/isFunction\";\n\nvar _dec, _dec2, _dec3, _class, _descriptor, _descriptor2, _descriptor3, _temp;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { BlendType, lazyInject, TYPES } from '@antv/l7-core';\nimport { encodePickingColor } from '@antv/l7-utils';\nimport { EventEmitter } from 'eventemitter3';\nimport mergeJsonSchemas from 'merge-json-schemas';\nimport { SyncBailHook, SyncHook, SyncWaterfallHook } from 'tapable';\nimport { normalizePasses } from '../plugins/MultiPassRendererPlugin';\nimport { BlendTypes } from '../utils/blend';\nimport baseLayerSchema from './schema';\nvar layerIdCounter = 0;\nvar BaseLayer = (_dec = lazyInject(TYPES.ILogService), _dec2 = lazyInject(TYPES.IGlobalConfigService), _dec3 = lazyInject(TYPES.IShaderModuleService), (_class = (_temp = function (_EventEmitter) {\n  _inherits(BaseLayer, _EventEmitter);\n\n  function BaseLayer() {\n    var _this;\n\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, BaseLayer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BaseLayer).call(this));\n    _this.id = \"\".concat(layerIdCounter++);\n    _this.name = \"\".concat(layerIdCounter++);\n    _this.type = void 0;\n    _this.visible = true;\n    _this.zIndex = 0;\n    _this.minZoom = void 0;\n    _this.maxZoom = void 0;\n    _this.inited = false;\n    _this.layerModelNeedUpdate = false;\n    _this.pickedFeatureID = -1;\n    _this.dataState = {\n      dataSourceNeedUpdate: false,\n      dataMappingNeedUpdate: false,\n      filterNeedUpdate: false,\n      featureScaleNeedUpdate: false,\n      StyleAttrNeedUpdate: false\n    };\n    _this.hooks = {\n      init: new SyncBailHook(),\n      afterInit: new SyncBailHook(),\n      beforeRender: new SyncBailHook(),\n      beforeRenderData: new SyncWaterfallHook(['data']),\n      afterRender: new SyncHook(),\n      beforePickingEncode: new SyncHook(),\n      afterPickingEncode: new SyncHook(),\n      beforeHighlight: new SyncHook(['pickedColor']),\n      afterHighlight: new SyncHook(),\n      beforeSelect: new SyncHook(['pickedColor']),\n      afterSelect: new SyncHook(),\n      beforeDestroy: new SyncHook(),\n      afterDestroy: new SyncHook()\n    };\n    _this.models = [];\n    _this.multiPassRenderer = void 0;\n    _this.plugins = void 0;\n    _this.sourceOption = void 0;\n    _this.layerModel = void 0;\n\n    _initializerDefineProperty(_this, \"logger\", _descriptor, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"configService\", _descriptor2, _assertThisInitialized(_this));\n\n    _initializerDefineProperty(_this, \"shaderModuleService\", _descriptor3, _assertThisInitialized(_this));\n\n    _this.iconService = void 0;\n    _this.fontService = void 0;\n    _this.rendererService = void 0;\n    _this.layerService = void 0;\n    _this.interactionService = void 0;\n    _this.mapService = void 0;\n    _this.styleAttributeService = void 0;\n    _this.layerSource = void 0;\n    _this.postProcessingPassFactory = void 0;\n    _this.normalPassFactory = void 0;\n    _this.animateOptions = {\n      enable: false\n    };\n    _this.container = void 0;\n    _this.encodedData = void 0;\n    _this.configSchema = void 0;\n    _this.currentPickId = null;\n    _this.rawConfig = void 0;\n    _this.needUpdateConfig = void 0;\n    _this.pendingStyleAttributes = [];\n    _this.scaleOptions = {};\n    _this.animateStartTime = void 0;\n    _this.aniamateStatus = false;\n\n    _this.sourceEvent = function () {\n      _this.dataState.dataSourceNeedUpdate = true;\n\n      _this.reRender();\n    };\n\n    _this.name = config.name || _this.id;\n    _this.rawConfig = config;\n    return _this;\n  }\n\n  _createClass(BaseLayer, [{\n    key: \"getLayerConfig\",\n    value: function getLayerConfig() {\n      return this.configService.getLayerConfig(this.id);\n    }\n  }, {\n    key: \"updateLayerConfig\",\n    value: function updateLayerConfig(configToUpdate) {\n      if (!this.inited) {\n        this.needUpdateConfig = _objectSpread({}, this.needUpdateConfig, {}, configToUpdate);\n      } else {\n        var sceneId = this.container.get(TYPES.SceneID);\n        this.configService.setLayerConfig(sceneId, this.id, _objectSpread({}, this.configService.getLayerConfig(this.id), {}, this.needUpdateConfig, {}, configToUpdate));\n        this.needUpdateConfig = {};\n      }\n    }\n  }, {\n    key: \"setContainer\",\n    value: function setContainer(container) {\n      this.container = container;\n    }\n  }, {\n    key: \"getContainer\",\n    value: function getContainer() {\n      return this.container;\n    }\n  }, {\n    key: \"addPlugin\",\n    value: function addPlugin(plugin) {\n      this.plugins.push(plugin);\n      return this;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n\n      var sceneId = this.container.get(TYPES.SceneID);\n      this.configService.setLayerConfig(sceneId, this.id, {});\n      this.iconService = this.container.get(TYPES.IIconService);\n      this.fontService = this.container.get(TYPES.IFontService);\n      this.rendererService = this.container.get(TYPES.IRendererService);\n      this.layerService = this.container.get(TYPES.ILayerService);\n      this.interactionService = this.container.get(TYPES.IInteractionService);\n      this.mapService = this.container.get(TYPES.IMapService);\n      this.postProcessingPassFactory = this.container.get(TYPES.IFactoryPostProcessingPass);\n      this.normalPassFactory = this.container.get(TYPES.IFactoryNormalPass);\n      this.styleAttributeService = this.container.get(TYPES.IStyleAttributeService);\n      this.multiPassRenderer = this.container.get(TYPES.IMultiPassRenderer);\n      this.multiPassRenderer.setLayer(this);\n      this.pendingStyleAttributes.forEach(function (_ref) {\n        var attributeName = _ref.attributeName,\n            attributeField = _ref.attributeField,\n            attributeValues = _ref.attributeValues,\n            defaultName = _ref.defaultName,\n            updateOptions = _ref.updateOptions;\n\n        _this2.styleAttributeService.updateStyleAttribute(attributeName, {\n          scale: _objectSpread({\n            field: attributeField\n          }, _this2.splitValuesAndCallbackInAttribute(attributeValues, _this2.getLayerConfig()[defaultName || attributeName]))\n        }, updateOptions);\n      });\n      this.pendingStyleAttributes = [];\n      this.plugins = this.container.getAll(TYPES.ILayerPlugin);\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.plugins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var plugin = _step.value;\n          plugin.apply(this, {\n            rendererService: this.rendererService,\n            mapService: this.mapService,\n            styleAttributeService: this.styleAttributeService,\n            normalPassFactory: this.normalPassFactory,\n            postProcessingPassFactory: this.postProcessingPassFactory\n          });\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.hooks.init.call();\n      this.hooks.afterInit.call();\n      this.emit('inited', {\n        target: this,\n        type: 'inited'\n      });\n      this.emit('add', {\n        target: this,\n        type: 'add'\n      });\n      return this;\n    }\n  }, {\n    key: \"prepareBuildModel\",\n    value: function prepareBuildModel() {\n      this.inited = true;\n      this.updateLayerConfig(_objectSpread({}, this.getDefaultConfig(), {}, this.rawConfig));\n\n      var _this$getLayerConfig = this.getLayerConfig(),\n          animateOption = _this$getLayerConfig.animateOption;\n\n      if (animateOption === null || animateOption === void 0 ? void 0 : animateOption.enable) {\n        this.layerService.startAnimate();\n        this.aniamateStatus = true;\n      }\n    }\n  }, {\n    key: \"color\",\n    value: function color(field, values, updateOptions) {\n      this.pendingStyleAttributes.push({\n        attributeName: 'color',\n        attributeField: field,\n        attributeValues: values,\n        defaultName: 'colors',\n        updateOptions: updateOptions\n      });\n      return this;\n    }\n  }, {\n    key: \"size\",\n    value: function size(field, values, updateOptions) {\n      this.pendingStyleAttributes.push({\n        attributeName: 'size',\n        attributeField: field,\n        attributeValues: values,\n        updateOptions: updateOptions\n      });\n      return this;\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(field, values, updateOptions) {\n      this.pendingStyleAttributes.push({\n        attributeName: 'filter',\n        attributeField: field,\n        attributeValues: values,\n        updateOptions: updateOptions\n      });\n      this.dataState.dataMappingNeedUpdate = true;\n      return this;\n    }\n  }, {\n    key: \"shape\",\n    value: function shape(field, values, updateOptions) {\n      this.pendingStyleAttributes.push({\n        attributeName: 'shape',\n        attributeField: field,\n        attributeValues: values,\n        updateOptions: updateOptions\n      });\n      return this;\n    }\n  }, {\n    key: \"label\",\n    value: function label(field, values, updateOptions) {\n      this.pendingStyleAttributes.push({\n        attributeName: 'label',\n        attributeField: field,\n        attributeValues: values,\n        updateOptions: updateOptions\n      });\n      return this;\n    }\n  }, {\n    key: \"animate\",\n    value: function animate(options) {\n      var rawAnimate = {};\n\n      if (_isObject(options)) {\n        rawAnimate.enable = true;\n        rawAnimate = _objectSpread({}, rawAnimate, {}, options);\n      } else {\n        rawAnimate.enable = options;\n      }\n\n      this.updateLayerConfig({\n        animateOption: rawAnimate\n      });\n      return this;\n    }\n  }, {\n    key: \"source\",\n    value: function source(data, options) {\n      this.sourceOption = {\n        data: data,\n        options: options\n      };\n      return this;\n    }\n  }, {\n    key: \"setData\",\n    value: function setData(data, options) {\n      var _this3 = this;\n\n      if (this.inited) {\n        this.layerSource.setData(data);\n      } else {\n        this.on('inited', function () {\n          _this3.layerSource.setData(data);\n        });\n      }\n\n      return this;\n    }\n  }, {\n    key: \"style\",\n    value: function style(options) {\n      var _this4 = this;\n\n      var passes = options.passes,\n          rest = _objectWithoutProperties(options, [\"passes\"]);\n\n      if (passes) {\n        normalizePasses(passes).forEach(function (pass) {\n          var postProcessingPass = _this4.multiPassRenderer.getPostProcessor().getPostProcessingPassByName(pass[0]);\n\n          if (postProcessingPass) {\n            postProcessingPass.updateOptions(pass[1]);\n          }\n        });\n      }\n\n      this.rawConfig = _objectSpread({}, this.rawConfig, {}, rest);\n\n      if (this.container) {\n        this.updateLayerConfig(this.rawConfig);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(field, cfg) {\n      if (_isObject(field)) {\n        this.scaleOptions = _objectSpread({}, this.scaleOptions, {}, field);\n      } else {\n        this.scaleOptions[field] = cfg;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.multiPassRenderer && this.multiPassRenderer.getRenderFlag()) {\n        this.multiPassRenderer.render();\n      } else {\n        this.renderModels();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"active\",\n    value: function active(options) {\n      var activeOption = {};\n      activeOption.enableHighlight = _isObject(options) ? true : options;\n\n      if (_isObject(options)) {\n        activeOption.enableHighlight = true;\n\n        if (options.color) {\n          activeOption.highlightColor = options.color;\n        }\n      } else {\n        activeOption.enableHighlight = !!options;\n      }\n\n      this.updateLayerConfig(activeOption);\n      return this;\n    }\n  }, {\n    key: \"setActive\",\n    value: function setActive(id, options) {\n      var _this5 = this;\n\n      if (_isObject(id)) {\n        var _id$x = id.x,\n            x = _id$x === void 0 ? 0 : _id$x,\n            _id$y = id.y,\n            y = _id$y === void 0 ? 0 : _id$y;\n        this.updateLayerConfig({\n          highlightColor: _isObject(options) ? options.color : this.getLayerConfig().highlightColor\n        });\n        this.pick({\n          x: x,\n          y: y\n        });\n      } else {\n        this.updateLayerConfig({\n          pickedFeatureID: id,\n          highlightColor: _isObject(options) ? options.color : this.getLayerConfig().highlightColor\n        });\n        this.hooks.beforeSelect.callAsync(encodePickingColor(id), function () {\n          setTimeout(function () {\n            _this5.reRender();\n          }, 1);\n        });\n      }\n    }\n  }, {\n    key: \"select\",\n    value: function select(option) {\n      var activeOption = {};\n      activeOption.enableSelect = _isObject(option) ? true : option;\n\n      if (_isObject(option)) {\n        activeOption.enableSelect = true;\n\n        if (option.color) {\n          activeOption.selectColor = option.color;\n        }\n      } else {\n        activeOption.enableSelect = !!option;\n      }\n\n      this.updateLayerConfig(activeOption);\n      return this;\n    }\n  }, {\n    key: \"setSelect\",\n    value: function setSelect(id, options) {\n      var _this6 = this;\n\n      if (_isObject(id)) {\n        var _id$x2 = id.x,\n            x = _id$x2 === void 0 ? 0 : _id$x2,\n            _id$y2 = id.y,\n            y = _id$y2 === void 0 ? 0 : _id$y2;\n        this.updateLayerConfig({\n          selectColor: _isObject(options) ? options.color : this.getLayerConfig().selectColor\n        });\n        this.pick({\n          x: x,\n          y: y\n        });\n      } else {\n        this.updateLayerConfig({\n          pickedFeatureID: id,\n          selectColor: _isObject(options) ? options.color : this.getLayerConfig().selectColor\n        });\n        this.hooks.beforeSelect.callAsync(encodePickingColor(id), function () {\n          setTimeout(function () {\n            _this6.reRender();\n          }, 1);\n        });\n      }\n    }\n  }, {\n    key: \"setBlend\",\n    value: function setBlend(type) {\n      this.updateLayerConfig({\n        blend: type\n      });\n      this.layerModelNeedUpdate = true;\n      this.reRender();\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      this.updateLayerConfig({\n        visible: true\n      });\n      this.reRender();\n      return this;\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.updateLayerConfig({\n        visible: false\n      });\n      this.reRender();\n      return this;\n    }\n  }, {\n    key: \"setIndex\",\n    value: function setIndex(index) {\n      this.zIndex = index;\n      this.layerService.updateRenderOrder();\n      return this;\n    }\n  }, {\n    key: \"setCurrentPickId\",\n    value: function setCurrentPickId(id) {\n      this.currentPickId = id;\n    }\n  }, {\n    key: \"getCurrentPickId\",\n    value: function getCurrentPickId() {\n      return this.currentPickId;\n    }\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      var zoom = this.mapService.getZoom();\n\n      var _this$getLayerConfig2 = this.getLayerConfig(),\n          visible = _this$getLayerConfig2.visible,\n          _this$getLayerConfig3 = _this$getLayerConfig2.minZoom,\n          minZoom = _this$getLayerConfig3 === void 0 ? -Infinity : _this$getLayerConfig3,\n          _this$getLayerConfig4 = _this$getLayerConfig2.maxZoom,\n          maxZoom = _this$getLayerConfig4 === void 0 ? Infinity : _this$getLayerConfig4;\n\n      return !!visible && zoom >= minZoom && zoom <= maxZoom;\n    }\n  }, {\n    key: \"setMinZoom\",\n    value: function setMinZoom(minZoom) {\n      this.updateLayerConfig({\n        minZoom: minZoom\n      });\n      return this;\n    }\n  }, {\n    key: \"setMaxZoom\",\n    value: function setMaxZoom(maxZoom) {\n      this.updateLayerConfig({\n        maxZoom: maxZoom\n      });\n      return this;\n    }\n  }, {\n    key: \"fitBounds\",\n    value: function fitBounds() {\n      if (!this.inited) {\n        this.updateLayerConfig({\n          autoFit: true\n        });\n        return this;\n      }\n\n      var source = this.getSource();\n      var extent = source.extent;\n      this.mapService.fitBounds([[extent[0], extent[1]], [extent[2], extent[3]]]);\n      return this;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.hooks.beforeDestroy.call();\n      this.layerSource.off('update', this.sourceEvent);\n      this.styleAttributeService.clearAllAttributes();\n      this.models.forEach(function (model) {\n        return model.destroy();\n      });\n      this.hooks.afterDestroy.call();\n      this.emit('remove', {\n        target: this,\n        type: 'remove'\n      });\n      this.removeAllListeners();\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.styleAttributeService.clearAllAttributes();\n      this.models.forEach(function (model) {\n        return model.destroy();\n      });\n    }\n  }, {\n    key: \"isDirty\",\n    value: function isDirty() {\n      return !!(this.styleAttributeService.getLayerStyleAttributes() || []).filter(function (attribute) {\n        return attribute.needRescale || attribute.needRemapping || attribute.needRegenerateVertices;\n      }).length;\n    }\n  }, {\n    key: \"setSource\",\n    value: function setSource(source) {\n      this.layerSource = source;\n      var zoom = this.mapService.getZoom();\n\n      if (this.layerSource.cluster) {\n        this.layerSource.updateClusterData(zoom);\n      }\n\n      this.layerSource.on('update', this.sourceEvent);\n    }\n  }, {\n    key: \"getSource\",\n    value: function getSource() {\n      return this.layerSource;\n    }\n  }, {\n    key: \"getScaleOptions\",\n    value: function getScaleOptions() {\n      return this.scaleOptions;\n    }\n  }, {\n    key: \"setEncodedData\",\n    value: function setEncodedData(encodedData) {\n      this.encodedData = encodedData;\n    }\n  }, {\n    key: \"getEncodedData\",\n    value: function getEncodedData() {\n      return this.encodedData;\n    }\n  }, {\n    key: \"getConfigSchemaForValidation\",\n    value: function getConfigSchemaForValidation() {\n      if (!this.configSchema) {\n        this.configSchema = mergeJsonSchemas([baseLayerSchema, this.getConfigSchema()]);\n      }\n\n      return this.configSchema;\n    }\n  }, {\n    key: \"pick\",\n    value: function pick(_ref2) {\n      var x = _ref2.x,\n          y = _ref2.y;\n      this.interactionService.triggerHover({\n        x: x,\n        y: y\n      });\n    }\n  }, {\n    key: \"buildLayerModel\",\n    value: function buildLayerModel(options) {\n      var moduleName = options.moduleName,\n          vertexShader = options.vertexShader,\n          fragmentShader = options.fragmentShader,\n          triangulation = options.triangulation,\n          rest = _objectWithoutProperties(options, [\"moduleName\", \"vertexShader\", \"fragmentShader\", \"triangulation\"]);\n\n      this.shaderModuleService.registerModule(moduleName, {\n        vs: vertexShader,\n        fs: fragmentShader\n      });\n\n      var _this$shaderModuleSer = this.shaderModuleService.getModule(moduleName),\n          vs = _this$shaderModuleSer.vs,\n          fs = _this$shaderModuleSer.fs,\n          uniforms = _this$shaderModuleSer.uniforms;\n\n      var createModel = this.rendererService.createModel;\n\n      var _this$styleAttributeS = this.styleAttributeService.createAttributesAndIndices(this.encodedData, triangulation),\n          attributes = _this$styleAttributeS.attributes,\n          elements = _this$styleAttributeS.elements;\n\n      return createModel(_objectSpread({\n        attributes: attributes,\n        uniforms: uniforms,\n        fs: fs,\n        vs: vs,\n        elements: elements,\n        blend: BlendTypes[BlendType.normal]\n      }, rest));\n    }\n  }, {\n    key: \"getTime\",\n    value: function getTime() {\n      return this.layerService.clock.getDelta();\n    }\n  }, {\n    key: \"setAnimateStartTime\",\n    value: function setAnimateStartTime() {\n      this.animateStartTime = this.layerService.clock.getElapsedTime();\n    }\n  }, {\n    key: \"stopAnimate\",\n    value: function stopAnimate() {\n      if (this.aniamateStatus) {\n        this.layerService.stopAnimate();\n        this.aniamateStatus = false;\n        this.updateLayerConfig({\n          animateOption: {\n            enable: false\n          }\n        });\n      }\n    }\n  }, {\n    key: \"getLayerAnimateTime\",\n    value: function getLayerAnimateTime() {\n      return this.layerService.clock.getElapsedTime() - this.animateStartTime;\n    }\n  }, {\n    key: \"buildModels\",\n    value: function buildModels() {\n      throw new Error('Method not implemented.');\n    }\n  }, {\n    key: \"getConfigSchema\",\n    value: function getConfigSchema() {\n      throw new Error('Method not implemented.');\n    }\n  }, {\n    key: \"renderModels\",\n    value: function renderModels() {\n      var _this7 = this;\n\n      if (this.layerModelNeedUpdate) {\n        this.models = this.layerModel.buildModels();\n        this.layerModelNeedUpdate = false;\n      }\n\n      this.models.forEach(function (model) {\n        model.draw({\n          uniforms: _this7.layerModel.getUninforms()\n        });\n      });\n      return this;\n    }\n  }, {\n    key: \"getModelType\",\n    value: function getModelType() {\n      throw new Error('Method not implemented.');\n    }\n  }, {\n    key: \"getDefaultConfig\",\n    value: function getDefaultConfig() {\n      return {};\n    }\n  }, {\n    key: \"reRender\",\n    value: function reRender() {\n      if (this.inited) {\n        this.layerService.renderLayers();\n      }\n    }\n  }, {\n    key: \"splitValuesAndCallbackInAttribute\",\n    value: function splitValuesAndCallbackInAttribute(valuesOrCallback, defaultValues) {\n      return {\n        values: _isFunction(valuesOrCallback) ? undefined : valuesOrCallback || defaultValues,\n        callback: _isFunction(valuesOrCallback) ? valuesOrCallback : undefined\n      };\n    }\n  }]);\n\n  return BaseLayer;\n}(EventEmitter), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"logger\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"configService\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"shaderModuleService\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class));\nexport { BaseLayer as default };","map":{"version":3,"sources":["../../src/core/BaseLayer.ts"],"names":["layerIdCounter","BaseLayer","EventEmitter","id","name","type","visible","zIndex","minZoom","maxZoom","inited","layerModelNeedUpdate","pickedFeatureID","dataState","dataSourceNeedUpdate","dataMappingNeedUpdate","filterNeedUpdate","featureScaleNeedUpdate","StyleAttrNeedUpdate","hooks","init","afterInit","beforeRender","beforeRenderData","afterRender","beforePickingEncode","afterPickingEncode","beforeHighlight","afterHighlight","beforeSelect","afterSelect","beforeDestroy","afterDestroy","models","multiPassRenderer","plugins","sourceOption","layerModel","lazyInject","TYPES","iconService","fontService","rendererService","layerService","interactionService","mapService","styleAttributeService","layerSource","postProcessingPassFactory","normalPassFactory","animateOptions","enable","container","encodedData","configSchema","currentPickId","rawConfig","needUpdateConfig","pendingStyleAttributes","scaleOptions","animateStartTime","aniamateStatus","config","configToUpdate","sceneId","plugin","attributeName","attributeField","attributeValues","defaultName","updateOptions","scale","field","target","animateOption","values","options","rawAnimate","data","passes","rest","normalizePasses","postProcessingPass","pass","cfg","activeOption","x","y","highlightColor","encodePickingColor","setTimeout","option","selectColor","blend","index","zoom","autoFit","source","extent","model","attribute","mergeJsonSchemas","moduleName","vertexShader","fragmentShader","triangulation","vs","fs","uniforms","createModel","attributes","elements","BlendTypes","BlendType","valuesOrCallback","defaultValues","callback","undefined"],"mappings":"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","sourcesContent":["import {\n  BlendType,\n  gl,\n  IActiveOption,\n  IAnimateOption,\n  IDataState,\n  IEncodeFeature,\n  IFontService,\n  IGlobalConfigService,\n  IIconService,\n  IInteractionService,\n  ILayer,\n  ILayerConfig,\n  ILayerModel,\n  ILayerModelInitializationOptions,\n  ILayerPlugin,\n  ILayerService,\n  ILogService,\n  IMapService,\n  IModel,\n  IModelInitializationOptions,\n  IMultiPassRenderer,\n  IPass,\n  IPostProcessingPass,\n  IRendererService,\n  IScale,\n  IScaleOptions,\n  IShaderModuleService,\n  ISourceCFG,\n  IStyleAttributeInitializationOptions,\n  IStyleAttributeService,\n  IStyleAttributeUpdateOptions,\n  lazyInject,\n  ScaleTypeName,\n  ScaleTypes,\n  StyleAttributeField,\n  StyleAttributeOption,\n  TYPES,\n} from '@antv/l7-core';\nimport Source from '@antv/l7-source';\nimport { encodePickingColor } from '@antv/l7-utils';\nimport { EventEmitter } from 'eventemitter3';\nimport { Container } from 'inversify';\nimport { isFunction, isObject } from 'lodash';\n// @ts-ignore\nimport mergeJsonSchemas from 'merge-json-schemas';\nimport { SyncBailHook, SyncHook, SyncWaterfallHook } from 'tapable';\nimport { normalizePasses } from '../plugins/MultiPassRendererPlugin';\nimport { BlendTypes } from '../utils/blend';\nimport baseLayerSchema from './schema';\n/**\n * 分配 layer id\n */\nlet layerIdCounter = 0;\n\nexport default class BaseLayer<ChildLayerStyleOptions = {}> extends EventEmitter\n  implements ILayer {\n  public id: string = `${layerIdCounter++}`;\n  public name: string = `${layerIdCounter++}`;\n  public type: string;\n  public visible: boolean = true;\n  public zIndex: number = 0;\n  public minZoom: number;\n  public maxZoom: number;\n  public inited: boolean = false;\n  public layerModelNeedUpdate: boolean = false;\n  public pickedFeatureID: number = -1;\n\n  public dataState: IDataState = {\n    dataSourceNeedUpdate: false,\n    dataMappingNeedUpdate: false,\n    filterNeedUpdate: false,\n    featureScaleNeedUpdate: false,\n    StyleAttrNeedUpdate: false,\n  };\n  // 生命周期钩子\n  public hooks = {\n    init: new SyncBailHook<void, boolean | void>(),\n    afterInit: new SyncBailHook<void, boolean | void>(),\n    beforeRender: new SyncBailHook<void, boolean | void>(),\n    beforeRenderData: new SyncWaterfallHook<void | boolean>(['data']),\n    afterRender: new SyncHook<void>(),\n    beforePickingEncode: new SyncHook<void>(),\n    afterPickingEncode: new SyncHook<void>(),\n    beforeHighlight: new SyncHook<[number[]]>(['pickedColor']),\n    afterHighlight: new SyncHook<void>(),\n    beforeSelect: new SyncHook<[number[]]>(['pickedColor']),\n    afterSelect: new SyncHook<void>(),\n    beforeDestroy: new SyncHook<void>(),\n    afterDestroy: new SyncHook<void>(),\n  };\n\n  // 待渲染 model 列表\n  public models: IModel[] = [];\n\n  // 每个 Layer 都有一个\n  public multiPassRenderer: IMultiPassRenderer;\n\n  // 注入插件集\n  public plugins: ILayerPlugin[];\n\n  public sourceOption: {\n    data: any;\n    options?: ISourceCFG;\n  };\n\n  public layerModel: ILayerModel;\n\n  @lazyInject(TYPES.ILogService)\n  protected readonly logger: ILogService;\n\n  @lazyInject(TYPES.IGlobalConfigService)\n  protected readonly configService: IGlobalConfigService;\n\n  @lazyInject(TYPES.IShaderModuleService)\n  protected readonly shaderModuleService: IShaderModuleService;\n\n  protected iconService: IIconService;\n\n  protected fontService: IFontService;\n\n  protected rendererService: IRendererService;\n\n  protected layerService: ILayerService;\n\n  protected interactionService: IInteractionService;\n\n  protected mapService: IMapService;\n\n  protected styleAttributeService: IStyleAttributeService;\n\n  protected layerSource: Source;\n\n  protected postProcessingPassFactory: (\n    name: string,\n  ) => IPostProcessingPass<unknown>;\n  protected normalPassFactory: (name: string) => IPass<unknown>;\n\n  protected animateOptions: IAnimateOption = { enable: false };\n\n  /**\n   * 图层容器\n   */\n  private container: Container;\n\n  private encodedData: IEncodeFeature[];\n\n  private configSchema: object;\n\n  private currentPickId: number | null = null;\n\n  private rawConfig: Partial<ILayerConfig & ChildLayerStyleOptions>;\n\n  private needUpdateConfig: Partial<ILayerConfig & ChildLayerStyleOptions>;\n\n  /**\n   * 待更新样式属性，在初始化阶段完成注册\n   */\n  private pendingStyleAttributes: Array<{\n    attributeName: string;\n    attributeField: StyleAttributeField;\n    attributeValues?: StyleAttributeOption;\n    defaultName?: string;\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>;\n  }> = [];\n\n  private scaleOptions: IScaleOptions = {};\n\n  private animateStartTime: number;\n\n  private aniamateStatus: boolean = false;\n\n  constructor(config: Partial<ILayerConfig & ChildLayerStyleOptions> = {}) {\n    super();\n    this.name = config.name || this.id;\n    this.rawConfig = config;\n  }\n\n  public getLayerConfig() {\n    return this.configService.getLayerConfig<ChildLayerStyleOptions>(this.id);\n  }\n\n  public updateLayerConfig(\n    configToUpdate: Partial<ILayerConfig | ChildLayerStyleOptions>,\n  ) {\n    if (!this.inited) {\n      this.needUpdateConfig = {\n        ...this.needUpdateConfig,\n        ...configToUpdate,\n      };\n    } else {\n      const sceneId = this.container.get<string>(TYPES.SceneID);\n      this.configService.setLayerConfig(sceneId, this.id, {\n        ...this.configService.getLayerConfig(this.id),\n        ...this.needUpdateConfig,\n        ...configToUpdate,\n      });\n      this.needUpdateConfig = {};\n    }\n  }\n\n  /**\n   * 注入图层容器，父容器为场景容器\n   * RootContainer 1\n   *  -> SceneContainer 1.*\n   *   -> LayerContainer 1.*\n   */\n  public setContainer(container: Container) {\n    this.container = container;\n  }\n\n  public getContainer() {\n    return this.container;\n  }\n\n  public addPlugin(plugin: ILayerPlugin) {\n    // TODO: 控制插件注册顺序\n    // @example:\n    // pointLayer.addPlugin(new MyCustomPlugin(), {\n    //   before: 'L7BuiltinPlugin'\n    // });\n    this.plugins.push(plugin);\n    return this;\n  }\n\n  public init() {\n    // 设置配置项\n    const sceneId = this.container.get<string>(TYPES.SceneID);\n    // 初始化图层配置项\n    this.configService.setLayerConfig(sceneId, this.id, {});\n\n    // 全局容器服务\n\n    // 场景容器服务\n    this.iconService = this.container.get<IIconService>(TYPES.IIconService);\n    this.fontService = this.container.get<IFontService>(TYPES.IFontService);\n\n    this.rendererService = this.container.get<IRendererService>(\n      TYPES.IRendererService,\n    );\n    this.layerService = this.container.get<ILayerService>(TYPES.ILayerService);\n    this.interactionService = this.container.get<IInteractionService>(\n      TYPES.IInteractionService,\n    );\n    this.mapService = this.container.get<IMapService>(TYPES.IMapService);\n    this.postProcessingPassFactory = this.container.get(\n      TYPES.IFactoryPostProcessingPass,\n    );\n    this.normalPassFactory = this.container.get(TYPES.IFactoryNormalPass);\n\n    // 图层容器服务\n    this.styleAttributeService = this.container.get<IStyleAttributeService>(\n      TYPES.IStyleAttributeService,\n    );\n    this.multiPassRenderer = this.container.get<IMultiPassRenderer>(\n      TYPES.IMultiPassRenderer,\n    );\n    this.multiPassRenderer.setLayer(this);\n\n    // 完成样式服务注册完成前添加的属性\n    this.pendingStyleAttributes.forEach(\n      ({\n        attributeName,\n        attributeField,\n        attributeValues,\n        defaultName,\n        updateOptions,\n      }) => {\n        this.styleAttributeService.updateStyleAttribute(\n          attributeName,\n          {\n            // @ts-ignore\n            scale: {\n              field: attributeField,\n              ...this.splitValuesAndCallbackInAttribute(\n                // @ts-ignore\n                attributeValues,\n                // @ts-ignore\n                this.getLayerConfig()[defaultName || attributeName],\n              ),\n            },\n          },\n          // @ts-ignore\n          updateOptions,\n        );\n      },\n    );\n    this.pendingStyleAttributes = [];\n\n    // 获取插件集\n    this.plugins = this.container.getAll<ILayerPlugin>(TYPES.ILayerPlugin);\n    // 完成插件注册，传入场景和图层容器内的服务\n    for (const plugin of this.plugins) {\n      plugin.apply(this, {\n        rendererService: this.rendererService,\n        mapService: this.mapService,\n        styleAttributeService: this.styleAttributeService,\n        normalPassFactory: this.normalPassFactory,\n        postProcessingPassFactory: this.postProcessingPassFactory,\n      });\n    }\n\n    // 触发 init 生命周期插件\n    this.hooks.init.call();\n    this.hooks.afterInit.call();\n\n    // 触发初始化完成事件;\n    this.emit('inited', {\n      target: this,\n      type: 'inited',\n    });\n    this.emit('add', {\n      target: this,\n      type: 'add',\n    });\n    return this;\n  }\n  /**\n   * Model初始化前需要更新Model样式\n   */\n  public prepareBuildModel() {\n    this.inited = true;\n    this.updateLayerConfig({\n      ...(this.getDefaultConfig() as object),\n      ...this.rawConfig,\n    });\n\n    // 启动动画\n    const { animateOption } = this.getLayerConfig();\n    if (animateOption?.enable) {\n      this.layerService.startAnimate();\n      this.aniamateStatus = true;\n    }\n  }\n  public color(\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    // 设置 color、size、shape、style 时由于场景服务尚未完成（并没有调用 scene.addLayer），因此暂时加入待更新属性列表\n    this.pendingStyleAttributes.push({\n      attributeName: 'color',\n      attributeField: field,\n      attributeValues: values,\n      defaultName: 'colors',\n      updateOptions,\n    });\n    return this;\n  }\n\n  public size(\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    this.pendingStyleAttributes.push({\n      attributeName: 'size',\n      attributeField: field,\n      attributeValues: values,\n      updateOptions,\n    });\n    return this;\n  }\n  // 对mapping后的数据过滤，scale保持不变\n  public filter(\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    this.pendingStyleAttributes.push({\n      attributeName: 'filter',\n      attributeField: field,\n      attributeValues: values,\n      updateOptions,\n    });\n    this.dataState.dataMappingNeedUpdate = true;\n    return this;\n  }\n\n  public shape(\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    this.pendingStyleAttributes.push({\n      attributeName: 'shape',\n      attributeField: field,\n      attributeValues: values,\n      updateOptions,\n    });\n    return this;\n  }\n  public label(\n    field: StyleAttributeField,\n    values?: StyleAttributeOption,\n    updateOptions?: Partial<IStyleAttributeUpdateOptions>,\n  ) {\n    this.pendingStyleAttributes.push({\n      attributeName: 'label',\n      attributeField: field,\n      attributeValues: values,\n      updateOptions,\n    });\n    return this;\n  }\n  public animate(options: IAnimateOption | boolean) {\n    let rawAnimate: Partial<IAnimateOption> = {};\n    if (isObject(options)) {\n      rawAnimate.enable = true;\n      rawAnimate = {\n        ...rawAnimate,\n        ...options,\n      };\n    } else {\n      rawAnimate.enable = options;\n    }\n    this.updateLayerConfig({\n      animateOption: rawAnimate,\n    });\n    // this.animateOptions = options;\n    return this;\n  }\n\n  public source(data: any, options?: ISourceCFG): ILayer {\n    this.sourceOption = {\n      data,\n      options,\n    };\n    return this;\n  }\n\n  public setData(data: any, options?: ISourceCFG) {\n    if (this.inited) {\n      this.layerSource.setData(data);\n    } else {\n      this.on('inited', () => {\n        this.layerSource.setData(data);\n      });\n    }\n\n    return this;\n  }\n  public style(\n    options: Partial<ChildLayerStyleOptions> & Partial<ILayerConfig>,\n  ): ILayer {\n    const { passes, ...rest } = options;\n\n    // passes 特殊处理\n    if (passes) {\n      normalizePasses(passes).forEach(\n        (pass: [string, { [key: string]: unknown }]) => {\n          const postProcessingPass = this.multiPassRenderer\n            .getPostProcessor()\n            .getPostProcessingPassByName(pass[0]);\n          if (postProcessingPass) {\n            postProcessingPass.updateOptions(pass[1]);\n          }\n        },\n      );\n    }\n\n    this.rawConfig = {\n      ...this.rawConfig,\n      ...rest,\n    };\n\n    if (this.container) {\n      this.updateLayerConfig(this.rawConfig);\n    }\n    return this;\n  }\n  public scale(field: ScaleTypeName | IScaleOptions, cfg: IScale) {\n    if (isObject(field)) {\n      this.scaleOptions = {\n        ...this.scaleOptions,\n        ...field,\n      };\n    } else {\n      this.scaleOptions[field] = cfg;\n    }\n    return this;\n  }\n  public render(): ILayer {\n    if (this.multiPassRenderer && this.multiPassRenderer.getRenderFlag()) {\n      this.multiPassRenderer.render();\n    } else {\n      this.renderModels();\n    }\n    return this;\n  }\n\n  public active(options: IActiveOption) {\n    const activeOption: Partial<ILayerConfig> = {};\n    activeOption.enableHighlight = isObject(options) ? true : options;\n    if (isObject(options)) {\n      activeOption.enableHighlight = true;\n      if (options.color) {\n        activeOption.highlightColor = options.color;\n      }\n    } else {\n      activeOption.enableHighlight = !!options;\n    }\n    this.updateLayerConfig(activeOption);\n    return this;\n  }\n  public setActive(\n    id: number | { x: number; y: number },\n    options?: IActiveOption,\n  ): void {\n    if (isObject(id)) {\n      const { x = 0, y = 0 } = id;\n      this.updateLayerConfig({\n        highlightColor: isObject(options)\n          ? options.color\n          : this.getLayerConfig().highlightColor,\n      });\n      this.pick({ x, y });\n    } else {\n      this.updateLayerConfig({\n        pickedFeatureID: id,\n        highlightColor: isObject(options)\n          ? options.color\n          : this.getLayerConfig().highlightColor,\n      });\n      this.hooks.beforeSelect.callAsync(\n        encodePickingColor(id as number) as number[],\n        () => {\n          setTimeout(() => {\n            this.reRender();\n          }, 1);\n        },\n      );\n    }\n  }\n\n  public select(option: IActiveOption | boolean): ILayer {\n    const activeOption: Partial<ILayerConfig> = {};\n    activeOption.enableSelect = isObject(option) ? true : option;\n    if (isObject(option)) {\n      activeOption.enableSelect = true;\n      if (option.color) {\n        activeOption.selectColor = option.color;\n      }\n    } else {\n      activeOption.enableSelect = !!option;\n    }\n    this.updateLayerConfig(activeOption);\n    return this;\n  }\n\n  public setSelect(\n    id: number | { x: number; y: number },\n    options?: IActiveOption,\n  ): void {\n    if (isObject(id)) {\n      const { x = 0, y = 0 } = id;\n      this.updateLayerConfig({\n        selectColor: isObject(options)\n          ? options.color\n          : this.getLayerConfig().selectColor,\n      });\n      this.pick({ x, y });\n    } else {\n      this.updateLayerConfig({\n        pickedFeatureID: id,\n        selectColor: isObject(options)\n          ? options.color\n          : this.getLayerConfig().selectColor,\n      });\n      this.hooks.beforeSelect.callAsync(\n        encodePickingColor(id as number) as number[],\n        () => {\n          setTimeout(() => {\n            this.reRender();\n          }, 1);\n        },\n      );\n    }\n  }\n  public setBlend(type: keyof typeof BlendType): void {\n    this.updateLayerConfig({\n      blend: type,\n    });\n    this.layerModelNeedUpdate = true;\n    this.reRender();\n  }\n  public show(): ILayer {\n    this.updateLayerConfig({\n      visible: true,\n    });\n    this.reRender();\n    return this;\n  }\n\n  public hide(): ILayer {\n    this.updateLayerConfig({\n      visible: false,\n    });\n    this.reRender();\n    return this;\n  }\n  public setIndex(index: number): ILayer {\n    this.zIndex = index;\n    this.layerService.updateRenderOrder();\n    return this;\n  }\n\n  public setCurrentPickId(id: number) {\n    this.currentPickId = id;\n  }\n\n  public getCurrentPickId(): number | null {\n    return this.currentPickId;\n  }\n  public isVisible(): boolean {\n    const zoom = this.mapService.getZoom();\n    const {\n      visible,\n      minZoom = -Infinity,\n      maxZoom = Infinity,\n    } = this.getLayerConfig();\n    return !!visible && zoom >= minZoom && zoom <= maxZoom;\n  }\n\n  public setMinZoom(minZoom: number): ILayer {\n    this.updateLayerConfig({\n      minZoom,\n    });\n    return this;\n  }\n\n  public setMaxZoom(maxZoom: number): ILayer {\n    this.updateLayerConfig({\n      maxZoom,\n    });\n    return this;\n  }\n  /**\n   * zoom to layer Bounds\n   */\n  public fitBounds(): ILayer {\n    if (!this.inited) {\n      this.updateLayerConfig({\n        autoFit: true,\n      });\n      return this;\n    }\n    const source = this.getSource();\n    const extent = source.extent;\n    this.mapService.fitBounds([\n      [extent[0], extent[1]],\n      [extent[2], extent[3]],\n    ]);\n    return this;\n  }\n\n  public destroy() {\n    this.hooks.beforeDestroy.call();\n    // 清除sources事件\n    this.layerSource.off('update', this.sourceEvent);\n\n    // 清除所有属性以及关联的 vao\n    this.styleAttributeService.clearAllAttributes();\n    // 销毁所有 model\n    this.models.forEach((model) => model.destroy());\n\n    this.hooks.afterDestroy.call();\n\n    this.emit('remove', {\n      target: this,\n      type: 'remove',\n    });\n\n    this.removeAllListeners();\n\n    // 解绑图层容器中的服务\n    // this.container.unbind(TYPES.IStyleAttributeService);\n  }\n  public clear() {\n    this.styleAttributeService.clearAllAttributes();\n    // 销毁所有 model\n    this.models.forEach((model) => model.destroy());\n  }\n\n  public isDirty() {\n    return !!(\n      this.styleAttributeService.getLayerStyleAttributes() || []\n    ).filter(\n      (attribute) =>\n        attribute.needRescale ||\n        attribute.needRemapping ||\n        attribute.needRegenerateVertices,\n    ).length;\n  }\n\n  public setSource(source: Source) {\n    this.layerSource = source;\n    const zoom = this.mapService.getZoom();\n    if (this.layerSource.cluster) {\n      this.layerSource.updateClusterData(zoom);\n    }\n    // source 可能会复用，会在其它layer被修改\n    this.layerSource.on('update', this.sourceEvent);\n  }\n  public getSource() {\n    return this.layerSource;\n  }\n\n  public getScaleOptions() {\n    return this.scaleOptions;\n  }\n\n  public setEncodedData(encodedData: IEncodeFeature[]) {\n    this.encodedData = encodedData;\n  }\n  public getEncodedData() {\n    return this.encodedData;\n  }\n\n  public getConfigSchemaForValidation() {\n    if (!this.configSchema) {\n      // 相比 allOf, merge 有一些优势\n      // @see https://github.com/goodeggs/merge-json-schemas\n      this.configSchema = mergeJsonSchemas([\n        baseLayerSchema,\n        this.getConfigSchema(),\n      ]);\n    }\n    return this.configSchema;\n  }\n\n  public pick({ x, y }: { x: number; y: number }) {\n    this.interactionService.triggerHover({ x, y });\n  }\n\n  public buildLayerModel(\n    options: ILayerModelInitializationOptions &\n      Partial<IModelInitializationOptions>,\n  ): IModel {\n    const {\n      moduleName,\n      vertexShader,\n      fragmentShader,\n      triangulation,\n      ...rest\n    } = options;\n    this.shaderModuleService.registerModule(moduleName, {\n      vs: vertexShader,\n      fs: fragmentShader,\n    });\n    const { vs, fs, uniforms } = this.shaderModuleService.getModule(moduleName);\n    const { createModel } = this.rendererService;\n    const {\n      attributes,\n      elements,\n    } = this.styleAttributeService.createAttributesAndIndices(\n      this.encodedData,\n      triangulation,\n    );\n    return createModel({\n      attributes,\n      uniforms,\n      fs,\n      vs,\n      elements,\n      blend: BlendTypes[BlendType.normal],\n      ...rest,\n    });\n  }\n\n  public getTime() {\n    return this.layerService.clock.getDelta();\n  }\n  public setAnimateStartTime() {\n    this.animateStartTime = this.layerService.clock.getElapsedTime();\n  }\n  public stopAnimate() {\n    if (this.aniamateStatus) {\n      this.layerService.stopAnimate();\n      this.aniamateStatus = false;\n      this.updateLayerConfig({\n        animateOption: {\n          enable: false,\n        },\n      });\n    }\n  }\n  public getLayerAnimateTime(): number {\n    return this.layerService.clock.getElapsedTime() - this.animateStartTime;\n  }\n\n  public buildModels() {\n    throw new Error('Method not implemented.');\n  }\n\n  protected getConfigSchema() {\n    throw new Error('Method not implemented.');\n  }\n\n  protected renderModels() {\n    if (this.layerModelNeedUpdate) {\n      this.models = this.layerModel.buildModels();\n      this.layerModelNeedUpdate = false;\n    }\n    this.models.forEach((model) => {\n      model.draw({\n        uniforms: this.layerModel.getUninforms(),\n      });\n    });\n    return this;\n  }\n\n  protected getModelType(): unknown {\n    throw new Error('Method not implemented.');\n  }\n  protected getDefaultConfig() {\n    return {};\n  }\n\n  private sourceEvent = () => {\n    this.dataState.dataSourceNeedUpdate = true;\n    this.reRender();\n  };\n\n  private reRender() {\n    if (this.inited) {\n      this.layerService.renderLayers();\n    }\n  }\n  private splitValuesAndCallbackInAttribute(\n    valuesOrCallback?: unknown[],\n    defaultValues?: unknown[],\n  ) {\n    return {\n      values: isFunction(valuesOrCallback)\n        ? undefined\n        : valuesOrCallback || defaultValues,\n      callback: isFunction(valuesOrCallback) ? valuesOrCallback : undefined,\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}