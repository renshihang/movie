{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar binding_count_1 = require(\"../bindings/binding_count\");\n\nvar ERROR_MSGS = require(\"../constants/error_msgs\");\n\nvar literal_types_1 = require(\"../constants/literal_types\");\n\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\n\nvar exceptions_1 = require(\"../utils/exceptions\");\n\nvar serialization_1 = require(\"../utils/serialization\");\n\nvar context_1 = require(\"./context\");\n\nvar metadata_1 = require(\"./metadata\");\n\nvar plan_1 = require(\"./plan\");\n\nvar reflection_utils_1 = require(\"./reflection_utils\");\n\nvar request_1 = require(\"./request\");\n\nvar target_1 = require(\"./target\");\n\nfunction getBindingDictionary(cntnr) {\n  return cntnr._bindingDictionary;\n}\n\nexports.getBindingDictionary = getBindingDictionary;\n\nfunction _createTarget(isMultiInject, targetType, serviceIdentifier, name, key, value) {\n  var metadataKey = isMultiInject ? METADATA_KEY.MULTI_INJECT_TAG : METADATA_KEY.INJECT_TAG;\n  var injectMetadata = new metadata_1.Metadata(metadataKey, serviceIdentifier);\n  var target = new target_1.Target(targetType, name, serviceIdentifier, injectMetadata);\n\n  if (key !== undefined) {\n    var tagMetadata = new metadata_1.Metadata(key, value);\n    target.metadata.push(tagMetadata);\n  }\n\n  return target;\n}\n\nfunction _getActiveBindings(metadataReader, avoidConstraints, context, parentRequest, target) {\n  var bindings = getBindings(context.container, target.serviceIdentifier);\n  var activeBindings = [];\n\n  if (bindings.length === binding_count_1.BindingCount.NoBindingsAvailable && context.container.options.autoBindInjectable && typeof target.serviceIdentifier === \"function\" && metadataReader.getConstructorMetadata(target.serviceIdentifier).compilerGeneratedMetadata) {\n    context.container.bind(target.serviceIdentifier).toSelf();\n    bindings = getBindings(context.container, target.serviceIdentifier);\n  }\n\n  if (!avoidConstraints) {\n    activeBindings = bindings.filter(function (binding) {\n      var request = new request_1.Request(binding.serviceIdentifier, context, parentRequest, binding, target);\n      return binding.constraint(request);\n    });\n  } else {\n    activeBindings = bindings;\n  }\n\n  _validateActiveBindingCount(target.serviceIdentifier, activeBindings, target, context.container);\n\n  return activeBindings;\n}\n\nfunction _validateActiveBindingCount(serviceIdentifier, bindings, target, container) {\n  switch (bindings.length) {\n    case binding_count_1.BindingCount.NoBindingsAvailable:\n      if (target.isOptional()) {\n        return bindings;\n      } else {\n        var serviceIdentifierString = serialization_1.getServiceIdentifierAsString(serviceIdentifier);\n        var msg = ERROR_MSGS.NOT_REGISTERED;\n        msg += serialization_1.listMetadataForTarget(serviceIdentifierString, target);\n        msg += serialization_1.listRegisteredBindingsForServiceIdentifier(container, serviceIdentifierString, getBindings);\n        throw new Error(msg);\n      }\n\n    case binding_count_1.BindingCount.OnlyOneBindingAvailable:\n      if (!target.isArray()) {\n        return bindings;\n      }\n\n    case binding_count_1.BindingCount.MultipleBindingsAvailable:\n    default:\n      if (!target.isArray()) {\n        var serviceIdentifierString = serialization_1.getServiceIdentifierAsString(serviceIdentifier);\n        var msg = ERROR_MSGS.AMBIGUOUS_MATCH + \" \" + serviceIdentifierString;\n        msg += serialization_1.listRegisteredBindingsForServiceIdentifier(container, serviceIdentifierString, getBindings);\n        throw new Error(msg);\n      } else {\n        return bindings;\n      }\n\n  }\n}\n\nfunction _createSubRequests(metadataReader, avoidConstraints, serviceIdentifier, context, parentRequest, target) {\n  var activeBindings;\n  var childRequest;\n\n  if (parentRequest === null) {\n    activeBindings = _getActiveBindings(metadataReader, avoidConstraints, context, null, target);\n    childRequest = new request_1.Request(serviceIdentifier, context, null, activeBindings, target);\n    var thePlan = new plan_1.Plan(context, childRequest);\n    context.addPlan(thePlan);\n  } else {\n    activeBindings = _getActiveBindings(metadataReader, avoidConstraints, context, parentRequest, target);\n    childRequest = parentRequest.addChildRequest(target.serviceIdentifier, activeBindings, target);\n  }\n\n  activeBindings.forEach(function (binding) {\n    var subChildRequest = null;\n\n    if (target.isArray()) {\n      subChildRequest = childRequest.addChildRequest(binding.serviceIdentifier, binding, target);\n    } else {\n      if (binding.cache) {\n        return;\n      }\n\n      subChildRequest = childRequest;\n    }\n\n    if (binding.type === literal_types_1.BindingTypeEnum.Instance && binding.implementationType !== null) {\n      var dependencies = reflection_utils_1.getDependencies(metadataReader, binding.implementationType);\n\n      if (!context.container.options.skipBaseClassChecks) {\n        var baseClassDependencyCount = reflection_utils_1.getBaseClassDependencyCount(metadataReader, binding.implementationType);\n\n        if (dependencies.length < baseClassDependencyCount) {\n          var error = ERROR_MSGS.ARGUMENTS_LENGTH_MISMATCH(reflection_utils_1.getFunctionName(binding.implementationType));\n          throw new Error(error);\n        }\n      }\n\n      dependencies.forEach(function (dependency) {\n        _createSubRequests(metadataReader, false, dependency.serviceIdentifier, context, subChildRequest, dependency);\n      });\n    }\n  });\n}\n\nfunction getBindings(container, serviceIdentifier) {\n  var bindings = [];\n  var bindingDictionary = getBindingDictionary(container);\n\n  if (bindingDictionary.hasKey(serviceIdentifier)) {\n    bindings = bindingDictionary.get(serviceIdentifier);\n  } else if (container.parent !== null) {\n    bindings = getBindings(container.parent, serviceIdentifier);\n  }\n\n  return bindings;\n}\n\nfunction plan(metadataReader, container, isMultiInject, targetType, serviceIdentifier, key, value, avoidConstraints) {\n  if (avoidConstraints === void 0) {\n    avoidConstraints = false;\n  }\n\n  var context = new context_1.Context(container);\n\n  var target = _createTarget(isMultiInject, targetType, serviceIdentifier, \"\", key, value);\n\n  try {\n    _createSubRequests(metadataReader, avoidConstraints, serviceIdentifier, context, null, target);\n\n    return context;\n  } catch (error) {\n    if (exceptions_1.isStackOverflowExeption(error)) {\n      if (context.plan) {\n        serialization_1.circularDependencyToException(context.plan.rootRequest);\n      }\n    }\n\n    throw error;\n  }\n}\n\nexports.plan = plan;\n\nfunction createMockRequest(container, serviceIdentifier, key, value) {\n  var target = new target_1.Target(literal_types_1.TargetTypeEnum.Variable, \"\", serviceIdentifier, new metadata_1.Metadata(key, value));\n  var context = new context_1.Context(container);\n  var request = new request_1.Request(serviceIdentifier, context, null, [], target);\n  return request;\n}\n\nexports.createMockRequest = createMockRequest;","map":{"version":3,"sources":["/Users/renshihang/Desktop/svvlbn.run/node_modules/inversify/lib/planning/planner.js"],"names":["Object","defineProperty","exports","value","binding_count_1","require","ERROR_MSGS","literal_types_1","METADATA_KEY","exceptions_1","serialization_1","context_1","metadata_1","plan_1","reflection_utils_1","request_1","target_1","getBindingDictionary","cntnr","_bindingDictionary","_createTarget","isMultiInject","targetType","serviceIdentifier","name","key","metadataKey","MULTI_INJECT_TAG","INJECT_TAG","injectMetadata","Metadata","target","Target","undefined","tagMetadata","metadata","push","_getActiveBindings","metadataReader","avoidConstraints","context","parentRequest","bindings","getBindings","container","activeBindings","length","BindingCount","NoBindingsAvailable","options","autoBindInjectable","getConstructorMetadata","compilerGeneratedMetadata","bind","toSelf","filter","binding","request","Request","constraint","_validateActiveBindingCount","isOptional","serviceIdentifierString","getServiceIdentifierAsString","msg","NOT_REGISTERED","listMetadataForTarget","listRegisteredBindingsForServiceIdentifier","Error","OnlyOneBindingAvailable","isArray","MultipleBindingsAvailable","AMBIGUOUS_MATCH","_createSubRequests","childRequest","thePlan","Plan","addPlan","addChildRequest","forEach","subChildRequest","cache","type","BindingTypeEnum","Instance","implementationType","dependencies","getDependencies","skipBaseClassChecks","baseClassDependencyCount","getBaseClassDependencyCount","error","ARGUMENTS_LENGTH_MISMATCH","getFunctionName","dependency","bindingDictionary","hasKey","get","parent","plan","Context","isStackOverflowExeption","circularDependencyToException","rootRequest","createMockRequest","TargetTypeEnum","Variable"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar binding_count_1 = require(\"../bindings/binding_count\");\nvar ERROR_MSGS = require(\"../constants/error_msgs\");\nvar literal_types_1 = require(\"../constants/literal_types\");\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\nvar exceptions_1 = require(\"../utils/exceptions\");\nvar serialization_1 = require(\"../utils/serialization\");\nvar context_1 = require(\"./context\");\nvar metadata_1 = require(\"./metadata\");\nvar plan_1 = require(\"./plan\");\nvar reflection_utils_1 = require(\"./reflection_utils\");\nvar request_1 = require(\"./request\");\nvar target_1 = require(\"./target\");\nfunction getBindingDictionary(cntnr) {\n    return cntnr._bindingDictionary;\n}\nexports.getBindingDictionary = getBindingDictionary;\nfunction _createTarget(isMultiInject, targetType, serviceIdentifier, name, key, value) {\n    var metadataKey = isMultiInject ? METADATA_KEY.MULTI_INJECT_TAG : METADATA_KEY.INJECT_TAG;\n    var injectMetadata = new metadata_1.Metadata(metadataKey, serviceIdentifier);\n    var target = new target_1.Target(targetType, name, serviceIdentifier, injectMetadata);\n    if (key !== undefined) {\n        var tagMetadata = new metadata_1.Metadata(key, value);\n        target.metadata.push(tagMetadata);\n    }\n    return target;\n}\nfunction _getActiveBindings(metadataReader, avoidConstraints, context, parentRequest, target) {\n    var bindings = getBindings(context.container, target.serviceIdentifier);\n    var activeBindings = [];\n    if (bindings.length === binding_count_1.BindingCount.NoBindingsAvailable &&\n        context.container.options.autoBindInjectable &&\n        typeof target.serviceIdentifier === \"function\" &&\n        metadataReader.getConstructorMetadata(target.serviceIdentifier).compilerGeneratedMetadata) {\n        context.container.bind(target.serviceIdentifier).toSelf();\n        bindings = getBindings(context.container, target.serviceIdentifier);\n    }\n    if (!avoidConstraints) {\n        activeBindings = bindings.filter(function (binding) {\n            var request = new request_1.Request(binding.serviceIdentifier, context, parentRequest, binding, target);\n            return binding.constraint(request);\n        });\n    }\n    else {\n        activeBindings = bindings;\n    }\n    _validateActiveBindingCount(target.serviceIdentifier, activeBindings, target, context.container);\n    return activeBindings;\n}\nfunction _validateActiveBindingCount(serviceIdentifier, bindings, target, container) {\n    switch (bindings.length) {\n        case binding_count_1.BindingCount.NoBindingsAvailable:\n            if (target.isOptional()) {\n                return bindings;\n            }\n            else {\n                var serviceIdentifierString = serialization_1.getServiceIdentifierAsString(serviceIdentifier);\n                var msg = ERROR_MSGS.NOT_REGISTERED;\n                msg += serialization_1.listMetadataForTarget(serviceIdentifierString, target);\n                msg += serialization_1.listRegisteredBindingsForServiceIdentifier(container, serviceIdentifierString, getBindings);\n                throw new Error(msg);\n            }\n        case binding_count_1.BindingCount.OnlyOneBindingAvailable:\n            if (!target.isArray()) {\n                return bindings;\n            }\n        case binding_count_1.BindingCount.MultipleBindingsAvailable:\n        default:\n            if (!target.isArray()) {\n                var serviceIdentifierString = serialization_1.getServiceIdentifierAsString(serviceIdentifier);\n                var msg = ERROR_MSGS.AMBIGUOUS_MATCH + \" \" + serviceIdentifierString;\n                msg += serialization_1.listRegisteredBindingsForServiceIdentifier(container, serviceIdentifierString, getBindings);\n                throw new Error(msg);\n            }\n            else {\n                return bindings;\n            }\n    }\n}\nfunction _createSubRequests(metadataReader, avoidConstraints, serviceIdentifier, context, parentRequest, target) {\n    var activeBindings;\n    var childRequest;\n    if (parentRequest === null) {\n        activeBindings = _getActiveBindings(metadataReader, avoidConstraints, context, null, target);\n        childRequest = new request_1.Request(serviceIdentifier, context, null, activeBindings, target);\n        var thePlan = new plan_1.Plan(context, childRequest);\n        context.addPlan(thePlan);\n    }\n    else {\n        activeBindings = _getActiveBindings(metadataReader, avoidConstraints, context, parentRequest, target);\n        childRequest = parentRequest.addChildRequest(target.serviceIdentifier, activeBindings, target);\n    }\n    activeBindings.forEach(function (binding) {\n        var subChildRequest = null;\n        if (target.isArray()) {\n            subChildRequest = childRequest.addChildRequest(binding.serviceIdentifier, binding, target);\n        }\n        else {\n            if (binding.cache) {\n                return;\n            }\n            subChildRequest = childRequest;\n        }\n        if (binding.type === literal_types_1.BindingTypeEnum.Instance && binding.implementationType !== null) {\n            var dependencies = reflection_utils_1.getDependencies(metadataReader, binding.implementationType);\n            if (!context.container.options.skipBaseClassChecks) {\n                var baseClassDependencyCount = reflection_utils_1.getBaseClassDependencyCount(metadataReader, binding.implementationType);\n                if (dependencies.length < baseClassDependencyCount) {\n                    var error = ERROR_MSGS.ARGUMENTS_LENGTH_MISMATCH(reflection_utils_1.getFunctionName(binding.implementationType));\n                    throw new Error(error);\n                }\n            }\n            dependencies.forEach(function (dependency) {\n                _createSubRequests(metadataReader, false, dependency.serviceIdentifier, context, subChildRequest, dependency);\n            });\n        }\n    });\n}\nfunction getBindings(container, serviceIdentifier) {\n    var bindings = [];\n    var bindingDictionary = getBindingDictionary(container);\n    if (bindingDictionary.hasKey(serviceIdentifier)) {\n        bindings = bindingDictionary.get(serviceIdentifier);\n    }\n    else if (container.parent !== null) {\n        bindings = getBindings(container.parent, serviceIdentifier);\n    }\n    return bindings;\n}\nfunction plan(metadataReader, container, isMultiInject, targetType, serviceIdentifier, key, value, avoidConstraints) {\n    if (avoidConstraints === void 0) { avoidConstraints = false; }\n    var context = new context_1.Context(container);\n    var target = _createTarget(isMultiInject, targetType, serviceIdentifier, \"\", key, value);\n    try {\n        _createSubRequests(metadataReader, avoidConstraints, serviceIdentifier, context, null, target);\n        return context;\n    }\n    catch (error) {\n        if (exceptions_1.isStackOverflowExeption(error)) {\n            if (context.plan) {\n                serialization_1.circularDependencyToException(context.plan.rootRequest);\n            }\n        }\n        throw error;\n    }\n}\nexports.plan = plan;\nfunction createMockRequest(container, serviceIdentifier, key, value) {\n    var target = new target_1.Target(literal_types_1.TargetTypeEnum.Variable, \"\", serviceIdentifier, new metadata_1.Metadata(key, value));\n    var context = new context_1.Context(container);\n    var request = new request_1.Request(serviceIdentifier, context, null, [], target);\n    return request;\n}\nexports.createMockRequest = createMockRequest;\n"]},"metadata":{},"sourceType":"script"}