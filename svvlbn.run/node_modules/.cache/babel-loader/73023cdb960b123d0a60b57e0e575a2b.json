{"ast":null,"code":"import _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _class, _class2, _descriptor, _temp;\n\nimport { TYPES } from '@antv/l7-core';\nimport { inject, injectable } from 'inversify';\nvar UpdateStyleAttributePlugin = (_dec = injectable(), _dec2 = inject(TYPES.ILogService), _dec(_class = (_class2 = (_temp = function () {\n  function UpdateStyleAttributePlugin() {\n    _classCallCheck(this, UpdateStyleAttributePlugin);\n\n    _initializerDefineProperty(this, \"logger\", _descriptor, this);\n  }\n\n  _createClass(UpdateStyleAttributePlugin, [{\n    key: \"apply\",\n    value: function apply(layer, _ref) {\n      var _this = this;\n\n      var styleAttributeService = _ref.styleAttributeService;\n      layer.hooks.init.tap('UpdateStyleAttributePlugin', function () {\n        _this.updateStyleAtrribute(layer, {\n          styleAttributeService: styleAttributeService\n        });\n      });\n      layer.hooks.beforeRenderData.tap('styleAttributeService', function (flag) {\n        if (flag) {\n          layer.layerModelNeedUpdate = true;\n          return true;\n        }\n\n        return false;\n      });\n      layer.hooks.beforeRender.tap('UpdateStyleAttributePlugin', function () {\n        _this.updateStyleAtrribute(layer, {\n          styleAttributeService: styleAttributeService\n        });\n      });\n    }\n  }, {\n    key: \"updateStyleAtrribute\",\n    value: function updateStyleAtrribute(layer, _ref2) {\n      var _this2 = this;\n\n      var styleAttributeService = _ref2.styleAttributeService;\n      var attributes = styleAttributeService.getLayerStyleAttributes() || [];\n      attributes.filter(function (attribute) {\n        return attribute.needRegenerateVertices;\n      }).forEach(function (attribute) {\n        styleAttributeService.updateAttributeByFeatureRange(attribute.name, layer.getEncodedData(), attribute.featureRange.startIndex, attribute.featureRange.endIndex);\n        attribute.needRegenerateVertices = false;\n\n        _this2.logger.debug(\"regenerate vertex attributes: \".concat(attribute.name, \" finished\"));\n      });\n    }\n  }]);\n\n  return UpdateStyleAttributePlugin;\n}(), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"logger\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2)) || _class);\nexport { UpdateStyleAttributePlugin as default };","map":{"version":3,"sources":["../../src/plugins/UpdateStyleAttributePlugin.ts"],"names":["injectable","UpdateStyleAttributePlugin","inject","TYPES","layer","styleAttributeService","attributes","attribute"],"mappings":";;;;;;;;AAAA,SAAA,KAAA,QAAA,eAAA;AAOA,SAAA,MAAA,EAAA,UAAA,QAAA,WAAA;IAMqBC,0B,WADpBD,UAAU,E,UAERE,MAAM,CAACC,KAAK,CAAN,WAAA,C;;;;;;;;;0BAILC,K,QAIA;AAAA,UAAA,KAAA,GAAA,IAAA;;AAAA,UAFEC,qBAEF,GAAA,IAAA,CAFEA,qBAEF;AACAD,MAAAA,KAAK,CAALA,KAAAA,CAAAA,IAAAA,CAAAA,GAAAA,CAAAA,4BAAAA,EAAmD,YAAM;AACvD,QAAA,KAAI,CAAJ,oBAAA,CAAA,KAAA,EAAiC;AAAEC,UAAAA,qBAAqB,EAArBA;AAAF,SAAjC;AADFD,OAAAA;AAIAA,MAAAA,KAAK,CAALA,KAAAA,CAAAA,gBAAAA,CAAAA,GAAAA,CAAAA,uBAAAA,EAA0D,UAAA,IAAA,EAAU;AAClE,YAAA,IAAA,EAAU;AAIRA,UAAAA,KAAK,CAALA,oBAAAA,GAAAA,IAAAA;AACA,iBAAA,IAAA;AACD;;AACD,eAAA,KAAA;AARFA,OAAAA;AAWAA,MAAAA,KAAK,CAALA,KAAAA,CAAAA,YAAAA,CAAAA,GAAAA,CAAAA,4BAAAA,EAA2D,YAAM;AAC/D,QAAA,KAAI,CAAJ,oBAAA,CAAA,KAAA,EAAiC;AAAEC,UAAAA,qBAAqB,EAArBA;AAAF,SAAjC;AADFD,OAAAA;AAGD;;;yCAGCA,K,SAIA;AAAA,UAAA,MAAA,GAAA,IAAA;;AAAA,UAFEC,qBAEF,GAAA,KAAA,CAFEA,qBAEF;AACA,UAAMC,UAAU,GAAGD,qBAAqB,CAArBA,uBAAAA,MAAnB,EAAA;AACAC,MAAAA,UAAU,CAAVA,MAAAA,CACU,UAAA,SAAA,EAAA;AAAA,eAAeC,SAAS,CAAxB,sBAAA;AADVD,OAAAA,EAAAA,OAAAA,CAEW,UAAA,SAAA,EAAe;AAEtBD,QAAAA,qBAAqB,CAArBA,6BAAAA,CACEE,SAAS,CADXF,IAAAA,EAEED,KAAK,CAFPC,cAEED,EAFFC,EAGEE,SAAS,CAATA,YAAAA,CAHFF,UAAAA,EAIEE,SAAS,CAATA,YAAAA,CAJFF,QAAAA;AAMAE,QAAAA,SAAS,CAATA,sBAAAA,GAAAA,KAAAA;;AACA,QAAA,MAAI,CAAJ,MAAA,CAAA,KAAA,CAAA,iCAAA,MAAA,CACmCA,SAAS,CAD5C,IAAA,EAAA,WAAA,CAAA;AAXJD,OAAAA;AAeD;;;;;;;;;;SApDkBL,0B","sourcesContent":["import {\n  ILayer,\n  ILayerPlugin,\n  ILogService,\n  IStyleAttributeService,\n  TYPES,\n} from '@antv/l7-core';\nimport { inject, injectable } from 'inversify';\n\n/**\n * 在初始化阶段完成属性的注册，以及首次根据 Layer 指定的三角化方法完成 indices 和 attribute 的创建\n */\n@injectable()\nexport default class UpdateStyleAttributePlugin implements ILayerPlugin {\n  @inject(TYPES.ILogService)\n  private readonly logger: ILogService;\n\n  public apply(\n    layer: ILayer,\n    {\n      styleAttributeService,\n    }: { styleAttributeService: IStyleAttributeService },\n  ) {\n    layer.hooks.init.tap('UpdateStyleAttributePlugin', () => {\n      this.updateStyleAtrribute(layer, { styleAttributeService });\n    });\n\n    layer.hooks.beforeRenderData.tap('styleAttributeService', (flag) => {\n      if (flag) {\n        // styleAttributeService.createAttributesAndIndices(\n        //   layer.getEncodedData(),\n        // );\n        layer.layerModelNeedUpdate = true;\n        return true;\n      }\n      return false;\n    });\n\n    layer.hooks.beforeRender.tap('UpdateStyleAttributePlugin', () => {\n      this.updateStyleAtrribute(layer, { styleAttributeService });\n    });\n  }\n\n  private updateStyleAtrribute(\n    layer: ILayer,\n    {\n      styleAttributeService,\n    }: { styleAttributeService: IStyleAttributeService },\n  ) {\n    const attributes = styleAttributeService.getLayerStyleAttributes() || [];\n    attributes\n      .filter((attribute) => attribute.needRegenerateVertices)\n      .forEach((attribute) => {\n        // 精确更新某个/某些 feature(s)，需要传入 featureIdx\n        styleAttributeService.updateAttributeByFeatureRange(\n          attribute.name,\n          layer.getEncodedData(), // 获取经过 mapping 最新的数据\n          attribute.featureRange.startIndex,\n          attribute.featureRange.endIndex,\n        );\n        attribute.needRegenerateVertices = false;\n        this.logger.debug(\n          `regenerate vertex attributes: ${attribute.name} finished`,\n        );\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}