{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { Logo } from '@antv/l7-component';\nimport { createLayerContainer, createSceneContainer, SceneEventList, TYPES } from '@antv/l7-core';\nimport { ReglRendererService } from '@antv/l7-renderer';\nimport { DOM } from '@antv/l7-utils';\n\nvar Scene = function () {\n  function Scene(config) {\n    _classCallCheck(this, Scene);\n\n    this.sceneService = void 0;\n    this.mapService = void 0;\n    this.controlService = void 0;\n    this.layerService = void 0;\n    this.iconService = void 0;\n    this.markerService = void 0;\n    this.popupService = void 0;\n    this.container = void 0;\n    var id = config.id,\n        map = config.map;\n    var sceneContainer = createSceneContainer();\n    this.container = sceneContainer;\n    map.setContainer(sceneContainer, id);\n    sceneContainer.bind(TYPES.IRendererService).to(ReglRendererService).inSingletonScope();\n    this.sceneService = sceneContainer.get(TYPES.ISceneService);\n    this.mapService = sceneContainer.get(TYPES.IMapService);\n    this.iconService = sceneContainer.get(TYPES.IIconService);\n    this.controlService = sceneContainer.get(TYPES.IControlService);\n    this.layerService = sceneContainer.get(TYPES.ILayerService);\n    this.markerService = sceneContainer.get(TYPES.IMarkerService);\n    this.popupService = sceneContainer.get(TYPES.IPopupService);\n    this.initComponent(id);\n    this.sceneService.init(config);\n    this.addControl(new Logo());\n  }\n\n  _createClass(Scene, [{\n    key: \"getMapService\",\n    value: function getMapService() {\n      return this.mapService;\n    }\n  }, {\n    key: \"ExportMap2Png\",\n    value: function ExportMap2Png() {\n      return this.sceneService.ExportMap2Png();\n    }\n  }, {\n    key: \"addLayer\",\n    value: function addLayer(layer) {\n      var layerContainer = createLayerContainer(this.container);\n      layer.setContainer(layerContainer);\n      this.sceneService.addLayer(layer);\n    }\n  }, {\n    key: \"getLayers\",\n    value: function getLayers() {\n      return this.layerService.getLayers();\n    }\n  }, {\n    key: \"getLayer\",\n    value: function getLayer(id) {\n      return this.layerService.getLayer(id);\n    }\n  }, {\n    key: \"removeLayer\",\n    value: function removeLayer(layer) {\n      this.layerService.remove(layer);\n    }\n  }, {\n    key: \"removeAllLayer\",\n    value: function removeAllLayer() {\n      this.layerService.removeAllLayers();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.sceneService.render();\n    }\n  }, {\n    key: \"addImage\",\n    value: function addImage(id, img) {\n      this.iconService.addImage(id, img);\n    }\n  }, {\n    key: \"hasImage\",\n    value: function hasImage(id) {\n      this.iconService.hasImage(id);\n    }\n  }, {\n    key: \"removeImage\",\n    value: function removeImage(id) {\n      this.iconService.removeImage(id);\n    }\n  }, {\n    key: \"addControl\",\n    value: function addControl(ctr) {\n      this.controlService.addControl(ctr, this.container);\n    }\n  }, {\n    key: \"removeControl\",\n    value: function removeControl(ctr) {\n      this.controlService.removeControl(ctr);\n    }\n  }, {\n    key: \"addMarker\",\n    value: function addMarker(marker) {\n      this.markerService.addMarker(marker);\n    }\n  }, {\n    key: \"addMarkerLayer\",\n    value: function addMarkerLayer(layer) {\n      this.markerService.addMarkerLayer(layer);\n    }\n  }, {\n    key: \"removeMarkerLayer\",\n    value: function removeMarkerLayer(layer) {\n      this.markerService.removeMarkerLayer(layer);\n    }\n  }, {\n    key: \"removeAllMakers\",\n    value: function removeAllMakers() {\n      this.markerService.removeAllMarkers();\n    }\n  }, {\n    key: \"addPopup\",\n    value: function addPopup(popup) {\n      this.popupService.addPopup(popup);\n    }\n  }, {\n    key: \"on\",\n    value: function on(type, handle) {\n      SceneEventList.indexOf(type) === -1 ? this.mapService.on(type, handle) : this.sceneService.on(type, handle);\n    }\n  }, {\n    key: \"off\",\n    value: function off(type, handle) {\n      SceneEventList.indexOf(type) === -1 ? this.mapService.off(type, handle) : this.sceneService.off(type, handle);\n    }\n  }, {\n    key: \"getZoom\",\n    value: function getZoom() {\n      return this.mapService.getZoom();\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter() {\n      return this.mapService.getCenter();\n    }\n  }, {\n    key: \"getPitch\",\n    value: function getPitch() {\n      return this.mapService.getPitch();\n    }\n  }, {\n    key: \"getRotation\",\n    value: function getRotation() {\n      return this.mapService.getRotation();\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds() {\n      return this.mapService.getBounds();\n    }\n  }, {\n    key: \"setRotation\",\n    value: function setRotation(rotation) {\n      this.mapService.setRotation(rotation);\n    }\n  }, {\n    key: \"zoomIn\",\n    value: function zoomIn() {\n      this.mapService.zoomIn();\n    }\n  }, {\n    key: \"zoomOut\",\n    value: function zoomOut() {\n      this.mapService.zoomOut();\n    }\n  }, {\n    key: \"panTo\",\n    value: function panTo(p) {\n      this.mapService.panTo(p);\n    }\n  }, {\n    key: \"panBy\",\n    value: function panBy(pixel) {\n      this.mapService.panTo(pixel);\n    }\n  }, {\n    key: \"setZoom\",\n    value: function setZoom(zoom) {\n      this.mapService.setZoom(zoom);\n    }\n  }, {\n    key: \"fitBounds\",\n    value: function fitBounds(bound) {\n      this.mapService.fitBounds(bound);\n    }\n  }, {\n    key: \"setZoomAndCenter\",\n    value: function setZoomAndCenter(zoom, center) {\n      this.mapService.setZoomAndCenter(zoom, center);\n    }\n  }, {\n    key: \"setMapStyle\",\n    value: function setMapStyle(style) {\n      this.mapService.setMapStyle(style);\n    }\n  }, {\n    key: \"pixelToLngLat\",\n    value: function pixelToLngLat(pixel) {\n      return this.mapService.pixelToLngLat(pixel);\n    }\n  }, {\n    key: \"lngLatToPixel\",\n    value: function lngLatToPixel(lnglat) {\n      return this.mapService.lngLatToPixel(lnglat);\n    }\n  }, {\n    key: \"containerToLngLat\",\n    value: function containerToLngLat(pixel) {\n      return this.mapService.containerToLngLat(pixel);\n    }\n  }, {\n    key: \"lngLatToContainer\",\n    value: function lngLatToContainer(lnglat) {\n      return this.mapService.lngLatToContainer(lnglat);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.sceneService.destroy();\n    }\n  }, {\n    key: \"registerPostProcessingPass\",\n    value: function registerPostProcessingPass(constructor, name) {\n      this.container.bind(TYPES.IPostProcessingPass).to(constructor).whenTargetNamed(name);\n    }\n  }, {\n    key: \"initComponent\",\n    value: function initComponent(id) {\n      this.controlService.init({\n        container: DOM.getContainer(id)\n      }, this.container);\n      this.markerService.init(this.container);\n      this.popupService.init(this.container);\n    }\n  }, {\n    key: \"map\",\n    get: function get() {\n      return this.mapService.map;\n    }\n  }]);\n\n  return Scene;\n}();\n\nexport { Scene };","map":{"version":3,"sources":["../src/index.ts"],"names":["Scene","sceneService","mapService","controlService","layerService","iconService","markerService","popupService","container","id","map","config","sceneContainer","createSceneContainer","TYPES","layer","layerContainer","createLayerContainer","img","ctr","marker","popup","type","handle","SceneEventList","rotation","p","pixel","zoom","bound","center","style","lnglat","constructor","name","DOM"],"mappings":"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","sourcesContent":["import { Logo } from '@antv/l7-component';\nimport {\n  Bounds,\n  createLayerContainer,\n  createSceneContainer,\n  IControl,\n  IControlService,\n  IIconService,\n  IImage,\n  ILayer,\n  ILayerService,\n  ILngLat,\n  IMapService,\n  IMarker,\n  IMarkerLayer,\n  IMarkerService,\n  IPoint,\n  IPopup,\n  IPopupService,\n  IPostProcessingPass,\n  IRendererService,\n  ISceneConfig,\n  ISceneService,\n  Point,\n  SceneEventList,\n  TYPES,\n} from '@antv/l7-core';\nimport { ReglRendererService } from '@antv/l7-renderer';\nimport { DOM } from '@antv/l7-utils';\nimport { Container } from 'inversify';\nimport ILayerManager from './ILayerManager';\nimport IMapController from './IMapController';\nimport IPostProcessingPassPluggable from './IPostProcessingPassPluggable';\n\n/**\n * 暴露 Scene API\n *\n * @example\n * import { Scene } from 'l7/scene';\n * import { PointLayer } from 'l7/layers';\n *\n * const scene = new Scene();\n * const pointLayer = new PointLayer();\n * scene.addLayer(pointLayer);\n *\n */\nclass Scene\n  implements IPostProcessingPassPluggable, IMapController, ILayerManager {\n  private sceneService: ISceneService;\n  private mapService: IMapService<unknown>;\n  private controlService: IControlService;\n  private layerService: ILayerService;\n  private iconService: IIconService;\n  private markerService: IMarkerService;\n  private popupService: IPopupService;\n\n  private container: Container;\n\n  public constructor(config: ISceneConfig) {\n    const { id, map } = config;\n\n    // 创建场景容器\n    const sceneContainer = createSceneContainer();\n    this.container = sceneContainer;\n    // 绑定地图服务\n    map.setContainer(sceneContainer, id);\n\n    // 绑定渲染引擎服务\n    sceneContainer\n      .bind<IRendererService>(TYPES.IRendererService)\n      .to(ReglRendererService)\n      .inSingletonScope();\n\n    // 依赖注入\n    this.sceneService = sceneContainer.get<ISceneService>(TYPES.ISceneService);\n    this.mapService = sceneContainer.get<IMapService<unknown>>(\n      TYPES.IMapService,\n    );\n    this.iconService = sceneContainer.get<IIconService>(TYPES.IIconService);\n    this.controlService = sceneContainer.get<IControlService>(\n      TYPES.IControlService,\n    );\n    this.layerService = sceneContainer.get<ILayerService>(TYPES.ILayerService);\n\n    this.markerService = sceneContainer.get<IMarkerService>(\n      TYPES.IMarkerService,\n    );\n\n    this.popupService = sceneContainer.get<IPopupService>(TYPES.IPopupService);\n\n    this.initComponent(id);\n\n    // 初始化 scene\n    this.sceneService.init(config);\n    // TODO: 初始化组件\n    this.addControl(new Logo());\n  }\n\n  public getMapService(): IMapService<unknown> {\n    return this.mapService;\n  }\n  public ExportMap2Png(): string {\n    return this.sceneService.ExportMap2Png();\n  }\n\n  public get map() {\n    return this.mapService.map;\n  }\n\n  // layer 管理\n  public addLayer(layer: ILayer): void {\n    // 为当前图层创建一个容器\n    // TODO: 初始化的时候设置 容器\n    const layerContainer = createLayerContainer(this.container);\n    layer.setContainer(layerContainer);\n    this.sceneService.addLayer(layer);\n  }\n\n  public getLayers(): ILayer[] {\n    return this.layerService.getLayers();\n  }\n\n  public getLayer(id: string): ILayer | undefined {\n    return this.layerService.getLayer(id);\n  }\n\n  public removeLayer(layer: ILayer): void {\n    this.layerService.remove(layer);\n  }\n\n  public removeAllLayer(): void {\n    this.layerService.removeAllLayers();\n  }\n\n  public render(): void {\n    this.sceneService.render();\n  }\n\n  // asset method\n  public addImage(id: string, img: IImage) {\n    this.iconService.addImage(id, img);\n  }\n\n  public hasImage(id: string) {\n    this.iconService.hasImage(id);\n  }\n\n  public removeImage(id: string) {\n    this.iconService.removeImage(id);\n  }\n\n  // map control method\n  public addControl(ctr: IControl) {\n    this.controlService.addControl(ctr, this.container);\n  }\n\n  public removeControl(ctr: IControl) {\n    this.controlService.removeControl(ctr);\n  }\n\n  // marker\n  public addMarker(marker: IMarker) {\n    this.markerService.addMarker(marker);\n  }\n\n  public addMarkerLayer(layer: IMarkerLayer) {\n    this.markerService.addMarkerLayer(layer);\n  }\n\n  public removeMarkerLayer(layer: IMarkerLayer) {\n    this.markerService.removeMarkerLayer(layer);\n  }\n\n  public removeAllMakers() {\n    this.markerService.removeAllMarkers();\n  }\n\n  public addPopup(popup: IPopup) {\n    this.popupService.addPopup(popup);\n  }\n\n  public on(type: string, handle: (...args: any[]) => void): void {\n    SceneEventList.indexOf(type) === -1\n      ? this.mapService.on(type, handle)\n      : this.sceneService.on(type, handle);\n  }\n\n  public off(type: string, handle: (...args: any[]) => void): void {\n    SceneEventList.indexOf(type) === -1\n      ? this.mapService.off(type, handle)\n      : this.sceneService.off(type, handle);\n  }\n\n  // implements IMapController\n\n  public getZoom(): number {\n    return this.mapService.getZoom();\n  }\n\n  public getCenter(): ILngLat {\n    return this.mapService.getCenter();\n  }\n\n  public getPitch(): number {\n    return this.mapService.getPitch();\n  }\n\n  public getRotation(): number {\n    return this.mapService.getRotation();\n  }\n\n  public getBounds(): Bounds {\n    return this.mapService.getBounds();\n  }\n\n  public setRotation(rotation: number): void {\n    this.mapService.setRotation(rotation);\n  }\n  public zoomIn(): void {\n    this.mapService.zoomIn();\n  }\n\n  public zoomOut(): void {\n    this.mapService.zoomOut();\n  }\n\n  public panTo(p: Point): void {\n    this.mapService.panTo(p);\n  }\n\n  public panBy(pixel: Point): void {\n    this.mapService.panTo(pixel);\n  }\n\n  public setZoom(zoom: number): void {\n    this.mapService.setZoom(zoom);\n  }\n  public fitBounds(bound: Bounds): void {\n    this.mapService.fitBounds(bound);\n  }\n\n  public setZoomAndCenter(zoom: number, center: Point): void {\n    this.mapService.setZoomAndCenter(zoom, center);\n  }\n\n  public setMapStyle(style: string): void {\n    this.mapService.setMapStyle(style);\n  }\n\n  // conversion Method\n  public pixelToLngLat(pixel: Point): ILngLat {\n    return this.mapService.pixelToLngLat(pixel);\n  }\n\n  public lngLatToPixel(lnglat: Point): IPoint {\n    return this.mapService.lngLatToPixel(lnglat);\n  }\n\n  public containerToLngLat(pixel: Point): ILngLat {\n    return this.mapService.containerToLngLat(pixel);\n  }\n\n  public lngLatToContainer(lnglat: Point): IPoint {\n    return this.mapService.lngLatToContainer(lnglat);\n  }\n\n  public destroy() {\n    this.sceneService.destroy();\n    // TODO: 清理其他 Service 例如 IconService\n  }\n\n  public registerPostProcessingPass(\n    constructor: new (...args: any[]) => IPostProcessingPass<unknown>,\n    name: string,\n  ) {\n    this.container\n      .bind<IPostProcessingPass<unknown>>(TYPES.IPostProcessingPass)\n      .to(constructor)\n      .whenTargetNamed(name);\n  }\n\n  private initComponent(id: string | HTMLDivElement) {\n    this.controlService.init(\n      {\n        container: DOM.getContainer(id),\n      },\n      this.container,\n    );\n    this.markerService.init(this.container);\n    this.popupService.init(this.container);\n  }\n  // 资源管理\n}\n\nexport { Scene };\n"]},"metadata":{},"sourceType":"module"}