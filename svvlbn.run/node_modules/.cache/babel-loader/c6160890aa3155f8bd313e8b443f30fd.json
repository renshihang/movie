{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport BaseLayer from '../core/BaseLayer';\nimport PolygonModels from './models/';\n\nvar PolygonLayer = function (_BaseLayer) {\n  _inherits(PolygonLayer, _BaseLayer);\n\n  function PolygonLayer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PolygonLayer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PolygonLayer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.type = 'PolygonLayer';\n    return _this;\n  }\n\n  _createClass(PolygonLayer, [{\n    key: \"buildModels\",\n    value: function buildModels() {\n      var shape = this.getModelType();\n      this.layerModel = new PolygonModels[shape](this);\n      this.models = this.layerModel.buildModels();\n    }\n  }, {\n    key: \"getConfigSchema\",\n    value: function getConfigSchema() {\n      return {\n        properties: {\n          opacity: {\n            type: 'number',\n            minimum: 0,\n            maximum: 1\n          }\n        }\n      };\n    }\n  }, {\n    key: \"getModelType\",\n    value: function getModelType() {\n      var _shapeAttribute$scale;\n\n      var shapeAttribute = this.styleAttributeService.getLayerStyleAttribute('shape');\n      var shape = shapeAttribute === null || shapeAttribute === void 0 ? void 0 : (_shapeAttribute$scale = shapeAttribute.scale) === null || _shapeAttribute$scale === void 0 ? void 0 : _shapeAttribute$scale.field;\n\n      if (shape === 'fill') {\n        return 'fill';\n      } else if (shape === 'extrude') {\n        return 'extrude';\n      } else if (shape === 'line') {\n        return 'line';\n      } else {\n        return this.getPointModelType();\n      }\n    }\n  }, {\n    key: \"getPointModelType\",\n    value: function getPointModelType() {\n      var layerData = this.getEncodedData();\n\n      var _this$getLayerConfig = this.getLayerConfig(),\n          shape2d = _this$getLayerConfig.shape2d,\n          shape3d = _this$getLayerConfig.shape3d;\n\n      var iconMap = this.iconService.getIconMap();\n      var item = layerData.find(function (fe) {\n        return fe.hasOwnProperty('shape');\n      });\n\n      if (!item) {\n        return 'fill';\n      } else {\n        var shape = item.shape;\n\n        if (shape === 'dot') {\n          return 'point_normal';\n        }\n\n        if ((shape2d === null || shape2d === void 0 ? void 0 : shape2d.indexOf(shape)) !== -1) {\n          return 'point_fill';\n        }\n\n        if ((shape3d === null || shape3d === void 0 ? void 0 : shape3d.indexOf(shape)) !== -1) {\n          return 'point_extrude';\n        }\n\n        if (iconMap.hasOwnProperty(shape)) {\n          return 'point_image';\n        }\n\n        return 'text';\n      }\n    }\n  }]);\n\n  return PolygonLayer;\n}(BaseLayer);\n\nexport { PolygonLayer as default };","map":{"version":3,"sources":["../../src/polygon/index.ts"],"names":["PolygonLayer","BaseLayer","type","shape","PolygonModels","properties","opacity","minimum","maximum","shapeAttribute","layerData","shape2d","shape3d","iconMap","item","fe"],"mappings":";;;;;AACA,OAAA,SAAA,MAAA,mBAAA;AAEA,OAAA,aAAA,MAAA,WAAA;;IAMqBA,Y;;;;;;;;;;;;;;;UACZE,I,GAAe,c;;;;;;kCACD;AACnB,UAAMC,KAAK,GAAG,KAAd,YAAc,EAAd;AACA,WAAA,UAAA,GAAkB,IAAIC,aAAa,CAAjB,KAAiB,CAAjB,CAAlB,IAAkB,CAAlB;AACA,WAAA,MAAA,GAAc,KAAA,UAAA,CAAd,WAAc,EAAd;AACD;;;sCAE2B;AAC1B,aAAO;AACLC,QAAAA,UAAU,EAAE;AACVC,UAAAA,OAAO,EAAE;AACPJ,YAAAA,IAAI,EADG,QAAA;AAEPK,YAAAA,OAAO,EAFA,CAAA;AAGPC,YAAAA,OAAO,EAAE;AAHF;AADC;AADP,OAAP;AASD;;;mCAE0C;AAAA,UAAA,qBAAA;;AACzC,UAAMC,cAAc,GAAG,KAAA,qBAAA,CAAA,sBAAA,CAAvB,OAAuB,CAAvB;AAGA,UAAMN,KAAK,GAAGM,cAAH,KAAA,IAAGA,IAAAA,cAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAH,CAAA,qBAAA,GAAGA,cAAc,CAAjB,KAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGA,qBAAAA,CAAd,KAAA;;AACA,UAAIN,KAAK,KAAT,MAAA,EAAsB;AACpB,eAAA,MAAA;AADF,OAAA,MAEO,IAAIA,KAAK,KAAT,SAAA,EAAyB;AAC9B,eAAA,SAAA;AADK,OAAA,MAEA,IAAIA,KAAK,KAAT,MAAA,EAAsB;AAC3B,eAAA,MAAA;AADK,OAAA,MAEA;AACL,eAAO,KAAP,iBAAO,EAAP;AACD;AACF;;;wCAC+C;AAG9C,UAAMO,SAAS,GAAG,KAAlB,cAAkB,EAAlB;;AAH8C,UAAA,oBAAA,GAIjB,KAJiB,cAIjB,EAJiB;AAAA,UAItCC,OAJsC,GAAA,oBAAA,CAAA,OAAA;AAAA,UAI7BC,OAJ6B,GAAA,oBAAA,CAAA,OAAA;;AAK9C,UAAMC,OAAO,GAAG,KAAA,WAAA,CAAhB,UAAgB,EAAhB;AACA,UAAMC,IAAI,GAAG,SAAS,CAAT,IAAA,CAAe,UAAA,EAAA,EAAwB;AAClD,eAAOC,EAAE,CAAFA,cAAAA,CAAP,OAAOA,CAAP;AADF,OAAa,CAAb;;AAGA,UAAI,CAAJ,IAAA,EAAW;AACT,eAAA,MAAA;AADF,OAAA,MAEO;AACL,YAAMZ,KAAK,GAAGW,IAAI,CAAlB,KAAA;;AACA,YAAIX,KAAK,KAAT,KAAA,EAAqB;AACnB,iBAAA,cAAA;AACD;;AACD,YAAI,CAAA,OAAO,KAAP,IAAA,IAAA,OAAO,KAAA,KAAP,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAP,OAAA,CAAA,KAAA,CAAA,MAAsC,CAA1C,CAAA,EAA8C;AAC5C,iBAAA,YAAA;AACD;;AACD,YAAI,CAAA,OAAO,KAAP,IAAA,IAAA,OAAO,KAAA,KAAP,CAAA,GAAA,KAAA,CAAA,GAAA,OAAO,CAAP,OAAA,CAAA,KAAA,CAAA,MAAsC,CAA1C,CAAA,EAA8C;AAC5C,iBAAA,eAAA;AACD;;AACD,YAAIU,OAAO,CAAPA,cAAAA,CAAJ,KAAIA,CAAJ,EAA6C;AAC3C,iBAAA,aAAA;AACD;;AACD,eAAA,MAAA;AACD;AACF;;;;EA9DuCZ,S;;SAArBD,Y","sourcesContent":["import { IEncodeFeature } from '@antv/l7-core';\nimport BaseLayer from '../core/BaseLayer';\nimport { PointType } from '../point/models/';\nimport PolygonModels, { PolygonModelType } from './models/';\n\ninterface IPolygonLayerStyleOptions {\n  opacity: number;\n}\n\nexport default class PolygonLayer extends BaseLayer<IPolygonLayerStyleOptions> {\n  public type: string = 'PolygonLayer';\n  public buildModels() {\n    const shape = this.getModelType();\n    this.layerModel = new PolygonModels[shape](this);\n    this.models = this.layerModel.buildModels();\n  }\n\n  protected getConfigSchema() {\n    return {\n      properties: {\n        opacity: {\n          type: 'number',\n          minimum: 0,\n          maximum: 1,\n        },\n      },\n    };\n  }\n\n  protected getModelType(): PolygonModelType {\n    const shapeAttribute = this.styleAttributeService.getLayerStyleAttribute(\n      'shape',\n    );\n    const shape = shapeAttribute?.scale?.field as PolygonModelType;\n    if (shape === 'fill') {\n      return 'fill';\n    } else if (shape === 'extrude') {\n      return 'extrude';\n    } else if (shape === 'line') {\n      return 'line';\n    } else {\n      return this.getPointModelType();\n    }\n  }\n  protected getPointModelType(): PolygonModelType {\n    // pointlayer\n    //  2D、 3d、 shape、image、text、normal、\n    const layerData = this.getEncodedData();\n    const { shape2d, shape3d } = this.getLayerConfig();\n    const iconMap = this.iconService.getIconMap();\n    const item = layerData.find((fe: IEncodeFeature) => {\n      return fe.hasOwnProperty('shape');\n    });\n    if (!item) {\n      return 'fill';\n    } else {\n      const shape = item.shape;\n      if (shape === 'dot') {\n        return 'point_normal';\n      }\n      if (shape2d?.indexOf(shape as string) !== -1) {\n        return 'point_fill';\n      }\n      if (shape3d?.indexOf(shape as string) !== -1) {\n        return 'point_extrude';\n      }\n      if (iconMap.hasOwnProperty(shape as string)) {\n        return 'point_image';\n      }\n      return 'text';\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}