{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nvar _dec, _class;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { injectable } from 'inversify';\nvar ink = \"varying vec2 v_UV;\\n\\nuniform sampler2D u_Texture;\\nuniform vec2 u_ViewportSize: [1.0, 1.0];\\nuniform float u_Strength : 0.6;\\n\\nvec4 ink_sampleColor(sampler2D texture, vec2 texSize, vec2 texCoord) {\\n  vec2 dx = vec2(1.0 / texSize.x, 0.0);\\n  vec2 dy = vec2(0.0, 1.0 / texSize.y);\\n  vec4 color = texture2D(texture, texCoord);\\n  float bigTotal = 0.0;\\n  float smallTotal = 0.0;\\n  vec3 bigAverage = vec3(0.0);\\n  vec3 smallAverage = vec3(0.0);\\n  for (float x = -2.0; x <= 2.0; x += 1.0) {\\n    for (float y = -2.0; y <= 2.0; y += 1.0) {\\n      vec3 sample = texture2D(texture, texCoord + dx * x + dy * y).rgb;\\n      bigAverage += sample;\\n      bigTotal += 1.0;\\n      if (abs(x) + abs(y) < 2.0) {\\n        smallAverage += sample;\\n        smallTotal += 1.0;\\n      }\\n    }\\n  }\\n  vec3 edge = max(vec3(0.0), bigAverage / bigTotal - smallAverage / smallTotal);\\n  float power = u_Strength * u_Strength * u_Strength * u_Strength * u_Strength;\\n  return vec4(color.rgb - dot(edge, edge) * power * 100000.0, color.a);\\n}\\n\\nvoid main() {\\n  gl_FragColor = vec4(texture2D(u_Texture, v_UV));\\n  gl_FragColor = ink_sampleColor(u_Texture, u_ViewportSize, v_UV);\\n}\";\nvar quad = \"attribute vec2 a_Position;\\n\\nvarying vec2 v_UV;\\n\\nvoid main() {\\n  v_UV = 0.5 * (a_Position + 1.0);\\n  gl_Position = vec4(a_Position, 0., 1.);\\n}\";\nimport BasePostProcessingPass from '../BasePostProcessingPass';\nvar InkPass = (_dec = injectable(), _dec(_class = function (_BasePostProcessingPa) {\n  _inherits(InkPass, _BasePostProcessingPa);\n\n  function InkPass() {\n    _classCallCheck(this, InkPass);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(InkPass).apply(this, arguments));\n  }\n\n  _createClass(InkPass, [{\n    key: \"setupShaders\",\n    value: function setupShaders() {\n      this.shaderModuleService.registerModule('ink-pass', {\n        vs: quad,\n        fs: ink\n      });\n\n      var _this$shaderModuleSer = this.shaderModuleService.getModule('ink-pass'),\n          vs = _this$shaderModuleSer.vs,\n          fs = _this$shaderModuleSer.fs,\n          uniforms = _this$shaderModuleSer.uniforms;\n\n      var _this$rendererService = this.rendererService.getViewportSize(),\n          width = _this$rendererService.width,\n          height = _this$rendererService.height;\n\n      return {\n        vs: vs,\n        fs: fs,\n        uniforms: _objectSpread({}, uniforms, {\n          u_ViewportSize: [width, height]\n        })\n      };\n    }\n  }]);\n\n  return InkPass;\n}(BasePostProcessingPass)) || _class);\nexport { InkPass as default };","map":{"version":3,"sources":["../../../../../src/services/renderer/passes/post-processing/InkPass.ts"],"names":["injectable","InkPass","BasePostProcessingPass","vs","fs","ink","uniforms","width","height","u_ViewportSize"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,UAAA,QAAA,WAAA;;;AAGA,OAAA,sBAAA,MAAA,2BAAA;IAOqBC,O,WADpBD,UAAU,E;;;;;;;;;;;mCAEgB;AACvB,WAAA,mBAAA,CAAA,cAAA,CAAA,UAAA,EAAoD;AAClDG,QAAAA,EAAE,EADgD,IAAA;AAElDC,QAAAA,EAAE,EAAEC;AAF8C,OAApD;;AADuB,UAAA,qBAAA,GAMM,KAAA,mBAAA,CAAA,SAAA,CANN,UAMM,CANN;AAAA,UAMfF,EANe,GAAA,qBAAA,CAAA,EAAA;AAAA,UAMXC,EANW,GAAA,qBAAA,CAAA,EAAA;AAAA,UAMPE,QANO,GAAA,qBAAA,CAAA,QAAA;;AAAA,UAAA,qBAAA,GAOG,KAAA,eAAA,CAPH,eAOG,EAPH;AAAA,UAOfC,KAPe,GAAA,qBAAA,CAAA,KAAA;AAAA,UAORC,MAPQ,GAAA,qBAAA,CAAA,MAAA;;AASvB,aAAO;AACLL,QAAAA,EAAE,EADG,EAAA;AAELC,QAAAA,EAAE,EAFG,EAAA;AAGLE,QAAAA,QAAQ,EAAA,aAAA,CAAA,EAAA,EAAA,QAAA,EAAA;AAENG,UAAAA,cAAc,EAAE,CAAA,KAAA,EAAA,MAAA;AAFV,SAAA;AAHH,OAAP;AAQD;;;;EAlBkCP,sB;SAAhBD,O","sourcesContent":["import { injectable } from 'inversify';\nimport ink from '../../../../shaders/post-processing/ink.glsl';\nimport quad from '../../../../shaders/post-processing/quad.glsl';\nimport BasePostProcessingPass from '../BasePostProcessingPass';\n\nexport interface IInkPassConfig {\n  strength: number;\n}\n\n@injectable()\nexport default class InkPass extends BasePostProcessingPass<IInkPassConfig> {\n  protected setupShaders() {\n    this.shaderModuleService.registerModule('ink-pass', {\n      vs: quad,\n      fs: ink,\n    });\n\n    const { vs, fs, uniforms } = this.shaderModuleService.getModule('ink-pass');\n    const { width, height } = this.rendererService.getViewportSize();\n\n    return {\n      vs,\n      fs,\n      uniforms: {\n        ...uniforms,\n        u_ViewportSize: [width, height],\n      },\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}